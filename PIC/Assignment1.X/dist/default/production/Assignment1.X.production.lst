

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat Nov 13 15:13:21 2021

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    54                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    60                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    61                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    62  0000                     
    63                           ; Version 1.45
    64                           ; Generated 16/11/2017 GMT
    65                           ; 
    66                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    67                           ; All rights reserved.
    68                           ; 
    69                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    70                           ; 
    71                           ; Redistribution and use in source and binary forms, with or without modification, are
    72                           ; permitted provided that the following conditions are met:
    73                           ; 
    74                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    75                           ;        conditions and the following disclaimer.
    76                           ; 
    77                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    78                           ;        of conditions and the following disclaimer in the documentation and/or other
    79                           ;        materials provided with the distribution.
    80                           ; 
    81                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    82                           ;        software without specific prior written permission.
    83                           ; 
    84                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    85                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    86                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    87                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    88                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    89                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    90                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    91                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    92                           ; 
    93                           ; 
    94                           ; Code-generator required, PIC18F4620 Definitions
    95                           ; 
    96                           ; SFR Addresses
    97  0000                     
    98                           	psect	idataCOMRAM
    99  003150                     __pidataCOMRAM:
   100                           	opt stack 0
   101                           
   102                           ;initializer for _LCD_INIT_STRING
   103  003150  28                 	db	40
   104  003151  0C                 	db	12
   105  003152  01                 	db	1
   106  003153  06                 	db	6
   107                           
   108                           ;initializer for _initial
   109  003154  0001               	dw	1
   110                           
   111                           	psect	mediumconst
   112  00FDD8                     __pmediumconst:
   113                           	opt stack 0
   114  00FDD8  00                 	db	0
   115  00FDD9                     __powers_:
   116                           	opt stack 0
   117  00FDD9  0000               	dw	0
   118  00FDDB  3F80               	dw	16256
   119  00FDDD  0000               	dw	0
   120  00FDDF  4120               	dw	16672
   121  00FDE1  0000               	dw	0
   122  00FDE3  42C8               	dw	17096
   123  00FDE5  0000               	dw	0
   124  00FDE7  447A               	dw	17530
   125  00FDE9  4000               	dw	16384
   126  00FDEB  461C               	dw	17948
   127  00FDED  5000               	dw	20480
   128  00FDEF  47C3               	dw	18371
   129  00FDF1  2400               	dw	9216
   130  00FDF3  4974               	dw	18804
   131  00FDF5  9680               	dw	38528
   132  00FDF7  4B18               	dw	19224
   133  00FDF9  BC20               	dw	48160
   134  00FDFB  4CBE               	dw	19646
   135  00FDFD  6B28               	dw	27432
   136  00FDFF  4E6E               	dw	20078
   137  00FE01  02F9               	dw	761
   138  00FE03  5015               	dw	20501
   139  00FE05  78EC               	dw	30956
   140  00FE07  60AD               	dw	24749
   141  00FE09  F2CA               	dw	62154
   142  00FE0B  7149               	dw	29001
   143  00FE0D                     __end_of__powers_:
   144                           	opt stack 0
   145  00FE0D                     __npowers_:
   146                           	opt stack 0
   147  00FE0D  0000               	dw	0
   148  00FE0F  3F80               	dw	16256
   149  00FE11  CCCD               	dw	52429
   150  00FE13  3DCC               	dw	15820
   151  00FE15  D70A               	dw	55050
   152  00FE17  3C23               	dw	15395
   153  00FE19  126F               	dw	4719
   154  00FE1B  3A83               	dw	14979
   155  00FE1D  B717               	dw	46871
   156  00FE1F  38D1               	dw	14545
   157  00FE21  C5AC               	dw	50604
   158  00FE23  3727               	dw	14119
   159  00FE25  37BD               	dw	14269
   160  00FE27  3586               	dw	13702
   161  00FE29  BF95               	dw	49045
   162  00FE2B  33D6               	dw	13270
   163  00FE2D  CC77               	dw	52343
   164  00FE2F  322B               	dw	12843
   165  00FE31  705F               	dw	28767
   166  00FE33  3089               	dw	12425
   167  00FE35  E6FF               	dw	59135
   168  00FE37  2EDB               	dw	11995
   169  00FE39  E508               	dw	58632
   170  00FE3B  1E3C               	dw	7740
   171  00FE3D  4260               	dw	16992
   172  00FE3F  0DA2               	dw	3490
   173  00FE41                     __end_of__npowers_:
   174                           	opt stack 0
   175  00FE41                     _dpowers:
   176                           	opt stack 0
   177  00FE41  0001               	dw	1
   178  00FE43  0000               	dw	0
   179  00FE45  000A               	dw	10
   180  00FE47  0000               	dw	0
   181  00FE49  0064               	dw	100
   182  00FE4B  0000               	dw	0
   183  00FE4D  03E8               	dw	1000
   184  00FE4F  0000               	dw	0
   185  00FE51  2710               	dw	10000
   186  00FE53  0000               	dw	0
   187  00FE55  86A0               	dw	34464
   188  00FE57  0001               	dw	1
   189  00FE59  4240               	dw	16960
   190  00FE5B  000F               	dw	15
   191  00FE5D  9680               	dw	38528
   192  00FE5F  0098               	dw	152
   193  00FE61  E100               	dw	57600
   194  00FE63  05F5               	dw	1525
   195  00FE65  CA00               	dw	51712
   196  00FE67  3B9A               	dw	15258
   197  00FE69                     __end_of_dpowers:
   198                           	opt stack 0
   199  00FE69                     STR_4:
   200                           
   201                           ; BSR set to: 0
   202  00FE69  33                 	db	51	;'3'
   203  00FE6A  20                 	db	32
   204  00FE6B  2D                 	db	45
   205  00FE6C  20                 	db	32
   206  00FE6D  54                 	db	84	;'T'
   207  00FE6E  6F                 	db	111	;'o'
   208  00FE6F  20                 	db	32
   209  00FE70  43                 	db	67	;'C'
   210  00FE71  68                 	db	104	;'h'
   211  00FE72  61                 	db	97	;'a'
   212  00FE73  6E                 	db	110	;'n'
   213  00FE74  67                 	db	103	;'g'
   214  00FE75  65                 	db	101	;'e'
   215  00FE76  20                 	db	32
   216  00FE77  54                 	db	84	;'T'
   217  00FE78  69                 	db	105	;'i'
   218  00FE79  6D                 	db	109	;'m'
   219  00FE7A  65                 	db	101	;'e'
   220  00FE7B  3A                 	db	58	;':'
   221  00FE7C  20                 	db	32
   222  00FE7D  45                 	db	69	;'E'
   223  00FE7E  6E                 	db	110	;'n'
   224  00FE7F  74                 	db	116	;'t'
   225  00FE80  65                 	db	101	;'e'
   226  00FE81  72                 	db	114	;'r'
   227  00FE82  20                 	db	32
   228  00FE83  54                 	db	84	;'T'
   229  00FE84  68                 	db	104	;'h'
   230  00FE85  65                 	db	101	;'e'
   231  00FE86  20                 	db	32
   232  00FE87  4E                 	db	78	;'N'
   233  00FE88  65                 	db	101	;'e'
   234  00FE89  77                 	db	119	;'w'
   235  00FE8A  20                 	db	32
   236  00FE8B  54                 	db	84	;'T'
   237  00FE8C  69                 	db	105	;'i'
   238  00FE8D  6D                 	db	109	;'m'
   239  00FE8E  65                 	db	101	;'e'
   240  00FE8F  20                 	db	32
   241  00FE90  49                 	db	73	;'I'
   242  00FE91  6E                 	db	110	;'n'
   243  00FE92  20                 	db	32
   244  00FE93  54                 	db	84	;'T'
   245  00FE94  68                 	db	104	;'h'
   246  00FE95  65                 	db	101	;'e'
   247  00FE96  20                 	db	32
   248  00FE97  46                 	db	70	;'F'
   249  00FE98  6F                 	db	111	;'o'
   250  00FE99  72                 	db	114	;'r'
   251  00FE9A  6D                 	db	109	;'m'
   252  00FE9B  61                 	db	97	;'a'
   253  00FE9C  74                 	db	116	;'t'
   254  00FE9D  20                 	db	32
   255  00FE9E  57                 	db	87	;'W'
   256  00FE9F  48                 	db	72	;'H'
   257  00FEA0  48                 	db	72	;'H'
   258  00FEA1  3A                 	db	58	;':'
   259  00FEA2  4D                 	db	77	;'M'
   260  00FEA3  4D                 	db	77	;'M'
   261  00FEA4  3A                 	db	58	;':'
   262  00FEA5  53                 	db	83	;'S'
   263  00FEA6  53                 	db	83	;'S'
   264  00FEA7  0A                 	db	10
   265  00FEA8  0D                 	db	13
   266  00FEA9  00                 	db	0
   267  00FEAA                     STR_1:
   268                           
   269                           ; BSR set to: 0
   270  00FEAA  54                 	db	84	;'T'
   271  00FEAB  68                 	db	104	;'h'
   272  00FEAC  69                 	db	105	;'i'
   273  00FEAD  73                 	db	115	;'s'
   274  00FEAE  20                 	db	32
   275  00FEAF  57                 	db	87	;'W'
   276  00FEB0  6F                 	db	111	;'o'
   277  00FEB1  72                 	db	114	;'r'
   278  00FEB2  6B                 	db	107	;'k'
   279  00FEB3  20                 	db	32
   280  00FEB4  57                 	db	87	;'W'
   281  00FEB5  61                 	db	97	;'a'
   282  00FEB6  73                 	db	115	;'s'
   283  00FEB7  20                 	db	32
   284  00FEB8  44                 	db	68	;'D'
   285  00FEB9  6F                 	db	111	;'o'
   286  00FEBA  6E                 	db	110	;'n'
   287  00FEBB  65                 	db	101	;'e'
   288  00FEBC  20                 	db	32
   289  00FEBD  42                 	db	66	;'B'
   290  00FEBE  79                 	db	121	;'y'
   291  00FEBF  20                 	db	32
   292  00FEC0  5B                 	db	91	;'['
   293  00FEC1  54                 	db	84	;'T'
   294  00FEC2  61                 	db	97	;'a'
   295  00FEC3  68                 	db	104	;'h'
   296  00FEC4  65                 	db	101	;'e'
   297  00FEC5  72                 	db	114	;'r'
   298  00FEC6  20                 	db	32
   299  00FEC7  41                 	db	65	;'A'
   300  00FEC8  6E                 	db	110	;'n'
   301  00FEC9  61                 	db	97	;'a'
   302  00FECA  79                 	db	121	;'y'
   303  00FECB  61                 	db	97	;'a'
   304  00FECC  5D                 	db	93	;']'
   305  00FECD  20                 	db	32
   306  00FECE  41                 	db	65	;'A'
   307  00FECF  6E                 	db	110	;'n'
   308  00FED0  64                 	db	100	;'d'
   309  00FED1  20                 	db	32
   310  00FED2  5B                 	db	91	;'['
   311  00FED3  41                 	db	65	;'A'
   312  00FED4  64                 	db	100	;'d'
   313  00FED5  61                 	db	97	;'a'
   314  00FED6  6D                 	db	109	;'m'
   315  00FED7  20                 	db	32
   316  00FED8  53                 	db	83	;'S'
   317  00FED9  69                 	db	105	;'i'
   318  00FEDA  6B                 	db	107	;'k'
   319  00FEDB  73                 	db	115	;'s'
   320  00FEDC  69                 	db	105	;'i'
   321  00FEDD  6B                 	db	107	;'k'
   322  00FEDE  5D                 	db	93	;']'
   323  00FEDF  0A                 	db	10
   324  00FEE0  0D                 	db	13
   325  00FEE1  00                 	db	0
   326  00FEE2                     STR_19:
   327                           
   328                           ; BSR set to: 0
   329  00FEE2  0A                 	db	10
   330  00FEE3  0D                 	db	13
   331  00FEE4  54                 	db	84	;'T'
   332  00FEE5  69                 	db	105	;'i'
   333  00FEE6  6D                 	db	109	;'m'
   334  00FEE7  65                 	db	101	;'e'
   335  00FEE8  3A                 	db	58	;':'
   336  00FEE9  20                 	db	32
   337  00FEEA  25                 	db	37
   338  00FEEB  30                 	db	48	;'0'
   339  00FEEC  32                 	db	50	;'2'
   340  00FEED  64                 	db	100	;'d'
   341  00FEEE  3A                 	db	58	;':'
   342  00FEEF  25                 	db	37
   343  00FEF0  30                 	db	48	;'0'
   344  00FEF1  32                 	db	50	;'2'
   345  00FEF2  64                 	db	100	;'d'
   346  00FEF3  3A                 	db	58	;':'
   347  00FEF4  25                 	db	37
   348  00FEF5  30                 	db	48	;'0'
   349  00FEF6  32                 	db	50	;'2'
   350  00FEF7  64                 	db	100	;'d'
   351  00FEF8  0A                 	db	10
   352  00FEF9  0D                 	db	13
   353  00FEFA  3D                 	db	61	;'='
   354  00FEFB  3D                 	db	61	;'='
   355  00FEFC  3D                 	db	61	;'='
   356  00FEFD  3D                 	db	61	;'='
   357  00FEFE  3D                 	db	61	;'='
   358  00FEFF  3D                 	db	61	;'='
   359  00FF00  3D                 	db	61	;'='
   360  00FF01  3D                 	db	61	;'='
   361  00FF02  3D                 	db	61	;'='
   362  00FF03  3D                 	db	61	;'='
   363  00FF04  3D                 	db	61	;'='
   364  00FF05  3D                 	db	61	;'='
   365  00FF06  3D                 	db	61	;'='
   366  00FF07  3D                 	db	61	;'='
   367  00FF08  3D                 	db	61	;'='
   368  00FF09  3D                 	db	61	;'='
   369  00FF0A  3D                 	db	61	;'='
   370  00FF0B  3D                 	db	61	;'='
   371  00FF0C  3D                 	db	61	;'='
   372  00FF0D  0A                 	db	10
   373  00FF0E  0D                 	db	13
   374  00FF0F  00                 	db	0
   375  00FF10                     STR_2:
   376                           
   377                           ; BSR set to: 0
   378  00FF10  31                 	db	49	;'1'
   379  00FF11  20                 	db	32
   380  00FF12  2D                 	db	45
   381  00FF13  20                 	db	32
   382  00FF14  54                 	db	84	;'T'
   383  00FF15  6F                 	db	111	;'o'
   384  00FF16  20                 	db	32
   385  00FF17  56                 	db	86	;'V'
   386  00FF18  69                 	db	105	;'i'
   387  00FF19  65                 	db	101	;'e'
   388  00FF1A  77                 	db	119	;'w'
   389  00FF1B  20                 	db	32
   390  00FF1C  54                 	db	84	;'T'
   391  00FF1D  68                 	db	104	;'h'
   392  00FF1E  65                 	db	101	;'e'
   393  00FF1F  20                 	db	32
   394  00FF20  54                 	db	84	;'T'
   395  00FF21  65                 	db	101	;'e'
   396  00FF22  6D                 	db	109	;'m'
   397  00FF23  70                 	db	112	;'p'
   398  00FF24  65                 	db	101	;'e'
   399  00FF25  72                 	db	114	;'r'
   400  00FF26  61                 	db	97	;'a'
   401  00FF27  74                 	db	116	;'t'
   402  00FF28  75                 	db	117	;'u'
   403  00FF29  72                 	db	114	;'r'
   404  00FF2A  65                 	db	101	;'e'
   405  00FF2B  3A                 	db	58	;':'
   406  00FF2C  20                 	db	32
   407  00FF2D  50                 	db	80	;'P'
   408  00FF2E  72                 	db	114	;'r'
   409  00FF2F  65                 	db	101	;'e'
   410  00FF30  73                 	db	115	;'s'
   411  00FF31  73                 	db	115	;'s'
   412  00FF32  20                 	db	32
   413  00FF33  54                 	db	84	;'T'
   414  00FF34  20                 	db	32
   415  00FF35  0A                 	db	10
   416  00FF36  0D                 	db	13
   417  00FF37  00                 	db	0
   418  00FF38                     STR_20:
   419                           
   420                           ; BSR set to: 0
   421  00FF38  0A                 	db	10
   422  00FF39  0D                 	db	13
   423  00FF3A  54                 	db	84	;'T'
   424  00FF3B  65                 	db	101	;'e'
   425  00FF3C  6D                 	db	109	;'m'
   426  00FF3D  70                 	db	112	;'p'
   427  00FF3E  3A                 	db	58	;':'
   428  00FF3F  20                 	db	32
   429  00FF40  25                 	db	37
   430  00FF41  34                 	db	52	;'4'
   431  00FF42  2E                 	db	46
   432  00FF43  31                 	db	49	;'1'
   433  00FF44  66                 	db	102	;'f'
   434  00FF45  0A                 	db	10
   435  00FF46  0D                 	db	13
   436  00FF47  3D                 	db	61	;'='
   437  00FF48  3D                 	db	61	;'='
   438  00FF49  3D                 	db	61	;'='
   439  00FF4A  3D                 	db	61	;'='
   440  00FF4B  3D                 	db	61	;'='
   441  00FF4C  3D                 	db	61	;'='
   442  00FF4D  3D                 	db	61	;'='
   443  00FF4E  3D                 	db	61	;'='
   444  00FF4F  3D                 	db	61	;'='
   445  00FF50  3D                 	db	61	;'='
   446  00FF51  3D                 	db	61	;'='
   447  00FF52  3D                 	db	61	;'='
   448  00FF53  3D                 	db	61	;'='
   449  00FF54  3D                 	db	61	;'='
   450  00FF55  3D                 	db	61	;'='
   451  00FF56  3D                 	db	61	;'='
   452  00FF57  3D                 	db	61	;'='
   453  00FF58  3D                 	db	61	;'='
   454  00FF59  3D                 	db	61	;'='
   455  00FF5A  0A                 	db	10
   456  00FF5B  0D                 	db	13
   457  00FF5C  00                 	db	0
   458  00FF5D                     STR_3:
   459                           
   460                           ; BSR set to: 0
   461  00FF5D  32                 	db	50	;'2'
   462  00FF5E  20                 	db	32
   463  00FF5F  2D                 	db	45
   464  00FF60  20                 	db	32
   465  00FF61  54                 	db	84	;'T'
   466  00FF62  6F                 	db	111	;'o'
   467  00FF63  20                 	db	32
   468  00FF64  56                 	db	86	;'V'
   469  00FF65  69                 	db	105	;'i'
   470  00FF66  65                 	db	101	;'e'
   471  00FF67  77                 	db	119	;'w'
   472  00FF68  20                 	db	32
   473  00FF69  54                 	db	84	;'T'
   474  00FF6A  68                 	db	104	;'h'
   475  00FF6B  65                 	db	101	;'e'
   476  00FF6C  20                 	db	32
   477  00FF6D  54                 	db	84	;'T'
   478  00FF6E  69                 	db	105	;'i'
   479  00FF6F  6D                 	db	109	;'m'
   480  00FF70  65                 	db	101	;'e'
   481  00FF71  3A                 	db	58	;':'
   482  00FF72  20                 	db	32
   483  00FF73  50                 	db	80	;'P'
   484  00FF74  72                 	db	114	;'r'
   485  00FF75  65                 	db	101	;'e'
   486  00FF76  73                 	db	115	;'s'
   487  00FF77  73                 	db	115	;'s'
   488  00FF78  20                 	db	32
   489  00FF79  52                 	db	82	;'R'
   490  00FF7A  20                 	db	32
   491  00FF7B  0A                 	db	10
   492  00FF7C  0D                 	db	13
   493  00FF7D  00                 	db	0
   494  00FF7E                     STR_18:
   495                           
   496                           ; BSR set to: 0
   497  00FF7E  20                 	db	32
   498  00FF7F  20                 	db	32
   499  00FF80  5B                 	db	91	;'['
   500  00FF81  54                 	db	84	;'T'
   501  00FF82  61                 	db	97	;'a'
   502  00FF83  68                 	db	104	;'h'
   503  00FF84  65                 	db	101	;'e'
   504  00FF85  72                 	db	114	;'r'
   505  00FF86  2C                 	db	44
   506  00FF87  20                 	db	32
   507  00FF88  41                 	db	65	;'A'
   508  00FF89  64                 	db	100	;'d'
   509  00FF8A  61                 	db	97	;'a'
   510  00FF8B  6D                 	db	109	;'m'
   511  00FF8C  5D                 	db	93	;']'
   512  00FF8D  20                 	db	32
   513  00FF8E  20                 	db	32
   514  00FF8F  00                 	db	0
   515  00FF90                     STR_13:
   516                           
   517                           ; BSR set to: 0
   518  00FF90  4E                 	db	78	;'N'
   519  00FF91  6F                 	db	111	;'o'
   520  00FF92  72                 	db	114	;'r'
   521  00FF93  6D                 	db	109	;'m'
   522  00FF94  61                 	db	97	;'a'
   523  00FF95  6C                 	db	108	;'l'
   524  00FF96  20                 	db	32
   525  00FF97  4D                 	db	77	;'M'
   526  00FF98  6F                 	db	111	;'o'
   527  00FF99  64                 	db	100	;'d'
   528  00FF9A  65                 	db	101	;'e'
   529  00FF9B  20                 	db	32
   530  00FF9C  20                 	db	32
   531  00FF9D  20                 	db	32
   532  00FF9E  20                 	db	32
   533  00FF9F  20                 	db	32
   534  00FFA0  00                 	db	0
   535  00FFA1                     STR_14:
   536                           
   537                           ; BSR set to: 0
   538  00FFA1  53                 	db	83	;'S'
   539  00FFA2  65                 	db	101	;'e'
   540  00FFA3  74                 	db	116	;'t'
   541  00FFA4  75                 	db	117	;'u'
   542  00FFA5  70                 	db	112	;'p'
   543  00FFA6  3D                 	db	61	;'='
   544  00FFA7  3E                 	db	62	;'>'
   545  00FFA8  5B                 	db	91	;'['
   546  00FFA9  25                 	db	37
   547  00FFAA  73                 	db	115	;'s'
   548  00FFAB  5D                 	db	93	;']'
   549  00FFAC  20                 	db	32
   550  00FFAD  20                 	db	32
   551  00FFAE  20                 	db	32
   552  00FFAF  00                 	db	0
   553  00FFB0                     STR_5:
   554                           
   555                           ; BSR set to: 0
   556  00FFB0  25                 	db	37
   557  00FFB1  30                 	db	48	;'0'
   558  00FFB2  32                 	db	50	;'2'
   559  00FFB3  64                 	db	100	;'d'
   560  00FFB4  3A                 	db	58	;':'
   561  00FFB5  25                 	db	37
   562  00FFB6  30                 	db	48	;'0'
   563  00FFB7  32                 	db	50	;'2'
   564  00FFB8  64                 	db	100	;'d'
   565  00FFB9  3A                 	db	58	;':'
   566  00FFBA  25                 	db	37
   567  00FFBB  30                 	db	48	;'0'
   568  00FFBC  32                 	db	50	;'2'
   569  00FFBD  64                 	db	100	;'d'
   570  00FFBE  00                 	db	0
   571  00FFBF                     STR_6:
   572                           
   573                           ; BSR set to: 0
   574  00FFBF  54                 	db	84	;'T'
   575  00FFC0  3D                 	db	61	;'='
   576  00FFC1  25                 	db	37
   577  00FFC2  34                 	db	52	;'4'
   578  00FFC3  2E                 	db	46
   579  00FFC4  32                 	db	50	;'2'
   580  00FFC5  66                 	db	102	;'f'
   581  00FFC6  0A                 	db	10
   582  00FFC7  00                 	db	0
   583  00FFC8                     STR_7:
   584                           
   585                           ; BSR set to: 0
   586  00FFC8  5B                 	db	91	;'['
   587  00FFC9  43                 	db	67	;'C'
   588  00FFCA  3A                 	db	58	;':'
   589  00FFCB  25                 	db	37
   590  00FFCC  73                 	db	115	;'s'
   591  00FFCD  5D                 	db	93	;']'
   592  00FFCE  20                 	db	32
   593  00FFCF  20                 	db	32
   594  00FFD0  00                 	db	0
   595  00FFD1                     STR_10:
   596                           
   597                           ; BSR set to: 0
   598  00FFD1  5B                 	db	91	;'['
   599  00FFD2  48                 	db	72	;'H'
   600  00FFD3  3A                 	db	58	;':'
   601  00FFD4  25                 	db	37
   602  00FFD5  73                 	db	115	;'s'
   603  00FFD6  5D                 	db	93	;']'
   604  00FFD7  20                 	db	32
   605  00FFD8  20                 	db	32
   606  00FFD9  00                 	db	0
   607  00FFDA                     STR_15:
   608                           
   609                           ; BSR set to: 0
   610  00FFDA  53                 	db	83	;'S'
   611  00FFDB  65                 	db	101	;'e'
   612  00FFDC  63                 	db	99	;'c'
   613  00FFDD  6F                 	db	111	;'o'
   614  00FFDE  6E                 	db	110	;'n'
   615  00FFDF  64                 	db	100	;'d'
   616  00FFE0  73                 	db	115	;'s'
   617  00FFE1  00                 	db	0
   618  00FFE2                     STR_16:
   619                           
   620                           ; BSR set to: 0
   621  00FFE2  4D                 	db	77	;'M'
   622  00FFE3  69                 	db	105	;'i'
   623  00FFE4  6E                 	db	110	;'n'
   624  00FFE5  75                 	db	117	;'u'
   625  00FFE6  74                 	db	116	;'t'
   626  00FFE7  65                 	db	101	;'e'
   627  00FFE8  73                 	db	115	;'s'
   628  00FFE9  00                 	db	0
   629  00FFEA                     STR_21:
   630                           
   631                           ; BSR set to: 0
   632  00FFEA  28                 	db	40
   633  00FFEB  6E                 	db	110	;'n'
   634  00FFEC  75                 	db	117	;'u'
   635  00FFED  6C                 	db	108	;'l'
   636  00FFEE  6C                 	db	108	;'l'
   637  00FFEF  29                 	db	41
   638  00FFF0  00                 	db	0
   639  00FFF1                     STR_17:
   640                           
   641                           ; BSR set to: 0
   642  00FFF1  48                 	db	72	;'H'
   643  00FFF2  6F                 	db	111	;'o'
   644  00FFF3  75                 	db	117	;'u'
   645  00FFF4  72                 	db	114	;'r'
   646  00FFF5  73                 	db	115	;'s'
   647  00FFF6  00                 	db	0
   648  00FFF7                     STR_9:
   649                           
   650                           ; BSR set to: 0
   651  00FFF7  4F                 	db	79	;'O'
   652  00FFF8  46                 	db	70	;'F'
   653  00FFF9  46                 	db	70	;'F'
   654  00FFFA  00                 	db	0
   655  00FFFB                     STR_8:
   656                           
   657                           ; BSR set to: 0
   658  00FFFB  4F                 	db	79	;'O'
   659  00FFFC  4E                 	db	78	;'N'
   660  00FFFD  00                 	db	0
   661  0000                     
   662                           ; #config settings
   663  00FFFE  00                 	db	0	; dummy byte at the end
   664  0000                     
   665                           	psect	nvBANK0
   666  0000F6                     __pnvBANK0:
   667                           	opt stack 0
   668  0000F6                     _clkMode:
   669                           	opt stack 0
   670  0000F6                     	ds	2
   671  0000                     _PORTBbits	set	3969
   672  0000                     _RCONbits	set	4048
   673  0000                     _PORTCbits	set	3970
   674  0000                     _TRISCbits	set	3988
   675  0000                     _INTCON2bits	set	4081
   676  0000                     _INTCON3	set	4080
   677  0000                     _INTCON2	set	4081
   678  0000                     _TMR1L	set	4046
   679  0000                     _TMR1H	set	4047
   680  0000                     _T1CONbits	set	4045
   681  0000                     _T0CONbits	set	4053
   682  0000                     _T0CON	set	4053
   683  0000                     _RCSTA	set	4011
   684  0000                     _SPBRG	set	4015
   685  0000                     _TXSTA	set	4012
   686  0000                     _BAUDCONbits	set	4024
   687  0000                     _PIE1	set	3997
   688  0000                     _PORTD	set	3971
   689  0000                     _TRISE	set	3990
   690  0000                     _TRISD	set	3989
   691  0000                     _TRISC	set	3988
   692  0000                     _TRISB	set	3987
   693  0000                     _TRISA	set	3986
   694  0000                     _ADCON1	set	4033
   695  0000                     _PORTEbits	set	3972
   696  0000                     _ADRESL	set	4035
   697  0000                     _ADRESH	set	4036
   698  0000                     _ADCON2	set	4032
   699  0000                     _ADCON0bits	set	4034
   700  0000                     _ADCON0	set	4034
   701  0000                     _TXREG	set	4013
   702  0000                     _TXSTAbits	set	4012
   703  0000                     _RCREG	set	4014
   704  0000                     _PIR1bits	set	3998
   705  0000                     _RCSTAbits	set	4011
   706  0000                     _INTCON3bits	set	4080
   707  0000                     _INTCONbits	set	4082
   708  0000                     _TMR0L	set	4054
   709  0000                     _TMR0H	set	4055
   710                           
   711                           	psect	cinit
   712  002F3E                     __pcinit:
   713                           	opt stack 0
   714  002F3E                     start_initialization:
   715                           	opt stack 0
   716  002F3E                     __initialization:
   717                           	opt stack 0
   718                           
   719                           ; Initialize objects allocated to COMRAM (6 bytes)
   720                           ; load TBLPTR registers with __pidataCOMRAM
   721  002F3E  0E50               	movlw	low __pidataCOMRAM
   722  002F40  6EF6               	movwf	tblptrl,c
   723  002F42  0E31               	movlw	high __pidataCOMRAM
   724  002F44  6EF7               	movwf	tblptrh,c
   725  002F46  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   726  002F48  6EF8               	movwf	tblptru,c
   727  002F4A  EE00  F065         	lfsr	0,__pdataCOMRAM
   728  002F4E  EE10 F006          	lfsr	1,6
   729  002F52                     copy_data0:
   730  002F52  0009               	tblrd		*+
   731  002F54  CFF5 FFEE          	movff	tablat,postinc0
   732  002F58  50E5               	movf	postdec1,w,c
   733  002F5A  50E1               	movf	fsr1l,w,c
   734  002F5C  E1FA               	bnz	copy_data0
   735                           
   736                           ; Clear objects allocated to BANK0 (8 bytes)
   737  002F5E  EE00  F0EE         	lfsr	0,__pbssBANK0
   738  002F62  0E08               	movlw	8
   739  002F64                     clear_0:
   740  002F64  6AEE               	clrf	postinc0,c
   741  002F66  06E8               	decf	wreg,f,c
   742  002F68  E1FD               	bnz	clear_0
   743  002F6A                     end_of_initialization:
   744                           	opt stack 0
   745  002F6A                     __end_of__initialization:
   746                           	opt stack 0
   747  002F6A  906B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   748  002F6C  926B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   749  002F6E  0100               	movlb	0
   750  002F70  EF15  F006         	goto	_main	;jump to C main() function
   751                           tblptru	equ	0xFF8
   752                           tblptrh	equ	0xFF7
   753                           tblptrl	equ	0xFF6
   754                           tablat	equ	0xFF5
   755                           postinc0	equ	0xFEE
   756                           wreg	equ	0xFE8
   757                           postdec1	equ	0xFE5
   758                           fsr1l	equ	0xFE1
   759                           
   760                           	psect	dataCOMRAM
   761  000065                     __pdataCOMRAM:
   762                           	opt stack 0
   763  000065                     _LCD_INIT_STRING:
   764                           	opt stack 0
   765  000065                     	ds	4
   766  000069                     _initial:
   767                           	opt stack 0
   768  000069                     	ds	2
   769                           tblptru	equ	0xFF8
   770                           tblptrh	equ	0xFF7
   771                           tblptrl	equ	0xFF6
   772                           tablat	equ	0xFF5
   773                           postinc0	equ	0xFEE
   774                           wreg	equ	0xFE8
   775                           postdec1	equ	0xFE5
   776                           fsr1l	equ	0xFE1
   777                           
   778                           	psect	bssBANK0
   779  0000EE                     __pbssBANK0:
   780                           	opt stack 0
   781  0000EE                     _stpMode:
   782                           	opt stack 0
   783  0000EE                     	ds	2
   784  0000F0                     _hours:
   785                           	opt stack 0
   786  0000F0                     	ds	2
   787  0000F2                     _minutes:
   788                           	opt stack 0
   789  0000F2                     	ds	2
   790  0000F4                     _seconds:
   791                           	opt stack 0
   792  0000F4                     	ds	2
   793                           tblptru	equ	0xFF8
   794                           tblptrh	equ	0xFF7
   795                           tblptrl	equ	0xFF6
   796                           tablat	equ	0xFF5
   797                           postinc0	equ	0xFEE
   798                           wreg	equ	0xFE8
   799                           postdec1	equ	0xFE5
   800                           fsr1l	equ	0xFE1
   801                           
   802                           	psect	cstackBANK0
   803  000080                     __pcstackBANK0:
   804                           	opt stack 0
   805  000080                     ?_sprintf:
   806                           	opt stack 0
   807  000080                     sprintf@sp:
   808                           	opt stack 0
   809                           
   810                           ; 2 bytes @ 0x0
   811  000080                     	ds	2
   812  000082                     sprintf@f:
   813                           	opt stack 0
   814                           
   815                           ; 2 bytes @ 0x2
   816  000082                     	ds	8
   817  00008A                     ??_sprintf:
   818                           
   819                           ; 1 bytes @ 0xA
   820  00008A                     	ds	4
   821  00008E                     _sprintf$1785:
   822                           	opt stack 0
   823                           
   824                           ; 4 bytes @ 0xE
   825  00008E                     	ds	4
   826  000092                     sprintf@cp:
   827                           	opt stack 0
   828                           
   829                           ; 2 bytes @ 0x12
   830  000092                     	ds	2
   831  000094                     sprintf@ap:
   832                           	opt stack 0
   833                           
   834                           ; 2 bytes @ 0x14
   835  000094                     	ds	2
   836  000096                     sprintf@len:
   837                           	opt stack 0
   838                           
   839                           ; 2 bytes @ 0x16
   840  000096                     	ds	2
   841  000098                     sprintf@tmpval:
   842                           	opt stack 0
   843                           
   844                           ; 4 bytes @ 0x18
   845  000098                     	ds	4
   846  00009C                     sprintf@val:
   847                           	opt stack 0
   848                           
   849                           ; 4 bytes @ 0x1C
   850  00009C                     	ds	4
   851  0000A0                     sprintf@exp:
   852                           	opt stack 0
   853                           
   854                           ; 2 bytes @ 0x20
   855  0000A0                     	ds	2
   856  0000A2                     sprintf@flag:
   857                           	opt stack 0
   858                           
   859                           ; 2 bytes @ 0x22
   860  0000A2                     	ds	2
   861  0000A4                     sprintf@fval:
   862                           	opt stack 0
   863                           
   864                           ; 4 bytes @ 0x24
   865  0000A4                     	ds	4
   866  0000A8                     sprintf@width:
   867                           	opt stack 0
   868                           
   869                           ; 2 bytes @ 0x28
   870  0000A8                     	ds	2
   871  0000AA                     sprintf@prec:
   872                           	opt stack 0
   873                           
   874                           ; 2 bytes @ 0x2A
   875  0000AA                     	ds	2
   876  0000AC                     sprintf@c:
   877                           	opt stack 0
   878                           
   879                           ; 1 bytes @ 0x2C
   880  0000AC                     	ds	1
   881  0000AD                     ??_main:
   882                           
   883                           ; 1 bytes @ 0x2D
   884  0000AD                     	ds	1
   885  0000AE                     main@Buffer:
   886                           	opt stack 0
   887                           
   888                           ; 32 bytes @ 0x2E
   889  0000AE                     	ds	32
   890  0000CE                     main@command:
   891                           	opt stack 0
   892                           
   893                           ; 9 bytes @ 0x4E
   894  0000CE                     	ds	9
   895  0000D7                     _main$1105:
   896                           	opt stack 0
   897                           
   898                           ; 2 bytes @ 0x57
   899  0000D7                     	ds	2
   900  0000D9                     _main$1110:
   901                           	opt stack 0
   902                           
   903                           ; 2 bytes @ 0x59
   904  0000D9                     	ds	2
   905  0000DB                     _main$1118:
   906                           	opt stack 0
   907                           
   908                           ; 2 bytes @ 0x5B
   909  0000DB                     	ds	2
   910  0000DD                     _main$1119:
   911                           	opt stack 0
   912                           
   913                           ; 2 bytes @ 0x5D
   914  0000DD                     	ds	2
   915  0000DF                     main@voltage:
   916                           	opt stack 0
   917                           
   918                           ; 4 bytes @ 0x5F
   919  0000DF                     	ds	4
   920  0000E3                     main@isRB4Release:
   921                           	opt stack 0
   922                           
   923                           ; 2 bytes @ 0x63
   924  0000E3                     	ds	2
   925  0000E5                     main@isRB5Release:
   926                           	opt stack 0
   927                           
   928                           ; 2 bytes @ 0x65
   929  0000E5                     	ds	2
   930  0000E7                     main@t:
   931                           	opt stack 0
   932                           
   933                           ; 4 bytes @ 0x67
   934  0000E7                     	ds	4
   935  0000EB                     main@i:
   936                           	opt stack 0
   937                           
   938                           ; 2 bytes @ 0x6B
   939  0000EB                     	ds	2
   940  0000ED                     main@RecvedChar:
   941                           	opt stack 0
   942                           
   943                           ; 1 bytes @ 0x6D
   944  0000ED                     	ds	1
   945                           tblptru	equ	0xFF8
   946                           tblptrh	equ	0xFF7
   947                           tblptrl	equ	0xFF6
   948                           tablat	equ	0xFF5
   949                           postinc0	equ	0xFEE
   950                           wreg	equ	0xFE8
   951                           postdec1	equ	0xFE5
   952                           fsr1l	equ	0xFE1
   953                           
   954                           	psect	cstackCOMRAM
   955  000001                     __pcstackCOMRAM:
   956                           	opt stack 0
   957  000001                     ??_changeClockMode:
   958  000001                     
   959                           ; 1 bytes @ 0x0
   960  000001                     	ds	2
   961  000003                     ??_highIsr:
   962                           
   963                           ; 1 bytes @ 0x2
   964  000003                     	ds	18
   965  000015                     ??_isdigit:
   966  000015                     ??_delay_cycles:
   967  000015                     ?_read_adc_raw_no_lib:
   968                           	opt stack 0
   969  000015                     ?___wmul:
   970                           	opt stack 0
   971  000015                     ?___awmod:
   972                           	opt stack 0
   973  000015                     ?__tdiv_to_l_:
   974                           	opt stack 0
   975  000015                     ?__div_to_l_:
   976                           	opt stack 0
   977  000015                     ?___flneg:
   978                           	opt stack 0
   979  000015                     ?___lldiv:
   980                           	opt stack 0
   981  000015                     read_byte_no_lib@c:
   982                           	opt stack 0
   983  000015                     send_byte_no_lib@c:
   984                           	opt stack 0
   985  000015                     init@dummy:
   986                           	opt stack 0
   987  000015                     isValidChar@command:
   988                           	opt stack 0
   989  000015                     delay_ms@n:
   990                           	opt stack 0
   991  000015                     ___wmul@multiplier:
   992                           	opt stack 0
   993  000015                     ___awmod@dividend:
   994                           	opt stack 0
   995  000015                     __div_to_l_@f1:
   996                           	opt stack 0
   997  000015                     ___flge@ff1:
   998                           	opt stack 0
   999  000015                     ___flneg@f1:
  1000                           	opt stack 0
  1001  000015                     __tdiv_to_l_@f1:
  1002                           	opt stack 0
  1003  000015                     ___lldiv@dividend:
  1004                           	opt stack 0
  1005                           
  1006                           ; 4 bytes @ 0x14
  1007  000015                     	ds	1
  1008  000016                     _isdigit$1408:
  1009                           	opt stack 0
  1010  000016                     send_string_no_lib@p:
  1011                           	opt stack 0
  1012                           
  1013                           ; 2 bytes @ 0x15
  1014  000016                     	ds	1
  1015  000017                     ??_read_adc_raw_no_lib:
  1016  000017                     isValidChar@c:
  1017                           	opt stack 0
  1018  000017                     isdigit@c:
  1019                           	opt stack 0
  1020  000017                     delay_ms@i:
  1021                           	opt stack 0
  1022  000017                     ___wmul@multiplicand:
  1023                           	opt stack 0
  1024  000017                     ___awmod@divisor:
  1025                           	opt stack 0
  1026                           
  1027                           ; 2 bytes @ 0x16
  1028  000017                     	ds	1
  1029  000018                     delay_cycles@n:
  1030                           	opt stack 0
  1031  000018                     isValidChar@i:
  1032                           	opt stack 0
  1033                           
  1034                           ; 2 bytes @ 0x17
  1035  000018                     	ds	1
  1036  000019                     ___awmod@counter:
  1037                           	opt stack 0
  1038  000019                     read_adc_raw_no_lib@raw_value:
  1039                           	opt stack 0
  1040  000019                     delay_cycles@x:
  1041                           	opt stack 0
  1042  000019                     ___wmul@product:
  1043                           	opt stack 0
  1044  000019                     __div_to_l_@f2:
  1045                           	opt stack 0
  1046  000019                     ___flge@ff2:
  1047                           	opt stack 0
  1048  000019                     __tdiv_to_l_@f2:
  1049                           	opt stack 0
  1050  000019                     ___lldiv@divisor:
  1051                           	opt stack 0
  1052                           
  1053                           ; 4 bytes @ 0x18
  1054  000019                     	ds	1
  1055  00001A                     ??_isValidChar:
  1056  00001A                     ___awmod@sign:
  1057                           	opt stack 0
  1058                           
  1059                           ; 1 bytes @ 0x19
  1060  00001A                     	ds	1
  1061  00001B                     ??_lcd_send_nibble:
  1062  00001B                     ?___awdiv:
  1063                           	opt stack 0
  1064  00001B                     ?___xxtofl:
  1065                           	opt stack 0
  1066  00001B                     read_adc_raw_no_lib@channel:
  1067                           	opt stack 0
  1068  00001B                     _isValidChar$897:
  1069                           	opt stack 0
  1070  00001B                     ___awdiv@dividend:
  1071                           	opt stack 0
  1072  00001B                     ___xxtofl@val:
  1073                           	opt stack 0
  1074                           
  1075                           ; 4 bytes @ 0x1A
  1076  00001B                     	ds	1
  1077  00001C                     lcd_send_nibble@n:
  1078                           	opt stack 0
  1079                           
  1080                           ; 1 bytes @ 0x1B
  1081  00001C                     	ds	1
  1082  00001D                     ??__tdiv_to_l_:
  1083  00001D                     ??___flge:
  1084  00001D                     _isValidChar$895:
  1085                           	opt stack 0
  1086  00001D                     lcd_send_byte@n:
  1087                           	opt stack 0
  1088  00001D                     ___awdiv@divisor:
  1089                           	opt stack 0
  1090  00001D                     __div_to_l_@quot:
  1091                           	opt stack 0
  1092  00001D                     ___lldiv@quotient:
  1093                           	opt stack 0
  1094                           
  1095                           ; 4 bytes @ 0x1C
  1096  00001D                     	ds	1
  1097  00001E                     _isValidChar$896:
  1098                           	opt stack 0
  1099  00001E                     lcd_send_byte@cm_data:
  1100                           	opt stack 0
  1101                           
  1102                           ; 1 bytes @ 0x1D
  1103  00001E                     	ds	1
  1104  00001F                     ??___xxtofl:
  1105  00001F                     _isValidChar$898:
  1106                           	opt stack 0
  1107  00001F                     lcd_init@i:
  1108                           	opt stack 0
  1109  00001F                     lcd_gotoxy@y:
  1110                           	opt stack 0
  1111  00001F                     ___awdiv@counter:
  1112                           	opt stack 0
  1113                           
  1114                           ; 1 bytes @ 0x1E
  1115  00001F                     	ds	1
  1116  000020                     _isValidChar$899:
  1117                           	opt stack 0
  1118  000020                     lcd_gotoxy@x:
  1119                           	opt stack 0
  1120  000020                     ___awdiv@sign:
  1121                           	opt stack 0
  1122  000020                     __tdiv_to_l_@quot:
  1123                           	opt stack 0
  1124                           
  1125                           ; 4 bytes @ 0x1F
  1126  000020                     	ds	1
  1127  000021                     _isValidChar$900:
  1128                           	opt stack 0
  1129  000021                     lcd_gotoxy@address:
  1130                           	opt stack 0
  1131  000021                     __div_to_l_@cntr:
  1132                           	opt stack 0
  1133  000021                     ___lldiv@counter:
  1134                           	opt stack 0
  1135  000021                     ___awdiv@quotient:
  1136                           	opt stack 0
  1137                           
  1138                           ; 2 bytes @ 0x20
  1139  000021                     	ds	1
  1140  000022                     ?___llmod:
  1141                           	opt stack 0
  1142  000022                     _isValidChar$901:
  1143                           	opt stack 0
  1144  000022                     lcd_putc@c:
  1145                           	opt stack 0
  1146  000022                     __div_to_l_@exp1:
  1147                           	opt stack 0
  1148  000022                     ___llmod@dividend:
  1149                           	opt stack 0
  1150                           
  1151                           ; 4 bytes @ 0x21
  1152  000022                     	ds	1
  1153  000023                     ?___flmul:
  1154                           	opt stack 0
  1155  000023                     ___xxtofl@sign:
  1156                           	opt stack 0
  1157  000023                     lcd_puts@s:
  1158                           	opt stack 0
  1159  000023                     ___flmul@b:
  1160                           	opt stack 0
  1161                           
  1162                           ; 4 bytes @ 0x22
  1163  000023                     	ds	1
  1164  000024                     __tdiv_to_l_@cntr:
  1165                           	opt stack 0
  1166  000024                     ___xxtofl@exp:
  1167                           	opt stack 0
  1168                           
  1169                           ; 1 bytes @ 0x23
  1170  000024                     	ds	1
  1171  000025                     __tdiv_to_l_@exp1:
  1172                           	opt stack 0
  1173  000025                     ___xxtofl@arg:
  1174                           	opt stack 0
  1175                           
  1176                           ; 4 bytes @ 0x24
  1177  000025                     	ds	1
  1178  000026                     ___llmod@divisor:
  1179                           	opt stack 0
  1180                           
  1181                           ; 4 bytes @ 0x25
  1182  000026                     	ds	1
  1183  000027                     ___flmul@a:
  1184                           	opt stack 0
  1185                           
  1186                           ; 4 bytes @ 0x26
  1187  000027                     	ds	2
  1188  000029                     ?___fldiv:
  1189                           	opt stack 0
  1190  000029                     ___fldiv@b:
  1191                           	opt stack 0
  1192                           
  1193                           ; 4 bytes @ 0x28
  1194  000029                     	ds	1
  1195  00002A                     ___llmod@counter:
  1196                           	opt stack 0
  1197                           
  1198                           ; 1 bytes @ 0x29
  1199  00002A                     	ds	1
  1200  00002B                     ??___flmul:
  1201                           
  1202                           ; 1 bytes @ 0x2A
  1203  00002B                     	ds	2
  1204  00002D                     ___fldiv@a:
  1205                           	opt stack 0
  1206                           
  1207                           ; 4 bytes @ 0x2C
  1208  00002D                     	ds	2
  1209  00002F                     ___flmul@sign:
  1210                           	opt stack 0
  1211                           
  1212                           ; 1 bytes @ 0x2E
  1213  00002F                     	ds	1
  1214  000030                     ___flmul@grs:
  1215                           	opt stack 0
  1216                           
  1217                           ; 4 bytes @ 0x2F
  1218  000030                     	ds	1
  1219  000031                     ??___fldiv:
  1220                           
  1221                           ; 1 bytes @ 0x30
  1222  000031                     	ds	3
  1223  000034                     ___flmul@aexp:
  1224                           	opt stack 0
  1225                           
  1226                           ; 1 bytes @ 0x33
  1227  000034                     	ds	1
  1228  000035                     ___fldiv@sign:
  1229                           	opt stack 0
  1230  000035                     ___flmul@bexp:
  1231                           	opt stack 0
  1232                           
  1233                           ; 1 bytes @ 0x34
  1234  000035                     	ds	1
  1235  000036                     ___fldiv@rem:
  1236                           	opt stack 0
  1237  000036                     ___flmul@prod:
  1238                           	opt stack 0
  1239                           
  1240                           ; 4 bytes @ 0x35
  1241  000036                     	ds	4
  1242  00003A                     ___fldiv@new_exp:
  1243                           	opt stack 0
  1244  00003A                     ___flmul@temp:
  1245                           	opt stack 0
  1246                           
  1247                           ; 2 bytes @ 0x39
  1248  00003A                     	ds	2
  1249  00003C                     ?_fround:
  1250                           	opt stack 0
  1251  00003C                     ?_scale:
  1252                           	opt stack 0
  1253  00003C                     ___fldiv@grs:
  1254                           	opt stack 0
  1255                           
  1256                           ; 4 bytes @ 0x3B
  1257  00003C                     	ds	4
  1258  000040                     ___fldiv@bexp:
  1259                           	opt stack 0
  1260  000040                     _fround$1783:
  1261                           	opt stack 0
  1262  000040                     _scale$1784:
  1263                           	opt stack 0
  1264                           
  1265                           ; 4 bytes @ 0x3F
  1266  000040                     	ds	1
  1267  000041                     ___fldiv@aexp:
  1268                           	opt stack 0
  1269                           
  1270                           ; 1 bytes @ 0x40
  1271  000041                     	ds	1
  1272  000042                     ?_read_adc_voltage:
  1273                           	opt stack 0
  1274                           
  1275                           ; 4 bytes @ 0x41
  1276  000042                     	ds	2
  1277  000044                     scale@scl:
  1278                           	opt stack 0
  1279  000044                     _fround$1782:
  1280                           	opt stack 0
  1281                           
  1282                           ; 4 bytes @ 0x43
  1283  000044                     	ds	1
  1284  000045                     ?___fltol:
  1285                           	opt stack 0
  1286  000045                     ___fltol@f1:
  1287                           	opt stack 0
  1288                           
  1289                           ; 4 bytes @ 0x44
  1290  000045                     	ds	1
  1291  000046                     read_adc_voltage@voltage:
  1292                           	opt stack 0
  1293                           
  1294                           ; 4 bytes @ 0x45
  1295  000046                     	ds	2
  1296  000048                     fround@prec:
  1297                           	opt stack 0
  1298                           
  1299                           ; 1 bytes @ 0x47
  1300  000048                     	ds	1
  1301  000049                     ??___fltol:
  1302  000049                     ?___fladd:
  1303                           	opt stack 0
  1304  000049                     ___fladd@b:
  1305                           	opt stack 0
  1306                           
  1307                           ; 4 bytes @ 0x48
  1308  000049                     	ds	1
  1309  00004A                     read_adc_voltage@raw_value:
  1310                           	opt stack 0
  1311                           
  1312                           ; 2 bytes @ 0x49
  1313  00004A                     	ds	2
  1314  00004C                     read_adc_voltage@channel:
  1315                           	opt stack 0
  1316                           
  1317                           ; 1 bytes @ 0x4B
  1318  00004C                     	ds	1
  1319  00004D                     ___fltol@sign1:
  1320                           	opt stack 0
  1321  00004D                     ___fladd@a:
  1322                           	opt stack 0
  1323                           
  1324                           ; 4 bytes @ 0x4C
  1325  00004D                     	ds	1
  1326  00004E                     ___fltol@exp1:
  1327                           	opt stack 0
  1328                           
  1329                           ; 1 bytes @ 0x4D
  1330  00004E                     	ds	3
  1331  000051                     ??___fladd:
  1332                           
  1333                           ; 1 bytes @ 0x50
  1334  000051                     	ds	8
  1335  000059                     ___fladd@signs:
  1336                           	opt stack 0
  1337                           
  1338                           ; 1 bytes @ 0x58
  1339  000059                     	ds	1
  1340  00005A                     ___fladd@aexp:
  1341                           	opt stack 0
  1342                           
  1343                           ; 1 bytes @ 0x59
  1344  00005A                     	ds	1
  1345  00005B                     ___fladd@bexp:
  1346                           	opt stack 0
  1347                           
  1348                           ; 1 bytes @ 0x5A
  1349  00005B                     	ds	1
  1350  00005C                     ___fladd@grs:
  1351                           	opt stack 0
  1352                           
  1353                           ; 1 bytes @ 0x5B
  1354  00005C                     	ds	1
  1355  00005D                     ?___flsub:
  1356                           	opt stack 0
  1357  00005D                     ___flsub@b:
  1358                           	opt stack 0
  1359                           
  1360                           ; 4 bytes @ 0x5C
  1361  00005D                     	ds	4
  1362  000061                     ___flsub@a:
  1363                           	opt stack 0
  1364                           
  1365                           ; 4 bytes @ 0x60
  1366  000061                     	ds	4
  1367  000065                     tblptru	equ	0xFF8
  1368                           tblptrh	equ	0xFF7
  1369                           tblptrl	equ	0xFF6
  1370                           tablat	equ	0xFF5
  1371                           postinc0	equ	0xFEE
  1372                           wreg	equ	0xFE8
  1373                           postdec1	equ	0xFE5
  1374                           fsr1l	equ	0xFE1
  1375                           
  1376                           ; 1 bytes @ 0x64
  1377 ;;
  1378 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1379 ;;
  1380 ;; *************** function _main *****************
  1381 ;; Defined at:
  1382 ;;		line 376 in file "Main.c"
  1383 ;; Parameters:    Size  Location     Type
  1384 ;;		None
  1385 ;; Auto vars:     Size  Location     Type
  1386 ;;  Buffer         32   46[BANK0 ] unsigned char [32]
  1387 ;;  command         9   78[BANK0 ] unsigned char [9]
  1388 ;;  t               4  103[BANK0 ] float 
  1389 ;;  voltage         4   95[BANK0 ] float 
  1390 ;;  i               2  107[BANK0 ] int 
  1391 ;;  isRB5Release    2  101[BANK0 ] short 
  1392 ;;  isRB4Release    2   99[BANK0 ] short 
  1393 ;;  RecvedChar      1  109[BANK0 ] unsigned char 
  1394 ;; Return value:  Size  Location     Type
  1395 ;;                  1    wreg      void 
  1396 ;; Registers used:
  1397 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1398 ;; Tracked objects:
  1399 ;;		On entry : 0/0
  1400 ;;		On exit  : 0/0
  1401 ;;		Unchanged: 0/0
  1402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1404 ;;      Locals:         0      64       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1405 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1406 ;;      Totals:         0      65       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1407 ;;Total ram usage:       65 bytes
  1408 ;; Hardware stack levels required when called:    9
  1409 ;; This function calls:
  1410 ;;		___flmul
  1411 ;;		___wmul
  1412 ;;		_decrementClock
  1413 ;;		_delay_ms
  1414 ;;		_incrementClock
  1415 ;;		_init
  1416 ;;		_init_adc_no_lib
  1417 ;;		_isValidChar
  1418 ;;		_is_byte_available
  1419 ;;		_lcd_gotoxy
  1420 ;;		_lcd_init
  1421 ;;		_lcd_putc
  1422 ;;		_lcd_puts
  1423 ;;		_read_adc_voltage
  1424 ;;		_read_byte_no_lib
  1425 ;;		_send_string_no_lib
  1426 ;;		_sprintf
  1427 ;; This function is called by:
  1428 ;;		Startup code after reset
  1429 ;; This function uses a non-reentrant model
  1430 ;;
  1431                           
  1432                           	psect	text0
  1433  000C2A                     __ptext0:
  1434                           	opt stack 0
  1435  000C2A                     _main:
  1436                           	opt stack 22
  1437                           
  1438                           ;Main.c: 378: init();
  1439                           
  1440                           ;incstack = 0
  1441  000C2A  EC91  F014         	call	_init	;wreg free
  1442                           
  1443                           ;Main.c: 380: unsigned char RecvedChar = 0;
  1444  000C2E  0E00               	movlw	0
  1445  000C30  0100               	movlb	0	; () banked
  1446  000C32  6FED               	movwf	main@RecvedChar& (0+255),b
  1447                           
  1448                           ; BSR set to: 0
  1449                           ;Main.c: 381: char Buffer[32];
  1450                           ;Main.c: 382: char command[9];
  1451                           ;Main.c: 383: int i = 0;
  1452  000C34  0E00               	movlw	0
  1453  000C36  6FEC               	movwf	(main@i+1)& (0+255),b
  1454  000C38  0E00               	movlw	0
  1455  000C3A  6FEB               	movwf	main@i& (0+255),b
  1456                           
  1457                           ; BSR set to: 0
  1458                           ;Main.c: 384: short isRB4Release = 1;
  1459  000C3C  0E00               	movlw	0
  1460  000C3E  6FE4               	movwf	(main@isRB4Release+1)& (0+255),b
  1461  000C40  0E01               	movlw	1
  1462  000C42  6FE3               	movwf	main@isRB4Release& (0+255),b
  1463                           
  1464                           ; BSR set to: 0
  1465                           ;Main.c: 385: short isRB5Release = 1;
  1466  000C44  0E00               	movlw	0
  1467  000C46  6FE6               	movwf	(main@isRB5Release+1)& (0+255),b
  1468  000C48  0E01               	movlw	1
  1469  000C4A  6FE5               	movwf	main@isRB5Release& (0+255),b
  1470                           
  1471                           ; BSR set to: 0
  1472                           ;Main.c: 386: float voltage;
  1473                           ;Main.c: 387: float t;
  1474                           ;Main.c: 389: lcd_init();
  1475  000C4C  EC95  F016         	call	_lcd_init	;wreg free
  1476                           
  1477                           ;Main.c: 390: init_adc_no_lib();
  1478  000C50  EC94  F018         	call	_init_adc_no_lib	;wreg free
  1479                           
  1480                           ;Main.c: 391: lcd_putc('\f');
  1481  000C54  0E0C               	movlw	12
  1482  000C56  ECC6  F016         	call	_lcd_putc
  1483                           
  1484                           ;Main.c: 393: sprintf(Buffer, "This Work Was Done By [Taher Anaya] And [Adam Siksik]\n\r
      +                          ");
  1485  000C5A  0EAE               	movlw	low main@Buffer
  1486  000C5C  0100               	movlb	0	; () banked
  1487  000C5E  6F80               	movwf	sprintf@sp& (0+255),b
  1488  000C60  0E00               	movlw	high main@Buffer
  1489  000C62  6F81               	movwf	(sprintf@sp+1)& (0+255),b
  1490  000C64  0EAA               	movlw	low STR_1
  1491  000C66  6F82               	movwf	sprintf@f& (0+255),b
  1492  000C68  0EFE               	movlw	high STR_1
  1493  000C6A  6F83               	movwf	(sprintf@f+1)& (0+255),b
  1494  000C6C  EC09  F000         	call	_sprintf	;wreg free
  1495                           
  1496                           ;Main.c: 394: send_string_no_lib(Buffer);
  1497  000C70  0EAE               	movlw	low main@Buffer
  1498  000C72  6E16               	movwf	send_string_no_lib@p,c
  1499  000C74  0E00               	movlw	high main@Buffer
  1500  000C76  6E17               	movwf	send_string_no_lib@p+1,c
  1501  000C78  EC3C  F018         	call	_send_string_no_lib	;wreg free
  1502                           
  1503                           ;Main.c: 395: sprintf(Buffer, "1 - To View The Temperature: Press T \n\r");
  1504  000C7C  0EAE               	movlw	low main@Buffer
  1505  000C7E  0100               	movlb	0	; () banked
  1506  000C80  6F80               	movwf	sprintf@sp& (0+255),b
  1507  000C82  0E00               	movlw	high main@Buffer
  1508  000C84  6F81               	movwf	(sprintf@sp+1)& (0+255),b
  1509  000C86  0E10               	movlw	low STR_2
  1510  000C88  6F82               	movwf	sprintf@f& (0+255),b
  1511  000C8A  0EFF               	movlw	high STR_2
  1512  000C8C  6F83               	movwf	(sprintf@f+1)& (0+255),b
  1513  000C8E  EC09  F000         	call	_sprintf	;wreg free
  1514                           
  1515                           ;Main.c: 396: send_string_no_lib(Buffer);
  1516  000C92  0EAE               	movlw	low main@Buffer
  1517  000C94  6E16               	movwf	send_string_no_lib@p,c
  1518  000C96  0E00               	movlw	high main@Buffer
  1519  000C98  6E17               	movwf	send_string_no_lib@p+1,c
  1520  000C9A  EC3C  F018         	call	_send_string_no_lib	;wreg free
  1521                           
  1522                           ;Main.c: 397: sprintf(Buffer, "2 - To View The Time: Press R \n\r");
  1523  000C9E  0EAE               	movlw	low main@Buffer
  1524  000CA0  0100               	movlb	0	; () banked
  1525  000CA2  6F80               	movwf	sprintf@sp& (0+255),b
  1526  000CA4  0E00               	movlw	high main@Buffer
  1527  000CA6  6F81               	movwf	(sprintf@sp+1)& (0+255),b
  1528  000CA8  0E5D               	movlw	low STR_3
  1529  000CAA  6F82               	movwf	sprintf@f& (0+255),b
  1530  000CAC  0EFF               	movlw	high STR_3
  1531  000CAE  6F83               	movwf	(sprintf@f+1)& (0+255),b
  1532  000CB0  EC09  F000         	call	_sprintf	;wreg free
  1533                           
  1534                           ;Main.c: 398: send_string_no_lib(Buffer);
  1535  000CB4  0EAE               	movlw	low main@Buffer
  1536  000CB6  6E16               	movwf	send_string_no_lib@p,c
  1537  000CB8  0E00               	movlw	high main@Buffer
  1538  000CBA  6E17               	movwf	send_string_no_lib@p+1,c
  1539  000CBC  EC3C  F018         	call	_send_string_no_lib	;wreg free
  1540                           
  1541                           ;Main.c: 399: sprintf(Buffer, "3 - To Change Time: Enter The New Time In The Format WHH:
      +                          MM:SS\n\r");
  1542  000CC0  0EAE               	movlw	low main@Buffer
  1543  000CC2  0100               	movlb	0	; () banked
  1544  000CC4  6F80               	movwf	sprintf@sp& (0+255),b
  1545  000CC6  0E00               	movlw	high main@Buffer
  1546  000CC8  6F81               	movwf	(sprintf@sp+1)& (0+255),b
  1547  000CCA  0E69               	movlw	low STR_4
  1548  000CCC  6F82               	movwf	sprintf@f& (0+255),b
  1549  000CCE  0EFE               	movlw	high STR_4
  1550  000CD0  6F83               	movwf	(sprintf@f+1)& (0+255),b
  1551  000CD2  EC09  F000         	call	_sprintf	;wreg free
  1552                           
  1553                           ;Main.c: 400: send_string_no_lib(Buffer);
  1554  000CD6  0EAE               	movlw	low main@Buffer
  1555  000CD8  6E16               	movwf	send_string_no_lib@p,c
  1556  000CDA  0E00               	movlw	high main@Buffer
  1557  000CDC  6E17               	movwf	send_string_no_lib@p+1,c
  1558  000CDE  EC3C  F018         	call	_send_string_no_lib	;wreg free
  1559  000CE2                     l284:
  1560  000CE2  0004               	clrwdt		;# 
  1561                           
  1562                           ;Main.c: 405: if(PORTBbits.RB2 == 0) incrementClock();
  1563  000CE4  B481               	btfsc	3969,2,c	;volatile
  1564  000CE6  D003               	goto	l285
  1565  000CE8  ECED  F015         	call	_incrementClock	;wreg free
  1566  000CEC  D003               	goto	l287
  1567  000CEE                     l285:
  1568                           
  1569                           ;Main.c: 406: else if(PORTBbits.RB3 == 0) decrementClock();
  1570  000CEE  A681               	btfss	3969,3,c	;volatile
  1571  000CF0  ECAF  F015         	call	_decrementClock	;wreg free
  1572  000CF4                     l287:
  1573                           
  1574                           ;Main.c: 408: if(PORTBbits.RB4 == 1) isRB4Release = 1;
  1575  000CF4  A881               	btfss	3969,4,c	;volatile
  1576  000CF6  D005               	goto	l288
  1577  000CF8  0E00               	movlw	0
  1578  000CFA  0100               	movlb	0	; () banked
  1579  000CFC  6FE4               	movwf	(main@isRB4Release+1)& (0+255),b
  1580  000CFE  0E01               	movlw	1
  1581  000D00  6FE3               	movwf	main@isRB4Release& (0+255),b
  1582  000D02                     l288:
  1583                           
  1584                           ;Main.c: 409: if(PORTBbits.RB5 == 1) isRB5Release = 1;
  1585                           
  1586                           ; BSR set to: 0
  1587  000D02  AA81               	btfss	3969,5,c	;volatile
  1588  000D04  D005               	goto	l289
  1589  000D06  0E00               	movlw	0
  1590  000D08  0100               	movlb	0	; () banked
  1591  000D0A  6FE6               	movwf	(main@isRB5Release+1)& (0+255),b
  1592  000D0C  0E01               	movlw	1
  1593  000D0E  6FE5               	movwf	main@isRB5Release& (0+255),b
  1594  000D10                     l289:
  1595                           
  1596                           ;Main.c: 411: if(PORTBbits.RB4 == 0 && isRB4Release) {
  1597                           
  1598                           ; BSR set to: 0
  1599  000D10  B881               	btfsc	3969,4,c	;volatile
  1600  000D12  D018               	goto	l290
  1601  000D14  0100               	movlb	0	; () banked
  1602  000D16  51E3               	movf	main@isRB4Release& (0+255),w,b
  1603  000D18  11E4               	iorwf	(main@isRB4Release+1)& (0+255),w,b
  1604  000D1A  B4D8               	btfsc	status,2,c
  1605  000D1C  D013               	goto	l290
  1606                           
  1607                           ; BSR set to: 0
  1608                           ;Main.c: 412: PORTCbits.RC2 = !PORTCbits.RC2;
  1609  000D1E  B482               	btfsc	3970,2,c	;volatile
  1610  000D20  D003               	goto	u6740
  1611  000D22  6BAD               	clrf	??_main& (0+255),b
  1612  000D24  2BAD               	incf	??_main& (0+255),f,b
  1613  000D26  D002               	goto	u6758
  1614  000D28                     u6740:
  1615  000D28  0100               	movlb	0	; () banked
  1616  000D2A  6BAD               	clrf	??_main& (0+255),b
  1617  000D2C                     u6758:
  1618  000D2C  47AD               	rlncf	??_main& (0+255),f,b
  1619  000D2E  47AD               	rlncf	??_main& (0+255),f,b
  1620  000D30  5082               	movf	3970,w,c	;volatile
  1621  000D32  19AD               	xorwf	??_main& (0+255),w,b
  1622  000D34  0BFB               	andlw	-5
  1623  000D36  19AD               	xorwf	??_main& (0+255),w,b
  1624  000D38  6E82               	movwf	3970,c	;volatile
  1625                           
  1626                           ; BSR set to: 0
  1627                           ;Main.c: 413: isRB4Release = 0;
  1628  000D3A  0E00               	movlw	0
  1629  000D3C  6FE4               	movwf	(main@isRB4Release+1)& (0+255),b
  1630  000D3E  0E00               	movlw	0
  1631  000D40  6FE3               	movwf	main@isRB4Release& (0+255),b
  1632                           
  1633                           ;Main.c: 414: } else if(PORTBbits.RB5 == 0 && isRB5Release) {
  1634  000D42  D019               	goto	l292
  1635  000D44                     l290:
  1636  000D44  BA81               	btfsc	3969,5,c	;volatile
  1637  000D46  D017               	goto	l292
  1638  000D48  0100               	movlb	0	; () banked
  1639  000D4A  51E5               	movf	main@isRB5Release& (0+255),w,b
  1640  000D4C  11E6               	iorwf	(main@isRB5Release+1)& (0+255),w,b
  1641  000D4E  B4D8               	btfsc	status,2,c
  1642  000D50  D012               	goto	l292
  1643                           
  1644                           ; BSR set to: 0
  1645                           ;Main.c: 415: PORTCbits.RC5 = !PORTCbits.RC5;
  1646  000D52  BA82               	btfsc	3970,5,c	;volatile
  1647  000D54  D003               	goto	u6780
  1648  000D56  6BAD               	clrf	??_main& (0+255),b
  1649  000D58  2BAD               	incf	??_main& (0+255),f,b
  1650  000D5A  D002               	goto	u6798
  1651  000D5C                     u6780:
  1652  000D5C  0100               	movlb	0	; () banked
  1653  000D5E  6BAD               	clrf	??_main& (0+255),b
  1654  000D60                     u6798:
  1655  000D60  3BAD               	swapf	??_main& (0+255),f,b
  1656  000D62  47AD               	rlncf	??_main& (0+255),f,b
  1657  000D64  5082               	movf	3970,w,c	;volatile
  1658  000D66  19AD               	xorwf	??_main& (0+255),w,b
  1659  000D68  0BDF               	andlw	-33
  1660  000D6A  19AD               	xorwf	??_main& (0+255),w,b
  1661  000D6C  6E82               	movwf	3970,c	;volatile
  1662                           
  1663                           ; BSR set to: 0
  1664                           ;Main.c: 416: isRB5Release = 0;
  1665  000D6E  0E00               	movlw	0
  1666  000D70  6FE6               	movwf	(main@isRB5Release+1)& (0+255),b
  1667  000D72  0E00               	movlw	0
  1668  000D74  6FE5               	movwf	main@isRB5Release& (0+255),b
  1669  000D76                     l292:
  1670                           
  1671                           ;Main.c: 417: }
  1672                           ;Main.c: 419: voltage = read_adc_voltage(2);
  1673                           
  1674                           ; BSR set to: 0
  1675                           
  1676                           ; BSR set to: 0
  1677  000D76  0E02               	movlw	2
  1678  000D78  EC6E  F015         	call	_read_adc_voltage
  1679  000D7C  C042  F0DF         	movff	?_read_adc_voltage,main@voltage
  1680  000D80  C043  F0E0         	movff	?_read_adc_voltage+1,main@voltage+1
  1681  000D84  C044  F0E1         	movff	?_read_adc_voltage+2,main@voltage+2
  1682  000D88  C045  F0E2         	movff	?_read_adc_voltage+3,main@voltage+3
  1683                           
  1684                           ;Main.c: 420: t = 100 * voltage;
  1685  000D8C  C0DF  F023         	movff	main@voltage,___flmul@b
  1686  000D90  C0E0  F024         	movff	main@voltage+1,___flmul@b+1
  1687  000D94  C0E1  F025         	movff	main@voltage+2,___flmul@b+2
  1688  000D98  C0E2  F026         	movff	main@voltage+3,___flmul@b+3
  1689  000D9C  0E00               	movlw	0
  1690  000D9E  6E27               	movwf	___flmul@a,c
  1691  000DA0  0E00               	movlw	0
  1692  000DA2  6E28               	movwf	___flmul@a+1,c
  1693  000DA4  0EC8               	movlw	200
  1694  000DA6  6E29               	movwf	___flmul@a+2,c
  1695  000DA8  0E42               	movlw	66
  1696  000DAA  6E2A               	movwf	___flmul@a+3,c
  1697  000DAC  ECBF  F00A         	call	___flmul	;wreg free
  1698  000DB0  C023  F0E7         	movff	?___flmul,main@t
  1699  000DB4  C024  F0E8         	movff	?___flmul+1,main@t+1
  1700  000DB8  C025  F0E9         	movff	?___flmul+2,main@t+2
  1701  000DBC  C026  F0EA         	movff	?___flmul+3,main@t+3
  1702                           
  1703                           ;Main.c: 422: lcd_gotoxy(1, 1);
  1704  000DC0  0E01               	movlw	1
  1705  000DC2  6E1F               	movwf	lcd_gotoxy@y,c
  1706  000DC4  0E01               	movlw	1
  1707  000DC6  EC61  F017         	call	_lcd_gotoxy
  1708                           
  1709                           ;Main.c: 423: sprintf(Buffer, "%02d:%02d:%02d", hours, minutes, seconds);
  1710  000DCA  0EAE               	movlw	low main@Buffer
  1711  000DCC  0100               	movlb	0	; () banked
  1712  000DCE  6F80               	movwf	sprintf@sp& (0+255),b
  1713  000DD0  0E00               	movlw	high main@Buffer
  1714  000DD2  6F81               	movwf	(sprintf@sp+1)& (0+255),b
  1715  000DD4  0EB0               	movlw	low STR_5
  1716  000DD6  6F82               	movwf	sprintf@f& (0+255),b
  1717  000DD8  0EFF               	movlw	high STR_5
  1718  000DDA  6F83               	movwf	(sprintf@f+1)& (0+255),b
  1719  000DDC  C0F0  F084         	movff	_hours,?_sprintf+4
  1720  000DE0  C0F1  F085         	movff	_hours+1,?_sprintf+5
  1721  000DE4  C0F2  F086         	movff	_minutes,?_sprintf+6
  1722  000DE8  C0F3  F087         	movff	_minutes+1,?_sprintf+7
  1723  000DEC  C0F4  F088         	movff	_seconds,?_sprintf+8
  1724  000DF0  C0F5  F089         	movff	_seconds+1,?_sprintf+9
  1725  000DF4  EC09  F000         	call	_sprintf	;wreg free
  1726                           
  1727                           ;Main.c: 424: lcd_puts(Buffer);
  1728  000DF8  0EAE               	movlw	low main@Buffer
  1729  000DFA  6E23               	movwf	lcd_puts@s,c
  1730  000DFC  0E00               	movlw	high main@Buffer
  1731  000DFE  6E24               	movwf	lcd_puts@s+1,c
  1732  000E00  EC4E  F018         	call	_lcd_puts	;wreg free
  1733                           
  1734                           ;Main.c: 426: lcd_gotoxy(10, 1);
  1735  000E04  0E01               	movlw	1
  1736  000E06  6E1F               	movwf	lcd_gotoxy@y,c
  1737  000E08  0E0A               	movlw	10
  1738  000E0A  EC61  F017         	call	_lcd_gotoxy
  1739                           
  1740                           ;Main.c: 427: sprintf(Buffer, "T=%4.2f\n", t);
  1741  000E0E  0EAE               	movlw	low main@Buffer
  1742  000E10  0100               	movlb	0	; () banked
  1743  000E12  6F80               	movwf	sprintf@sp& (0+255),b
  1744  000E14  0E00               	movlw	high main@Buffer
  1745  000E16  6F81               	movwf	(sprintf@sp+1)& (0+255),b
  1746  000E18  0EBF               	movlw	low STR_6
  1747  000E1A  6F82               	movwf	sprintf@f& (0+255),b
  1748  000E1C  0EFF               	movlw	high STR_6
  1749  000E1E  6F83               	movwf	(sprintf@f+1)& (0+255),b
  1750  000E20  C0E7  F084         	movff	main@t,?_sprintf+4
  1751  000E24  C0E8  F085         	movff	main@t+1,?_sprintf+5
  1752  000E28  C0E9  F086         	movff	main@t+2,?_sprintf+6
  1753  000E2C  C0EA  F087         	movff	main@t+3,?_sprintf+7
  1754  000E30  EC09  F000         	call	_sprintf	;wreg free
  1755                           
  1756                           ;Main.c: 428: lcd_puts(Buffer);
  1757  000E34  0EAE               	movlw	low main@Buffer
  1758  000E36  6E23               	movwf	lcd_puts@s,c
  1759  000E38  0E00               	movlw	high main@Buffer
  1760  000E3A  6E24               	movwf	lcd_puts@s+1,c
  1761  000E3C  EC4E  F018         	call	_lcd_puts	;wreg free
  1762                           
  1763                           ;Main.c: 430: lcd_gotoxy(1, 2);
  1764  000E40  0E02               	movlw	2
  1765  000E42  6E1F               	movwf	lcd_gotoxy@y,c
  1766  000E44  0E01               	movlw	1
  1767  000E46  EC61  F017         	call	_lcd_gotoxy
  1768                           
  1769                           ;Main.c: 431: sprintf(Buffer, "[C:%s]  ", PORTCbits.RC2==1?"ON":"OFF");
  1770  000E4A  B482               	btfsc	3970,2,c	;volatile
  1771  000E4C  D005               	goto	l294
  1772  000E4E  0EF7               	movlw	low STR_9
  1773  000E50  0100               	movlb	0	; () banked
  1774  000E52  6FD7               	movwf	_main$1105& (0+255),b
  1775  000E54  0EFF               	movlw	high STR_9
  1776  000E56  D004               	goto	L2
  1777  000E58                     l294:
  1778                           
  1779                           ; BSR set to: 0
  1780  000E58  0EFB               	movlw	low STR_8
  1781  000E5A  0100               	movlb	0	; () banked
  1782  000E5C  6FD7               	movwf	_main$1105& (0+255),b
  1783  000E5E  0EFF               	movlw	high STR_8
  1784  000E60                     L2:
  1785  000E60  6FD8               	movwf	(_main$1105+1)& (0+255),b
  1786                           
  1787                           ; BSR set to: 0
  1788                           
  1789                           ; BSR set to: 0
  1790  000E62  0EAE               	movlw	low main@Buffer
  1791  000E64  6F80               	movwf	sprintf@sp& (0+255),b
  1792  000E66  0E00               	movlw	high main@Buffer
  1793  000E68  6F81               	movwf	(sprintf@sp+1)& (0+255),b
  1794  000E6A  0EC8               	movlw	low STR_7
  1795  000E6C  6F82               	movwf	sprintf@f& (0+255),b
  1796  000E6E  0EFF               	movlw	high STR_7
  1797  000E70  6F83               	movwf	(sprintf@f+1)& (0+255),b
  1798  000E72  C0D7  F084         	movff	_main$1105,?_sprintf+4
  1799  000E76  C0D8  F085         	movff	_main$1105+1,?_sprintf+5
  1800  000E7A  EC09  F000         	call	_sprintf	;wreg free
  1801                           
  1802                           ;Main.c: 432: lcd_puts(Buffer);
  1803  000E7E  0EAE               	movlw	low main@Buffer
  1804  000E80  6E23               	movwf	lcd_puts@s,c
  1805  000E82  0E00               	movlw	high main@Buffer
  1806  000E84  6E24               	movwf	lcd_puts@s+1,c
  1807  000E86  EC4E  F018         	call	_lcd_puts	;wreg free
  1808                           
  1809                           ;Main.c: 434: lcd_gotoxy(9, 2);
  1810  000E8A  0E02               	movlw	2
  1811  000E8C  6E1F               	movwf	lcd_gotoxy@y,c
  1812  000E8E  0E09               	movlw	9
  1813  000E90  EC61  F017         	call	_lcd_gotoxy
  1814                           
  1815                           ;Main.c: 435: sprintf(Buffer, "[H:%s]  ", PORTCbits.RC5==1?"ON":"OFF");
  1816  000E94  BA82               	btfsc	3970,5,c	;volatile
  1817  000E96  D005               	goto	l298
  1818  000E98  0EF7               	movlw	low STR_9
  1819  000E9A  0100               	movlb	0	; () banked
  1820  000E9C  6FD9               	movwf	_main$1110& (0+255),b
  1821  000E9E  0EFF               	movlw	high STR_9
  1822  000EA0  D004               	goto	L3
  1823  000EA2                     l298:
  1824                           
  1825                           ; BSR set to: 0
  1826  000EA2  0EFB               	movlw	low STR_8
  1827  000EA4  0100               	movlb	0	; () banked
  1828  000EA6  6FD9               	movwf	_main$1110& (0+255),b
  1829  000EA8  0EFF               	movlw	high STR_8
  1830  000EAA                     L3:
  1831  000EAA  6FDA               	movwf	(_main$1110+1)& (0+255),b
  1832                           
  1833                           ; BSR set to: 0
  1834                           
  1835                           ; BSR set to: 0
  1836  000EAC  0EAE               	movlw	low main@Buffer
  1837  000EAE  6F80               	movwf	sprintf@sp& (0+255),b
  1838  000EB0  0E00               	movlw	high main@Buffer
  1839  000EB2  6F81               	movwf	(sprintf@sp+1)& (0+255),b
  1840  000EB4  0ED1               	movlw	low STR_10
  1841  000EB6  6F82               	movwf	sprintf@f& (0+255),b
  1842  000EB8  0EFF               	movlw	high STR_10
  1843  000EBA  6F83               	movwf	(sprintf@f+1)& (0+255),b
  1844  000EBC  C0D9  F084         	movff	_main$1110,?_sprintf+4
  1845  000EC0  C0DA  F085         	movff	_main$1110+1,?_sprintf+5
  1846  000EC4  EC09  F000         	call	_sprintf	;wreg free
  1847                           
  1848                           ;Main.c: 436: lcd_puts(Buffer);
  1849  000EC8  0EAE               	movlw	low main@Buffer
  1850  000ECA  6E23               	movwf	lcd_puts@s,c
  1851  000ECC  0E00               	movlw	high main@Buffer
  1852  000ECE  6E24               	movwf	lcd_puts@s+1,c
  1853  000ED0  EC4E  F018         	call	_lcd_puts	;wreg free
  1854                           
  1855                           ;Main.c: 438: lcd_gotoxy(1, 3);
  1856  000ED4  0E03               	movlw	3
  1857  000ED6  6E1F               	movwf	lcd_gotoxy@y,c
  1858  000ED8  0E01               	movlw	1
  1859  000EDA  EC61  F017         	call	_lcd_gotoxy
  1860                           
  1861                           ;Main.c: 439: if (!clkMode) sprintf(Buffer, "Normal Mode     ");
  1862  000EDE  0100               	movlb	0	; () banked
  1863  000EE0  51F6               	movf	_clkMode& (0+255),w,b
  1864  000EE2  11F7               	iorwf	(_clkMode+1)& (0+255),w,b
  1865  000EE4  A4D8               	btfss	status,2,c
  1866  000EE6  D00B               	goto	l301
  1867                           
  1868                           ; BSR set to: 0
  1869  000EE8  0EAE               	movlw	low main@Buffer
  1870  000EEA  6F80               	movwf	sprintf@sp& (0+255),b
  1871  000EEC  0E00               	movlw	high main@Buffer
  1872  000EEE  6F81               	movwf	(sprintf@sp+1)& (0+255),b
  1873  000EF0  0E90               	movlw	low STR_13
  1874  000EF2  6F82               	movwf	sprintf@f& (0+255),b
  1875  000EF4  0EFF               	movlw	high STR_13
  1876  000EF6  6F83               	movwf	(sprintf@f+1)& (0+255),b
  1877  000EF8  EC09  F000         	call	_sprintf	;wreg free
  1878  000EFC  D028               	goto	l302
  1879  000EFE                     l301:
  1880                           
  1881                           ;Main.c: 440: else sprintf(Buffer, "Setup=>[%s]   ", stpMode==0?"Seconds":stpMode==1?"Mi
      +                          nutes":"Hours");
  1882  000EFE  0100               	movlb	0	; () banked
  1883  000F00  51EE               	movf	_stpMode& (0+255),w,b
  1884  000F02  11EF               	iorwf	(_stpMode+1)& (0+255),w,b
  1885  000F04  B4D8               	btfsc	status,2,c
  1886  000F06  D011               	goto	l304
  1887                           
  1888                           ; BSR set to: 0
  1889  000F08  05EE               	decf	_stpMode& (0+255),w,b
  1890  000F0A  11EF               	iorwf	(_stpMode+1)& (0+255),w,b
  1891  000F0C  B4D8               	btfsc	status,2,c
  1892  000F0E  D004               	goto	l308
  1893                           
  1894                           ; BSR set to: 0
  1895  000F10  0EF1               	movlw	low STR_17
  1896  000F12  6FDD               	movwf	_main$1119& (0+255),b
  1897  000F14  0EFF               	movlw	high STR_17
  1898  000F16  D003               	goto	L1
  1899  000F18                     l308:
  1900                           
  1901                           ; BSR set to: 0
  1902                           
  1903                           ; BSR set to: 0
  1904  000F18  0EE2               	movlw	low STR_16
  1905  000F1A  6FDD               	movwf	_main$1119& (0+255),b
  1906  000F1C  0EFF               	movlw	high STR_16
  1907  000F1E                     L1:
  1908  000F1E  6FDE               	movwf	(_main$1119+1)& (0+255),b
  1909                           
  1910                           ; BSR set to: 0
  1911  000F20  C0DD  F0DB         	movff	_main$1119,_main$1118
  1912  000F24  C0DE  F0DC         	movff	_main$1119+1,_main$1118+1
  1913  000F28  D004               	goto	l306
  1914  000F2A                     l304:
  1915                           
  1916                           ; BSR set to: 0
  1917                           
  1918                           ; BSR set to: 0
  1919  000F2A  0EDA               	movlw	low STR_15
  1920  000F2C  6FDB               	movwf	_main$1118& (0+255),b
  1921  000F2E  0EFF               	movlw	high STR_15
  1922  000F30  6FDC               	movwf	(_main$1118+1)& (0+255),b
  1923  000F32                     l306:
  1924                           
  1925                           ; BSR set to: 0
  1926                           
  1927                           ; BSR set to: 0
  1928  000F32  0EAE               	movlw	low main@Buffer
  1929  000F34  6F80               	movwf	sprintf@sp& (0+255),b
  1930  000F36  0E00               	movlw	high main@Buffer
  1931  000F38  6F81               	movwf	(sprintf@sp+1)& (0+255),b
  1932  000F3A  0EA1               	movlw	low STR_14
  1933  000F3C  6F82               	movwf	sprintf@f& (0+255),b
  1934  000F3E  0EFF               	movlw	high STR_14
  1935  000F40  6F83               	movwf	(sprintf@f+1)& (0+255),b
  1936  000F42  C0DB  F084         	movff	_main$1118,?_sprintf+4
  1937  000F46  C0DC  F085         	movff	_main$1118+1,?_sprintf+5
  1938  000F4A  EC09  F000         	call	_sprintf	;wreg free
  1939  000F4E                     l302:
  1940                           
  1941                           ;Main.c: 441: lcd_puts(Buffer);
  1942  000F4E  0EAE               	movlw	low main@Buffer
  1943  000F50  6E23               	movwf	lcd_puts@s,c
  1944  000F52  0E00               	movlw	high main@Buffer
  1945  000F54  6E24               	movwf	lcd_puts@s+1,c
  1946  000F56  EC4E  F018         	call	_lcd_puts	;wreg free
  1947                           
  1948                           ;Main.c: 443: lcd_gotoxy(1, 4);
  1949  000F5A  0E04               	movlw	4
  1950  000F5C  6E1F               	movwf	lcd_gotoxy@y,c
  1951  000F5E  0E01               	movlw	1
  1952  000F60  EC61  F017         	call	_lcd_gotoxy
  1953                           
  1954                           ;Main.c: 444: sprintf(Buffer, "  [Taher, Adam]  ");
  1955  000F64  0EAE               	movlw	low main@Buffer
  1956  000F66  0100               	movlb	0	; () banked
  1957  000F68  6F80               	movwf	sprintf@sp& (0+255),b
  1958  000F6A  0E00               	movlw	high main@Buffer
  1959  000F6C  6F81               	movwf	(sprintf@sp+1)& (0+255),b
  1960  000F6E  0E7E               	movlw	low STR_18
  1961  000F70  6F82               	movwf	sprintf@f& (0+255),b
  1962  000F72  0EFF               	movlw	high STR_18
  1963  000F74  6F83               	movwf	(sprintf@f+1)& (0+255),b
  1964  000F76  EC09  F000         	call	_sprintf	;wreg free
  1965                           
  1966                           ;Main.c: 445: lcd_puts(Buffer);
  1967  000F7A  0EAE               	movlw	low main@Buffer
  1968  000F7C  6E23               	movwf	lcd_puts@s,c
  1969  000F7E  0E00               	movlw	high main@Buffer
  1970  000F80  6E24               	movwf	lcd_puts@s+1,c
  1971  000F82  EC4E  F018         	call	_lcd_puts	;wreg free
  1972                           
  1973                           ;Main.c: 447: if (is_byte_available()) {
  1974  000F86  EC80  F018         	call	_is_byte_available	;wreg free
  1975  000F8A  0900               	iorlw	0
  1976  000F8C  B4D8               	btfsc	status,2,c
  1977  000F8E  D0B0               	goto	l317
  1978                           
  1979                           ;Main.c: 448: RecvedChar = read_byte_no_lib();
  1980  000F90  ECA4  F018         	call	_read_byte_no_lib	;wreg free
  1981  000F94  0100               	movlb	0	; () banked
  1982  000F96  6FED               	movwf	main@RecvedChar& (0+255),b
  1983                           
  1984                           ; BSR set to: 0
  1985                           ;Main.c: 450: if (isValidChar(command, RecvedChar, i)) {
  1986  000F98  0ECE               	movlw	low main@command
  1987  000F9A  6E15               	movwf	isValidChar@command,c
  1988  000F9C  0E00               	movlw	high main@command
  1989  000F9E  6E16               	movwf	isValidChar@command+1,c
  1990  000FA0  C0ED  F017         	movff	main@RecvedChar,isValidChar@c
  1991  000FA4  C0EB  F018         	movff	main@i,isValidChar@i
  1992  000FA8  C0EC  F019         	movff	main@i+1,isValidChar@i+1
  1993  000FAC  ECF7  F011         	call	_isValidChar	;wreg free
  1994  000FB0  A0D8               	btfss	status,0,c
  1995  000FB2  D00C               	goto	l312
  1996                           
  1997                           ;Main.c: 451: command[i++] = RecvedChar;
  1998  000FB4  0ECE               	movlw	low main@command
  1999  000FB6  0100               	movlb	0	; () banked
  2000  000FB8  25EB               	addwf	main@i& (0+255),w,b
  2001  000FBA  6ED9               	movwf	fsr2l,c
  2002  000FBC  0E00               	movlw	high main@command
  2003  000FBE  21EC               	addwfc	(main@i+1)& (0+255),w,b
  2004  000FC0  6EDA               	movwf	fsr2h,c
  2005  000FC2  C0ED  FFDF         	movff	main@RecvedChar,indf2
  2006                           
  2007                           ; BSR set to: 0
  2008  000FC6  4BEB               	infsnz	main@i& (0+255),f,b
  2009  000FC8  2BEC               	incf	(main@i+1)& (0+255),f,b
  2010                           
  2011                           ;Main.c: 452: } else {
  2012  000FCA  D043               	goto	l316
  2013  000FCC                     l312:
  2014                           
  2015                           ;Main.c: 453: i = 0;
  2016                           
  2017                           ; BSR set to: 0
  2018  000FCC  0E00               	movlw	0
  2019  000FCE  0100               	movlb	0	; () banked
  2020  000FD0  6FEC               	movwf	(main@i+1)& (0+255),b
  2021  000FD2  0E00               	movlw	0
  2022  000FD4  6FEB               	movwf	main@i& (0+255),b
  2023                           
  2024                           ; BSR set to: 0
  2025                           ;Main.c: 454: if (RecvedChar == 'R') {
  2026  000FD6  0E52               	movlw	82
  2027  000FD8  19ED               	xorwf	main@RecvedChar& (0+255),w,b
  2028  000FDA  A4D8               	btfss	status,2,c
  2029  000FDC  D01D               	goto	l314
  2030                           
  2031                           ; BSR set to: 0
  2032                           ;Main.c: 455: sprintf(Buffer, "\n\rTime: %02d:%02d:%02d\n\r===================\n\r", hou
      +                          rs, minutes, seconds);
  2033  000FDE  0EAE               	movlw	low main@Buffer
  2034  000FE0  6F80               	movwf	sprintf@sp& (0+255),b
  2035  000FE2  0E00               	movlw	high main@Buffer
  2036  000FE4  6F81               	movwf	(sprintf@sp+1)& (0+255),b
  2037  000FE6  0EE2               	movlw	low STR_19
  2038  000FE8  6F82               	movwf	sprintf@f& (0+255),b
  2039  000FEA  0EFE               	movlw	high STR_19
  2040  000FEC  6F83               	movwf	(sprintf@f+1)& (0+255),b
  2041  000FEE  C0F0  F084         	movff	_hours,?_sprintf+4
  2042  000FF2  C0F1  F085         	movff	_hours+1,?_sprintf+5
  2043  000FF6  C0F2  F086         	movff	_minutes,?_sprintf+6
  2044  000FFA  C0F3  F087         	movff	_minutes+1,?_sprintf+7
  2045  000FFE  C0F4  F088         	movff	_seconds,?_sprintf+8
  2046  001002  C0F5  F089         	movff	_seconds+1,?_sprintf+9
  2047  001006  EC09  F000         	call	_sprintf	;wreg free
  2048                           
  2049                           ;Main.c: 456: send_string_no_lib(Buffer);
  2050  00100A  0EAE               	movlw	low main@Buffer
  2051  00100C  6E16               	movwf	send_string_no_lib@p,c
  2052  00100E  0E00               	movlw	high main@Buffer
  2053  001010  6E17               	movwf	send_string_no_lib@p+1,c
  2054  001012  EC3C  F018         	call	_send_string_no_lib	;wreg free
  2055                           
  2056                           ;Main.c: 457: } else if (RecvedChar == 'T') {
  2057  001016  D01D               	goto	l316
  2058  001018                     l314:
  2059  001018  0E54               	movlw	84
  2060  00101A  0100               	movlb	0	; () banked
  2061  00101C  19ED               	xorwf	main@RecvedChar& (0+255),w,b
  2062  00101E  A4D8               	btfss	status,2,c
  2063  001020  D018               	goto	l316
  2064                           
  2065                           ; BSR set to: 0
  2066                           ;Main.c: 458: sprintf(Buffer, "\n\rTemp: %4.1f\n\r===================\n\r", t);
  2067  001022  0EAE               	movlw	low main@Buffer
  2068  001024  6F80               	movwf	sprintf@sp& (0+255),b
  2069  001026  0E00               	movlw	high main@Buffer
  2070  001028  6F81               	movwf	(sprintf@sp+1)& (0+255),b
  2071  00102A  0E38               	movlw	low STR_20
  2072  00102C  6F82               	movwf	sprintf@f& (0+255),b
  2073  00102E  0EFF               	movlw	high STR_20
  2074  001030  6F83               	movwf	(sprintf@f+1)& (0+255),b
  2075  001032  C0E7  F084         	movff	main@t,?_sprintf+4
  2076  001036  C0E8  F085         	movff	main@t+1,?_sprintf+5
  2077  00103A  C0E9  F086         	movff	main@t+2,?_sprintf+6
  2078  00103E  C0EA  F087         	movff	main@t+3,?_sprintf+7
  2079  001042  EC09  F000         	call	_sprintf	;wreg free
  2080                           
  2081                           ;Main.c: 459: send_string_no_lib(Buffer);
  2082  001046  0EAE               	movlw	low main@Buffer
  2083  001048  6E16               	movwf	send_string_no_lib@p,c
  2084  00104A  0E00               	movlw	high main@Buffer
  2085  00104C  6E17               	movwf	send_string_no_lib@p+1,c
  2086  00104E  EC3C  F018         	call	_send_string_no_lib	;wreg free
  2087  001052                     l316:
  2088                           
  2089                           ;Main.c: 460: }
  2090                           ;Main.c: 461: }
  2091                           ;Main.c: 463: if (i == 9) {
  2092  001052  0E09               	movlw	9
  2093  001054  0100               	movlb	0	; () banked
  2094  001056  19EB               	xorwf	main@i& (0+255),w,b
  2095  001058  11EC               	iorwf	(main@i+1)& (0+255),w,b
  2096  00105A  A4D8               	btfss	status,2,c
  2097  00105C  D049               	goto	l317
  2098                           
  2099                           ; BSR set to: 0
  2100                           ;Main.c: 464: i = 0;
  2101  00105E  0E00               	movlw	0
  2102  001060  6FEC               	movwf	(main@i+1)& (0+255),b
  2103  001062  0E00               	movlw	0
  2104  001064  6FEB               	movwf	main@i& (0+255),b
  2105                           
  2106                           ; BSR set to: 0
  2107                           ;Main.c: 465: hours = 10*(command[1] - 48) + command[2] - 48;
  2108  001066  0ED0               	movlw	208
  2109  001068  25CF               	addwf	(main@command+1)& (0+255),w,b
  2110  00106A  6E15               	movwf	___wmul@multiplier,c
  2111  00106C  6A16               	clrf	___wmul@multiplier+1,c
  2112  00106E  0EFF               	movlw	255
  2113  001070  2216               	addwfc	___wmul@multiplier+1,f,c
  2114  001072  0E00               	movlw	0
  2115  001074  6E18               	movwf	___wmul@multiplicand+1,c
  2116  001076  0E0A               	movlw	10
  2117  001078  6E17               	movwf	___wmul@multiplicand,c
  2118  00107A  EC16  F018         	call	___wmul	;wreg free
  2119  00107E  0100               	movlb	0	; () banked
  2120  001080  51D0               	movf	(main@command+2)& (0+255),w,b
  2121  001082  2615               	addwf	?___wmul,f,c
  2122  001084  0E00               	movlw	0
  2123  001086  2216               	addwfc	?___wmul+1,f,c
  2124  001088  0ED0               	movlw	208
  2125  00108A  2415               	addwf	?___wmul,w,c
  2126  00108C  6FF0               	movwf	_hours& (0+255),b
  2127  00108E  0EFF               	movlw	255
  2128  001090  2016               	addwfc	?___wmul+1,w,c
  2129  001092  6FF1               	movwf	(_hours+1)& (0+255),b
  2130                           
  2131                           ; BSR set to: 0
  2132                           ;Main.c: 466: minutes = 10*(command[4] - 48) + command[5] - 48;
  2133  001094  0ED0               	movlw	208
  2134  001096  25D2               	addwf	(main@command+4)& (0+255),w,b
  2135  001098  6E15               	movwf	___wmul@multiplier,c
  2136  00109A  6A16               	clrf	___wmul@multiplier+1,c
  2137  00109C  0EFF               	movlw	255
  2138  00109E  2216               	addwfc	___wmul@multiplier+1,f,c
  2139  0010A0  0E00               	movlw	0
  2140  0010A2  6E18               	movwf	___wmul@multiplicand+1,c
  2141  0010A4  0E0A               	movlw	10
  2142  0010A6  6E17               	movwf	___wmul@multiplicand,c
  2143  0010A8  EC16  F018         	call	___wmul	;wreg free
  2144  0010AC  0100               	movlb	0	; () banked
  2145  0010AE  51D3               	movf	(main@command+5)& (0+255),w,b
  2146  0010B0  2615               	addwf	?___wmul,f,c
  2147  0010B2  0E00               	movlw	0
  2148  0010B4  2216               	addwfc	?___wmul+1,f,c
  2149  0010B6  0ED0               	movlw	208
  2150  0010B8  2415               	addwf	?___wmul,w,c
  2151  0010BA  6FF2               	movwf	_minutes& (0+255),b
  2152  0010BC  0EFF               	movlw	255
  2153  0010BE  2016               	addwfc	?___wmul+1,w,c
  2154  0010C0  6FF3               	movwf	(_minutes+1)& (0+255),b
  2155                           
  2156                           ; BSR set to: 0
  2157                           ;Main.c: 467: seconds = 10*(command[7] - 48) + command[8] - 48;
  2158  0010C2  0ED0               	movlw	208
  2159  0010C4  25D5               	addwf	(main@command+7)& (0+255),w,b
  2160  0010C6  6E15               	movwf	___wmul@multiplier,c
  2161  0010C8  6A16               	clrf	___wmul@multiplier+1,c
  2162  0010CA  0EFF               	movlw	255
  2163  0010CC  2216               	addwfc	___wmul@multiplier+1,f,c
  2164  0010CE  0E00               	movlw	0
  2165  0010D0  6E18               	movwf	___wmul@multiplicand+1,c
  2166  0010D2  0E0A               	movlw	10
  2167  0010D4  6E17               	movwf	___wmul@multiplicand,c
  2168  0010D6  EC16  F018         	call	___wmul	;wreg free
  2169  0010DA  0100               	movlb	0	; () banked
  2170  0010DC  51D6               	movf	(main@command+8)& (0+255),w,b
  2171  0010DE  2615               	addwf	?___wmul,f,c
  2172  0010E0  0E00               	movlw	0
  2173  0010E2  2216               	addwfc	?___wmul+1,f,c
  2174  0010E4  0ED0               	movlw	208
  2175  0010E6  2415               	addwf	?___wmul,w,c
  2176  0010E8  6FF4               	movwf	_seconds& (0+255),b
  2177  0010EA  0EFF               	movlw	255
  2178  0010EC  2016               	addwfc	?___wmul+1,w,c
  2179  0010EE  6FF5               	movwf	(_seconds+1)& (0+255),b
  2180  0010F0                     l317:
  2181                           
  2182                           ;Main.c: 468: }
  2183                           ;Main.c: 469: }
  2184                           ;Main.c: 471: delay_ms(200);
  2185                           
  2186                           ; BSR set to: 0
  2187                           
  2188                           ; BSR set to: 0
  2189  0010F0  0E00               	movlw	0
  2190  0010F2  6E16               	movwf	delay_ms@n+1,c
  2191  0010F4  0EC8               	movlw	200
  2192  0010F6  6E15               	movwf	delay_ms@n,c
  2193  0010F8  EC29  F018         	call	_delay_ms	;wreg free
  2194  0010FC  D5F2               	goto	l284
  2195  0010FE                     __end_of_main:
  2196                           	opt stack 0
  2197                           tblptru	equ	0xFF8
  2198                           tblptrh	equ	0xFF7
  2199                           tblptrl	equ	0xFF6
  2200                           tablat	equ	0xFF5
  2201                           postinc0	equ	0xFEE
  2202                           wreg	equ	0xFE8
  2203                           postdec1	equ	0xFE5
  2204                           fsr1l	equ	0xFE1
  2205                           indf2	equ	0xFDF
  2206                           fsr2h	equ	0xFDA
  2207                           fsr2l	equ	0xFD9
  2208                           status	equ	0xFD8
  2209                           
  2210 ;; *************** function _sprintf *****************
  2211 ;; Defined at:
  2212 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  2213 ;; Parameters:    Size  Location     Type
  2214 ;;  sp              2    0[BANK0 ] PTR unsigned char 
  2215 ;;		 -> main@Buffer(32), 
  2216 ;;  f               2    2[BANK0 ] PTR const unsigned char 
  2217 ;;		 -> STR_20(37), STR_19(46), STR_18(18), STR_14(15), 
  2218 ;;		 -> STR_13(17), STR_10(9), STR_7(9), STR_6(9), 
  2219 ;;		 -> STR_5(15), STR_4(65), STR_3(33), STR_2(40), 
  2220 ;;		 -> STR_1(56), 
  2221 ;; Auto vars:     Size  Location     Type
  2222 ;;  fval            4   36[BANK0 ] PTR const unsigned char 
  2223 ;;  val             4   28[BANK0 ] unsigned long 
  2224 ;;  tmpval          4   24[BANK0 ] struct .
  2225 ;;  prec            2   42[BANK0 ] int 
  2226 ;;  width           2   40[BANK0 ] int 
  2227 ;;  flag            2   34[BANK0 ] unsigned short 
  2228 ;;  exp             2   32[BANK0 ] int 
  2229 ;;  len             2   22[BANK0 ] unsigned int 
  2230 ;;  ap              2   20[BANK0 ] PTR void [1]
  2231 ;;		 -> ?_sprintf(2), 
  2232 ;;  cp              2   18[BANK0 ] PTR const unsigned char 
  2233 ;;		 -> STR_21(7), main@command(9), STR_17(6), STR_16(8), 
  2234 ;;		 -> STR_15(8), STR_12(4), STR_11(3), STR_9(4), 
  2235 ;;		 -> STR_8(3), main@voltage(4), 
  2236 ;;  c               1   44[BANK0 ] char 
  2237 ;;  d               1    0        unsigned char 
  2238 ;; Return value:  Size  Location     Type
  2239 ;;                  2    0[BANK0 ] int 
  2240 ;; Registers used:
  2241 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2242 ;; Tracked objects:
  2243 ;;		On entry : 0/0
  2244 ;;		On exit  : 0/0
  2245 ;;		Unchanged: 0/0
  2246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2247 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2248 ;;      Locals:         0      31       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2249 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2250 ;;      Totals:         0      45       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2251 ;;Total ram usage:       45 bytes
  2252 ;; Hardware stack levels used:    1
  2253 ;; Hardware stack levels required when called:    5
  2254 ;; This function calls:
  2255 ;;		___awdiv
  2256 ;;		___fladd
  2257 ;;		___flge
  2258 ;;		___flmul
  2259 ;;		___flneg
  2260 ;;		___flsub
  2261 ;;		___fltol
  2262 ;;		___lldiv
  2263 ;;		___llmod
  2264 ;;		___wmul
  2265 ;;		___xxtofl
  2266 ;;		__div_to_l_
  2267 ;;		__tdiv_to_l_
  2268 ;;		_fround
  2269 ;;		_isdigit
  2270 ;;		_scale
  2271 ;; This function is called by:
  2272 ;;		_main
  2273 ;; This function uses a non-reentrant model
  2274 ;;
  2275                           
  2276                           	psect	text1
  2277  000012                     __ptext1:
  2278                           	opt stack 0
  2279  000012                     _sprintf:
  2280                           	opt stack 25
  2281                           
  2282                           ;doprnt.c: 494: va_list ap;
  2283                           ;doprnt.c: 499: signed char c;
  2284                           ;doprnt.c: 501: int width;
  2285                           ;doprnt.c: 504: int prec;
  2286                           ;doprnt.c: 508: unsigned short flag;
  2287                           ;doprnt.c: 515: char d;
  2288                           ;doprnt.c: 516: double fval;
  2289                           ;doprnt.c: 517: int exp;
  2290                           ;doprnt.c: 523: union {
  2291                           ;doprnt.c: 524: unsigned long vd;
  2292                           ;doprnt.c: 525: double integ;
  2293                           ;doprnt.c: 526: } tmpval;
  2294                           ;doprnt.c: 528: unsigned long val;
  2295                           ;doprnt.c: 529: unsigned len;
  2296                           ;doprnt.c: 530: const char * cp;
  2297                           ;doprnt.c: 533: *ap = __va_start();
  2298                           
  2299                           ;incstack = 0
  2300  000012  0E84               	movlw	low (?_sprintf+4)
  2301  000014  0100               	movlb	0	; () banked
  2302  000016  6F94               	movwf	sprintf@ap& (0+255),b
  2303  000018  0E00               	movlw	high (?_sprintf+4)
  2304  00001A  6F95               	movwf	(sprintf@ap+1)& (0+255),b
  2305                           
  2306                           ;doprnt.c: 536: while(c = *f++) {
  2307  00001C  EF00  F006         	goto	u6660
  2308  000020                     
  2309                           ; BSR set to: 0
  2310                           ;doprnt.c: 538: if(c != '%')
  2311                           
  2312                           ; BSR set to: 0
  2313  000020  0E25               	movlw	37
  2314  000022  19AC               	xorwf	sprintf@c& (0+255),w,b
  2315  000024  B4D8               	btfsc	status,2,c
  2316  000026  D00A               	goto	l357
  2317                           
  2318                           ; BSR set to: 0
  2319                           ;doprnt.c: 540: {
  2320                           ;doprnt.c: 541: ((*sp++ = (c)));
  2321  000028  C080  FFD9         	movff	sprintf@sp,fsr2l
  2322  00002C  C081  FFDA         	movff	sprintf@sp+1,fsr2h
  2323  000030  C0AC  FFDF         	movff	sprintf@c,indf2
  2324                           
  2325                           ; BSR set to: 0
  2326  000034  4B80               	infsnz	sprintf@sp& (0+255),f,b
  2327  000036  2B81               	incf	(sprintf@sp+1)& (0+255),f,b
  2328                           
  2329                           ;doprnt.c: 542: continue;
  2330  000038  EF00  F006         	goto	u6660
  2331  00003C                     l357:
  2332                           
  2333                           ; BSR set to: 0
  2334                           ;doprnt.c: 543: }
  2335                           ;doprnt.c: 546: width = 0;
  2336                           
  2337                           ; BSR set to: 0
  2338  00003C  0E00               	movlw	0
  2339  00003E  6FA9               	movwf	(sprintf@width+1)& (0+255),b
  2340  000040  0E00               	movlw	0
  2341  000042  6FA8               	movwf	sprintf@width& (0+255),b
  2342                           
  2343                           ;doprnt.c: 548: flag = 0;
  2344  000044  0E00               	movlw	0
  2345  000046  6FA3               	movwf	(sprintf@flag+1)& (0+255),b
  2346  000048  0E00               	movlw	0
  2347  00004A  6FA2               	movwf	sprintf@flag& (0+255),b
  2348                           
  2349                           ; BSR set to: 0
  2350                           ;doprnt.c: 551: switch(*f) {
  2351                           
  2352                           ;doprnt.c: 550: for(;;) {
  2353  00004C  D004               	goto	l359
  2354  00004E                     
  2355                           ;doprnt.c: 580: flag |= 0x04;
  2356                           
  2357                           ; BSR set to: 0
  2358  00004E  0100               	movlb	0	; () banked
  2359  000050  85A2               	bsf	sprintf@flag& (0+255),2,b
  2360                           
  2361                           ;doprnt.c: 581: f++;
  2362  000052  4B82               	infsnz	sprintf@f& (0+255),f,b
  2363  000054  2B83               	incf	(sprintf@f+1)& (0+255),f,b
  2364  000056                     l359:
  2365                           
  2366                           ; BSR set to: 0
  2367  000056  C082  FFF6         	movff	sprintf@f,tblptrl
  2368  00005A  C083  FFF7         	movff	sprintf@f+1,tblptrh
  2369  00005E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2370  00005E  6AF8               	clrf	tblptru,c
  2371  000060                     	endif
  2372  000060                     	if	0	;tblptru may be non-zero
  2373  000060                     	endif
  2374  000060  0008               	tblrd		*
  2375  000062  50F5               	movf	tablat,w,c
  2376                           
  2377                           ; Switch size 1, requested type "space"
  2378                           ; Number of cases is 1, Range of values is 48 to 48
  2379                           ; switch strategies available:
  2380                           ; Name         Instructions Cycles
  2381                           ; simple_byte            4     3 (average)
  2382                           ;	Chosen strategy is simple_byte
  2383  000064  0A30               	xorlw	48	; case 48
  2384  000066  B4D8               	btfsc	status,2,c
  2385  000068  D7F2               	goto	l360
  2386                           
  2387                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2388                           
  2389                           ;doprnt.c: 586: }
  2390                           
  2391                           ;doprnt.c: 585: break;
  2392  00006A  C082  FFF6         	movff	sprintf@f,tblptrl
  2393  00006E  C083  FFF7         	movff	sprintf@f+1,tblptrh
  2394  000072                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2395  000072  6AF8               	clrf	tblptru,c
  2396  000074                     	endif
  2397  000074                     	if	0	;tblptru may be non-zero
  2398  000074                     	endif
  2399  000074  0008               	tblrd		*
  2400  000076  50F5               	movf	tablat,w,c
  2401  000078  EC71  F018         	call	_isdigit
  2402  00007C  A0D8               	btfss	status,0,c
  2403  00007E  D036               	goto	u6050
  2404                           
  2405                           ;doprnt.c: 598: width = 0;
  2406  000080  0E00               	movlw	0
  2407  000082  0100               	movlb	0	; () banked
  2408  000084  6FA9               	movwf	(sprintf@width+1)& (0+255),b
  2409  000086  0E00               	movlw	0
  2410  000088  6FA8               	movwf	sprintf@width& (0+255),b
  2411  00008A                     
  2412                           ;doprnt.c: 600: width *= 10;
  2413                           
  2414                           ; BSR set to: 0
  2415  00008A  C0A8  F015         	movff	sprintf@width,___wmul@multiplier
  2416  00008E  C0A9  F016         	movff	sprintf@width+1,___wmul@multiplier+1
  2417  000092  0E00               	movlw	0
  2418  000094  6E18               	movwf	___wmul@multiplicand+1,c
  2419  000096  0E0A               	movlw	10
  2420  000098  6E17               	movwf	___wmul@multiplicand,c
  2421  00009A  EC16  F018         	call	___wmul	;wreg free
  2422  00009E  C015  F0A8         	movff	?___wmul,sprintf@width
  2423  0000A2  C016  F0A9         	movff	?___wmul+1,sprintf@width+1
  2424                           
  2425                           ;doprnt.c: 601: width += *f++ - '0';
  2426  0000A6  0ED0               	movlw	208
  2427  0000A8  0100               	movlb	0	; () banked
  2428  0000AA  6F8A               	movwf	??_sprintf& (0+255),b
  2429  0000AC  0EFF               	movlw	255
  2430  0000AE  6F8B               	movwf	(??_sprintf+1)& (0+255),b
  2431  0000B0  C082  FFF6         	movff	sprintf@f,tblptrl
  2432  0000B4  C083  FFF7         	movff	sprintf@f+1,tblptrh
  2433  0000B8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2434  0000B8  6AF8               	clrf	tblptru,c
  2435  0000BA                     	endif
  2436  0000BA                     	if	0	;tblptru may be non-zero
  2437  0000BA                     	endif
  2438  0000BA  0008               	tblrd		*
  2439  0000BC  50F5               	movf	tablat,w,c
  2440  0000BE  6F8C               	movwf	(??_sprintf+2)& (0+255),b
  2441  0000C0  6B8D               	clrf	(??_sprintf+3)& (0+255),b
  2442  0000C2  518A               	movf	??_sprintf& (0+255),w,b
  2443  0000C4  278C               	addwf	(??_sprintf+2)& (0+255),f,b
  2444  0000C6  518B               	movf	(??_sprintf+1)& (0+255),w,b
  2445  0000C8  238D               	addwfc	(??_sprintf+3)& (0+255),f,b
  2446  0000CA  518C               	movf	(??_sprintf+2)& (0+255),w,b
  2447  0000CC  27A8               	addwf	sprintf@width& (0+255),f,b
  2448  0000CE  518D               	movf	(??_sprintf+3)& (0+255),w,b
  2449  0000D0  23A9               	addwfc	(sprintf@width+1)& (0+255),f,b
  2450                           
  2451                           ; BSR set to: 0
  2452  0000D2  4B82               	infsnz	sprintf@f& (0+255),f,b
  2453  0000D4  2B83               	incf	(sprintf@f+1)& (0+255),f,b
  2454                           
  2455                           ; BSR set to: 0
  2456                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2457  0000D6  C082  FFF6         	movff	sprintf@f,tblptrl
  2458  0000DA  C083  FFF7         	movff	sprintf@f+1,tblptrh
  2459  0000DE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2460  0000DE  6AF8               	clrf	tblptru,c
  2461  0000E0                     	endif
  2462  0000E0                     	if	0	;tblptru may be non-zero
  2463  0000E0                     	endif
  2464  0000E0  0008               	tblrd		*
  2465  0000E2  50F5               	movf	tablat,w,c
  2466  0000E4  EC71  F018         	call	_isdigit
  2467  0000E8  B0D8               	btfsc	status,0,c
  2468  0000EA  D7CF               	goto	l365
  2469  0000EC                     u6050:
  2470                           
  2471                           ;doprnt.c: 608: }
  2472                           ;doprnt.c: 611: if(*f == '.') {
  2473  0000EC  C082  FFF6         	movff	sprintf@f,tblptrl
  2474  0000F0  C083  FFF7         	movff	sprintf@f+1,tblptrh
  2475  0000F4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2476  0000F4  6AF8               	clrf	tblptru,c
  2477  0000F6                     	endif
  2478  0000F6                     	if	0	;tblptru may be non-zero
  2479  0000F6                     	endif
  2480  0000F6  0008               	tblrd		*
  2481  0000F8  50F5               	movf	tablat,w,c
  2482  0000FA  0A2E               	xorlw	46
  2483  0000FC  A4D8               	btfss	status,2,c
  2484  0000FE  D032               	goto	l367
  2485                           
  2486                           ;doprnt.c: 612: flag |= 0x4000;
  2487  000100  0100               	movlb	0	; () banked
  2488  000102  8DA3               	bsf	(sprintf@flag+1)& (0+255),6,b
  2489                           
  2490                           ;doprnt.c: 613: f++;
  2491  000104  4B82               	infsnz	sprintf@f& (0+255),f,b
  2492  000106  2B83               	incf	(sprintf@f+1)& (0+255),f,b
  2493                           
  2494                           ; BSR set to: 0
  2495                           ;doprnt.c: 620: {
  2496                           ;doprnt.c: 621: prec = 0;
  2497  000108  0E00               	movlw	0
  2498  00010A  6FAB               	movwf	(sprintf@prec+1)& (0+255),b
  2499  00010C  0E00               	movlw	0
  2500  00010E  6FAA               	movwf	sprintf@prec& (0+255),b
  2501                           
  2502                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  2503  000110  D01D               	goto	l368
  2504  000112                     
  2505                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  2506                           
  2507                           ; BSR set to: 0
  2508  000112  C0AA  F015         	movff	sprintf@prec,___wmul@multiplier
  2509  000116  C0AB  F016         	movff	sprintf@prec+1,___wmul@multiplier+1
  2510  00011A  0E00               	movlw	0
  2511  00011C  6E18               	movwf	___wmul@multiplicand+1,c
  2512  00011E  0E0A               	movlw	10
  2513  000120  6E17               	movwf	___wmul@multiplicand,c
  2514  000122  EC16  F018         	call	___wmul	;wreg free
  2515  000126  C082  FFF6         	movff	sprintf@f,tblptrl
  2516  00012A  C083  FFF7         	movff	sprintf@f+1,tblptrh
  2517  00012E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2518  00012E  6AF8               	clrf	tblptru,c
  2519  000130                     	endif
  2520  000130                     	if	0	;tblptru may be non-zero
  2521  000130                     	endif
  2522  000130  0008               	tblrd		*
  2523  000132  50F5               	movf	tablat,w,c
  2524  000134  2615               	addwf	?___wmul,f,c
  2525  000136  0E00               	movlw	0
  2526  000138  2216               	addwfc	?___wmul+1,f,c
  2527  00013A  0ED0               	movlw	208
  2528  00013C  2415               	addwf	?___wmul,w,c
  2529  00013E  0100               	movlb	0	; () banked
  2530  000140  6FAA               	movwf	sprintf@prec& (0+255),b
  2531  000142  0EFF               	movlw	255
  2532  000144  2016               	addwfc	?___wmul+1,w,c
  2533  000146  6FAB               	movwf	(sprintf@prec+1)& (0+255),b
  2534                           
  2535                           ; BSR set to: 0
  2536  000148  4B82               	infsnz	sprintf@f& (0+255),f,b
  2537  00014A  2B83               	incf	(sprintf@f+1)& (0+255),f,b
  2538  00014C                     l368:
  2539                           
  2540                           ; BSR set to: 0
  2541                           
  2542                           ; BSR set to: 0
  2543  00014C  C082  FFF6         	movff	sprintf@f,tblptrl
  2544  000150  C083  FFF7         	movff	sprintf@f+1,tblptrh
  2545  000154                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2546  000154  6AF8               	clrf	tblptru,c
  2547  000156                     	endif
  2548  000156                     	if	0	;tblptru may be non-zero
  2549  000156                     	endif
  2550  000156  0008               	tblrd		*
  2551  000158  50F5               	movf	tablat,w,c
  2552  00015A  EC71  F018         	call	_isdigit
  2553  00015E  A0D8               	btfss	status,0,c
  2554  000160  D095               	goto	l372
  2555  000162  D7D7               	goto	l369
  2556  000164                     l367:
  2557                           
  2558                           ;doprnt.c: 626: prec = 0;
  2559  000164  0E00               	movlw	0
  2560  000166  0100               	movlb	0	; () banked
  2561  000168  6FAB               	movwf	(sprintf@prec+1)& (0+255),b
  2562  00016A  0E00               	movlw	0
  2563  00016C  6FAA               	movwf	sprintf@prec& (0+255),b
  2564                           
  2565                           ; BSR set to: 0
  2566                           ;doprnt.c: 628: flag |= 0x1000;
  2567  00016E  89A3               	bsf	(sprintf@flag+1)& (0+255),4,b
  2568                           
  2569                           ; BSR set to: 0
  2570                           ;doprnt.c: 630: }
  2571                           ;doprnt.c: 635: switch(c = *f++) {
  2572  000170  D08D               	goto	l372
  2573  000172                     
  2574                           ; BSR set to: 0
  2575                           ;doprnt.c: 663: flag |= 0x400;
  2576                           
  2577                           ; BSR set to: 0
  2578  000172  85A3               	bsf	(sprintf@flag+1)& (0+255),2,b
  2579                           
  2580                           ; BSR set to: 0
  2581                           ;doprnt.c: 698: case 'i':
  2582                           ;doprnt.c: 699: break;
  2583                           
  2584                           ; BSR set to: 0
  2585                           
  2586                           ;doprnt.c: 697: case 'd':
  2587                           
  2588                           ;doprnt.c: 664: break;
  2589  000174  D0A9               	goto	l376
  2590  000176                     
  2591                           ; BSR set to: 0
  2592                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  2593                           
  2594                           ; BSR set to: 0
  2595  000176  C094  FFD9         	movff	sprintf@ap,fsr2l
  2596  00017A  C095  FFDA         	movff	sprintf@ap+1,fsr2h
  2597  00017E  CFDE F092          	movff	postinc2,sprintf@cp
  2598  000182  CFDD F093          	movff	postdec2,sprintf@cp+1
  2599                           
  2600                           ; BSR set to: 0
  2601  000186  0E02               	movlw	2
  2602  000188  2794               	addwf	sprintf@ap& (0+255),f,b
  2603  00018A  0E00               	movlw	0
  2604  00018C  2395               	addwfc	(sprintf@ap+1)& (0+255),f,b
  2605                           
  2606                           ; BSR set to: 0
  2607                           ;doprnt.c: 740: if(!cp)
  2608  00018E  5192               	movf	sprintf@cp& (0+255),w,b
  2609  000190  1193               	iorwf	(sprintf@cp+1)& (0+255),w,b
  2610  000192  A4D8               	btfss	status,2,c
  2611  000194  D004               	goto	l380
  2612                           
  2613                           ; BSR set to: 0
  2614                           ;doprnt.c: 741: cp = "(null)";
  2615  000196  0EEA               	movlw	low STR_21
  2616  000198  6F92               	movwf	sprintf@cp& (0+255),b
  2617  00019A  0EFF               	movlw	high STR_21
  2618  00019C  6F93               	movwf	(sprintf@cp+1)& (0+255),b
  2619  00019E                     l380:
  2620                           
  2621                           ; BSR set to: 0
  2622                           ;doprnt.c: 745: len = 0;
  2623                           
  2624                           ; BSR set to: 0
  2625  00019E  0E00               	movlw	0
  2626  0001A0  6F97               	movwf	(sprintf@len+1)& (0+255),b
  2627  0001A2  0E00               	movlw	0
  2628  0001A4  6F96               	movwf	sprintf@len& (0+255),b
  2629                           
  2630                           ;doprnt.c: 746: while(cp[len])
  2631  0001A6  D003               	goto	l381
  2632  0001A8                     
  2633                           ;doprnt.c: 747: len++;
  2634                           
  2635                           ; BSR set to: 0
  2636  0001A8  0100               	movlb	0	; () banked
  2637  0001AA  4B96               	infsnz	sprintf@len& (0+255),f,b
  2638  0001AC  2B97               	incf	(sprintf@len+1)& (0+255),f,b
  2639  0001AE                     l381:
  2640                           
  2641                           ; BSR set to: 0
  2642                           
  2643                           ; BSR set to: 0
  2644  0001AE  5196               	movf	sprintf@len& (0+255),w,b
  2645  0001B0  2592               	addwf	sprintf@cp& (0+255),w,b
  2646  0001B2  6F8A               	movwf	??_sprintf& (0+255),b
  2647  0001B4  5197               	movf	(sprintf@len+1)& (0+255),w,b
  2648  0001B6  2193               	addwfc	(sprintf@cp+1)& (0+255),w,b
  2649  0001B8  6F8B               	movwf	(??_sprintf+1)& (0+255),b
  2650  0001BA  C08A  FFF6         	movff	??_sprintf,tblptrl
  2651  0001BE  C08B  FFF7         	movff	??_sprintf+1,tblptrh
  2652  0001C2  0E00               	movlw	low (__mediumconst shr (0+16))
  2653  0001C4  6EF8               	movwf	tblptru,c
  2654  0001C6  0E0F               	movlw	(high __ramtop+-1)
  2655  0001C8  64F7               	cpfsgt	tblptrh,c
  2656  0001CA  D003               	bra	u6097
  2657  0001CC  0008               	tblrd		*
  2658  0001CE  50F5               	movf	tablat,w,c
  2659  0001D0  D005               	bra	u6090
  2660  0001D2                     u6097:
  2661  0001D2  CFF6 FFE1          	movff	tblptrl,fsr1l
  2662  0001D6  CFF7 FFE2          	movff	tblptrh,fsr1h
  2663  0001DA  50E7               	movf	indf1,w,c
  2664  0001DC                     u6090:
  2665  0001DC  0900               	iorlw	0
  2666  0001DE  A4D8               	btfss	status,2,c
  2667  0001E0  D7E3               	goto	l382
  2668                           
  2669                           ;doprnt.c: 753: if(prec && prec < len)
  2670  0001E2  0100               	movlb	0	; () banked
  2671  0001E4  51AA               	movf	sprintf@prec& (0+255),w,b
  2672  0001E6  11AB               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2673  0001E8  B4D8               	btfsc	status,2,c
  2674  0001EA  D00A               	goto	l384
  2675                           
  2676                           ; BSR set to: 0
  2677  0001EC  5196               	movf	sprintf@len& (0+255),w,b
  2678  0001EE  5DAA               	subwf	sprintf@prec& (0+255),w,b
  2679  0001F0  5197               	movf	(sprintf@len+1)& (0+255),w,b
  2680  0001F2  59AB               	subwfb	(sprintf@prec+1)& (0+255),w,b
  2681  0001F4  B0D8               	btfsc	status,0,c
  2682  0001F6  D004               	goto	l384
  2683                           
  2684                           ; BSR set to: 0
  2685                           ;doprnt.c: 754: len = prec;
  2686  0001F8  C0AA  F096         	movff	sprintf@prec,sprintf@len
  2687  0001FC  C0AB  F097         	movff	sprintf@prec+1,sprintf@len+1
  2688  000200                     l384:
  2689                           
  2690                           ; BSR set to: 0
  2691                           ;doprnt.c: 757: if(width > len)
  2692                           
  2693                           ; BSR set to: 0
  2694  000200  51A8               	movf	sprintf@width& (0+255),w,b
  2695  000202  5D96               	subwf	sprintf@len& (0+255),w,b
  2696  000204  51A9               	movf	(sprintf@width+1)& (0+255),w,b
  2697  000206  5997               	subwfb	(sprintf@len+1)& (0+255),w,b
  2698  000208  B0D8               	btfsc	status,0,c
  2699  00020A  D005               	goto	l385
  2700                           
  2701                           ; BSR set to: 0
  2702                           ;doprnt.c: 758: width -= len;
  2703  00020C  5196               	movf	sprintf@len& (0+255),w,b
  2704  00020E  5FA8               	subwf	sprintf@width& (0+255),f,b
  2705  000210  5197               	movf	(sprintf@len+1)& (0+255),w,b
  2706  000212  5BA9               	subwfb	(sprintf@width+1)& (0+255),f,b
  2707  000214  D00D               	goto	l387
  2708  000216                     l385:
  2709                           
  2710                           ; BSR set to: 0
  2711                           ;doprnt.c: 759: else
  2712                           ;doprnt.c: 760: width = 0;
  2713                           
  2714                           ; BSR set to: 0
  2715  000216  0E00               	movlw	0
  2716  000218  6FA9               	movwf	(sprintf@width+1)& (0+255),b
  2717  00021A  0E00               	movlw	0
  2718  00021C  6FA8               	movwf	sprintf@width& (0+255),b
  2719                           
  2720                           ; BSR set to: 0
  2721                           ;doprnt.c: 764: while(width--)
  2722  00021E  D008               	goto	l387
  2723  000220                     l5068:
  2724                           
  2725                           ; BSR set to: 0
  2726                           ;doprnt.c: 765: ((*sp++ = (' ')));
  2727  000220  C080  FFD9         	movff	sprintf@sp,fsr2l
  2728  000224  C081  FFDA         	movff	sprintf@sp+1,fsr2h
  2729  000228  0E20               	movlw	32
  2730  00022A  6EDF               	movwf	indf2,c
  2731                           
  2732                           ; BSR set to: 0
  2733  00022C  4B80               	infsnz	sprintf@sp& (0+255),f,b
  2734  00022E  2B81               	incf	(sprintf@sp+1)& (0+255),f,b
  2735  000230                     l387:
  2736                           
  2737                           ; BSR set to: 0
  2738                           
  2739                           ; BSR set to: 0
  2740  000230  07A8               	decf	sprintf@width& (0+255),f,b
  2741  000232  A0D8               	btfss	status,0,c
  2742  000234  07A9               	decf	(sprintf@width+1)& (0+255),f,b
  2743  000236  29A8               	incf	sprintf@width& (0+255),w,b
  2744  000238  E1F3               	bnz	l5068
  2745  00023A  29A9               	incf	(sprintf@width+1)& (0+255),w,b
  2746  00023C  B4D8               	btfsc	status,2,c
  2747  00023E  D01C               	goto	l390
  2748  000240  D7EF               	goto	l388
  2749  000242                     l5074:
  2750                           
  2751                           ; BSR set to: 0
  2752                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
  2753  000242  C092  FFF6         	movff	sprintf@cp,tblptrl
  2754  000246  C093  FFF7         	movff	sprintf@cp+1,tblptrh
  2755  00024A  0E00               	movlw	low (__mediumconst shr (0+16))
  2756  00024C  6EF8               	movwf	tblptru,c
  2757  00024E  C080  FFD9         	movff	sprintf@sp,fsr2l
  2758  000252  C081  FFDA         	movff	sprintf@sp+1,fsr2h
  2759  000256  0E0F               	movlw	(high __ramtop+-1)
  2760  000258  64F7               	cpfsgt	tblptrh,c
  2761  00025A  D003               	bra	u6157
  2762  00025C  0008               	tblrd		*
  2763  00025E  50F5               	movf	tablat,w,c
  2764  000260  D005               	bra	u6150
  2765  000262                     u6157:
  2766  000262  CFF6 FFE1          	movff	tblptrl,fsr1l
  2767  000266  CFF7 FFE2          	movff	tblptrh,fsr1h
  2768  00026A  50E7               	movf	indf1,w,c
  2769  00026C                     u6150:
  2770  00026C  6EDF               	movwf	indf2,c
  2771  00026E  0100               	movlb	0	; () banked
  2772  000270  4B92               	infsnz	sprintf@cp& (0+255),f,b
  2773  000272  2B93               	incf	(sprintf@cp+1)& (0+255),f,b
  2774                           
  2775                           ; BSR set to: 0
  2776  000274  4B80               	infsnz	sprintf@sp& (0+255),f,b
  2777  000276  2B81               	incf	(sprintf@sp+1)& (0+255),f,b
  2778  000278                     l390:
  2779                           
  2780                           ; BSR set to: 0
  2781                           
  2782                           ; BSR set to: 0
  2783  000278  0796               	decf	sprintf@len& (0+255),f,b
  2784  00027A  A0D8               	btfss	status,0,c
  2785  00027C  0797               	decf	(sprintf@len+1)& (0+255),f,b
  2786  00027E  2996               	incf	sprintf@len& (0+255),w,b
  2787  000280  E1E0               	bnz	l5074
  2788  000282  2997               	incf	(sprintf@len+1)& (0+255),w,b
  2789  000284  B4D8               	btfsc	status,2,c
  2790  000286  EF00  F006         	goto	u6660
  2791  00028A  D7DB               	goto	l391
  2792  00028C                     l372:
  2793                           
  2794                           ; BSR set to: 0
  2795  00028C  C082  FFF6         	movff	sprintf@f,tblptrl
  2796  000290  C083  FFF7         	movff	sprintf@f+1,tblptrh
  2797  000294  0100               	movlb	0	; () banked
  2798  000296  4B82               	infsnz	sprintf@f& (0+255),f,b
  2799  000298  2B83               	incf	(sprintf@f+1)& (0+255),f,b
  2800  00029A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2801  00029A  6AF8               	clrf	tblptru,c
  2802  00029C                     	endif
  2803  00029C                     	if	0	;tblptru may be non-zero
  2804  00029C                     	endif
  2805  00029C  0008               	tblrd		*
  2806  00029E  CFF5 F0AC          	movff	tablat,sprintf@c
  2807  0002A2  51AC               	movf	sprintf@c& (0+255),w,b
  2808                           
  2809                           ; Switch size 1, requested type "space"
  2810                           ; Number of cases is 5, Range of values is 0 to 115
  2811                           ; switch strategies available:
  2812                           ; Name         Instructions Cycles
  2813                           ; simple_byte           16     9 (average)
  2814                           ;	Chosen strategy is simple_byte
  2815  0002A4  0A00               	xorlw	0	; case 0
  2816  0002A6  B4D8               	btfsc	status,2,c
  2817  0002A8  EF0E  F006         	goto	u6670
  2818  0002AC  0A64               	xorlw	100	; case 100
  2819  0002AE  B4D8               	btfsc	status,2,c
  2820  0002B0  D00B               	goto	l376
  2821  0002B2  0A02               	xorlw	2	; case 102
  2822  0002B4  B4D8               	btfsc	status,2,c
  2823  0002B6  D75D               	goto	l375
  2824  0002B8  0A0F               	xorlw	15	; case 105
  2825  0002BA  B4D8               	btfsc	status,2,c
  2826  0002BC  D005               	goto	l376
  2827  0002BE  0A1A               	xorlw	26	; case 115
  2828  0002C0  B4D8               	btfsc	status,2,c
  2829  0002C2  D759               	goto	l379
  2830  0002C4  EF00  F006         	goto	u6660
  2831  0002C8                     l376:
  2832                           
  2833                           ; BSR set to: 0
  2834                           ;doprnt.c: 825: if(flag & (0x700)) {
  2835                           
  2836                           ; BSR set to: 0
  2837  0002C8  0E07               	movlw	7
  2838  0002CA  15A3               	andwf	(sprintf@flag+1)& (0+255),w,b
  2839  0002CC  B4D8               	btfsc	status,2,c
  2840  0002CE  D35D               	goto	l394
  2841                           
  2842                           ; BSR set to: 0
  2843                           ;doprnt.c: 827: if(flag & 0x1000)
  2844  0002D0  A9A3               	btfss	(sprintf@flag+1)& (0+255),4,b
  2845  0002D2  D004               	goto	l395
  2846                           
  2847                           ; BSR set to: 0
  2848                           ;doprnt.c: 829: prec = 6;
  2849  0002D4  0E00               	movlw	0
  2850  0002D6  6FAB               	movwf	(sprintf@prec+1)& (0+255),b
  2851  0002D8  0E06               	movlw	6
  2852  0002DA  6FAA               	movwf	sprintf@prec& (0+255),b
  2853  0002DC                     l395:
  2854                           
  2855                           ; BSR set to: 0
  2856                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  2857                           
  2858                           ; BSR set to: 0
  2859  0002DC  C094  FFD9         	movff	sprintf@ap,fsr2l
  2860  0002E0  C095  FFDA         	movff	sprintf@ap+1,fsr2h
  2861  0002E4  CFDE F0A4          	movff	postinc2,sprintf@fval
  2862  0002E8  CFDE F0A5          	movff	postinc2,sprintf@fval+1
  2863  0002EC  CFDE F0A6          	movff	postinc2,sprintf@fval+2
  2864  0002F0  CFDE F0A7          	movff	postinc2,sprintf@fval+3
  2865                           
  2866                           ; BSR set to: 0
  2867  0002F4  0E04               	movlw	4
  2868  0002F6  2794               	addwf	sprintf@ap& (0+255),f,b
  2869  0002F8  0E00               	movlw	0
  2870  0002FA  2395               	addwfc	(sprintf@ap+1)& (0+255),f,b
  2871                           
  2872                           ; BSR set to: 0
  2873                           ;doprnt.c: 831: if(fval < 0.0) {
  2874  0002FC  AFA7               	btfss	(sprintf@fval+3)& (0+255),7,b
  2875  0002FE  D015               	goto	l396
  2876                           
  2877                           ; BSR set to: 0
  2878                           ;doprnt.c: 832: fval = -fval;
  2879  000300  C0A4  F015         	movff	sprintf@fval,___flneg@f1
  2880  000304  C0A5  F016         	movff	sprintf@fval+1,___flneg@f1+1
  2881  000308  C0A6  F017         	movff	sprintf@fval+2,___flneg@f1+2
  2882  00030C  C0A7  F018         	movff	sprintf@fval+3,___flneg@f1+3
  2883  000310  ECD3  F017         	call	___flneg	;wreg free
  2884  000314  C015  F0A4         	movff	?___flneg,sprintf@fval
  2885  000318  C016  F0A5         	movff	?___flneg+1,sprintf@fval+1
  2886  00031C  C017  F0A6         	movff	?___flneg+2,sprintf@fval+2
  2887  000320  C018  F0A7         	movff	?___flneg+3,sprintf@fval+3
  2888                           
  2889                           ;doprnt.c: 833: flag |= 0x03;
  2890  000324  0E03               	movlw	3
  2891  000326  0100               	movlb	0	; () banked
  2892  000328  13A2               	iorwf	sprintf@flag& (0+255),f,b
  2893  00032A                     l396:
  2894                           
  2895                           ; BSR set to: 0
  2896                           ;doprnt.c: 834: }
  2897                           ;doprnt.c: 835: exp = 0;
  2898                           
  2899                           ; BSR set to: 0
  2900  00032A  0E00               	movlw	0
  2901  00032C  6FA1               	movwf	(sprintf@exp+1)& (0+255),b
  2902  00032E  0E00               	movlw	0
  2903  000330  6FA0               	movwf	sprintf@exp& (0+255),b
  2904                           
  2905                           ; BSR set to: 0
  2906                           ;doprnt.c: 836: if( fval!=0) {
  2907  000332  51A4               	movf	sprintf@fval& (0+255),w,b
  2908  000334  11A5               	iorwf	(sprintf@fval+1)& (0+255),w,b
  2909  000336  11A6               	iorwf	(sprintf@fval+2)& (0+255),w,b
  2910  000338  11A7               	iorwf	(sprintf@fval+3)& (0+255),w,b
  2911  00033A  B4D8               	btfsc	status,2,c
  2912  00033C  D082               	goto	l401
  2913                           
  2914                           ; BSR set to: 0
  2915                           ;doprnt.c: 837: (void)(*(&exp) = (unsigned char)((*(unsigned long *)&fval >> 23) & 255) 
      +                          - 126);
  2916  00033E  35A6               	rlcf	(sprintf@fval+2)& (0+255),w,b
  2917  000340  35A7               	rlcf	(sprintf@fval+3)& (0+255),w,b
  2918  000342  0F82               	addlw	130
  2919  000344  6FA0               	movwf	sprintf@exp& (0+255),b
  2920  000346  6BA1               	clrf	(sprintf@exp+1)& (0+255),b
  2921  000348  0EFF               	movlw	255
  2922  00034A  23A1               	addwfc	(sprintf@exp+1)& (0+255),f,b
  2923                           
  2924                           ; BSR set to: 0
  2925                           ;doprnt.c: 838: exp--;
  2926  00034C  07A0               	decf	sprintf@exp& (0+255),f,b
  2927  00034E  A0D8               	btfss	status,0,c
  2928  000350  07A1               	decf	(sprintf@exp+1)& (0+255),f,b
  2929                           
  2930                           ; BSR set to: 0
  2931                           ;doprnt.c: 839: exp *= 3;
  2932  000352  C0A0  F015         	movff	sprintf@exp,___wmul@multiplier
  2933  000356  C0A1  F016         	movff	sprintf@exp+1,___wmul@multiplier+1
  2934  00035A  0E00               	movlw	0
  2935  00035C  6E18               	movwf	___wmul@multiplicand+1,c
  2936  00035E  0E03               	movlw	3
  2937  000360  6E17               	movwf	___wmul@multiplicand,c
  2938  000362  EC16  F018         	call	___wmul	;wreg free
  2939  000366  C015  F0A0         	movff	?___wmul,sprintf@exp
  2940  00036A  C016  F0A1         	movff	?___wmul+1,sprintf@exp+1
  2941                           
  2942                           ;doprnt.c: 840: exp /= 10;
  2943  00036E  C0A0  F01B         	movff	sprintf@exp,___awdiv@dividend
  2944  000372  C0A1  F01C         	movff	sprintf@exp+1,___awdiv@dividend+1
  2945  000376  0E00               	movlw	0
  2946  000378  6E1E               	movwf	___awdiv@divisor+1,c
  2947  00037A  0E0A               	movlw	10
  2948  00037C  6E1D               	movwf	___awdiv@divisor,c
  2949  00037E  ECEB  F014         	call	___awdiv	;wreg free
  2950  000382  C01B  F0A0         	movff	?___awdiv,sprintf@exp
  2951  000386  C01C  F0A1         	movff	?___awdiv+1,sprintf@exp+1
  2952                           
  2953                           ;doprnt.c: 841: if(exp < 0)
  2954  00038A  0100               	movlb	0	; () banked
  2955  00038C  AFA1               	btfss	(sprintf@exp+1)& (0+255),7,b
  2956  00038E  D003               	goto	l398
  2957                           
  2958                           ; BSR set to: 0
  2959                           ;doprnt.c: 842: exp--;
  2960  000390  07A0               	decf	sprintf@exp& (0+255),f,b
  2961  000392  A0D8               	btfss	status,0,c
  2962  000394  07A1               	decf	(sprintf@exp+1)& (0+255),f,b
  2963  000396                     l398:
  2964                           
  2965                           ; BSR set to: 0
  2966                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  2967                           
  2968                           ; BSR set to: 0
  2969  000396  51A0               	movf	sprintf@exp& (0+255),w,b
  2970  000398  0800               	sublw	0
  2971  00039A  EC7F  F008         	call	_scale
  2972  00039E  C03C  F098         	movff	?_scale,sprintf@tmpval
  2973  0003A2  C03D  F099         	movff	?_scale+1,sprintf@tmpval+1
  2974  0003A6  C03E  F09A         	movff	?_scale+2,sprintf@tmpval+2
  2975  0003AA  C03F  F09B         	movff	?_scale+3,sprintf@tmpval+3
  2976                           
  2977                           ;doprnt.c: 847: tmpval.integ *= fval;
  2978  0003AE  C098  F023         	movff	sprintf@tmpval,___flmul@b
  2979  0003B2  C099  F024         	movff	sprintf@tmpval+1,___flmul@b+1
  2980  0003B6  C09A  F025         	movff	sprintf@tmpval+2,___flmul@b+2
  2981  0003BA  C09B  F026         	movff	sprintf@tmpval+3,___flmul@b+3
  2982  0003BE  C0A4  F027         	movff	sprintf@fval,___flmul@a
  2983  0003C2  C0A5  F028         	movff	sprintf@fval+1,___flmul@a+1
  2984  0003C6  C0A6  F029         	movff	sprintf@fval+2,___flmul@a+2
  2985  0003CA  C0A7  F02A         	movff	sprintf@fval+3,___flmul@a+3
  2986  0003CE  ECBF  F00A         	call	___flmul	;wreg free
  2987  0003D2  C023  F098         	movff	?___flmul,sprintf@tmpval
  2988  0003D6  C024  F099         	movff	?___flmul+1,sprintf@tmpval+1
  2989  0003DA  C025  F09A         	movff	?___flmul+2,sprintf@tmpval+2
  2990  0003DE  C026  F09B         	movff	?___flmul+3,sprintf@tmpval+3
  2991                           
  2992                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  2993  0003E2  C098  F015         	movff	sprintf@tmpval,___flge@ff1
  2994  0003E6  C099  F016         	movff	sprintf@tmpval+1,___flge@ff1+1
  2995  0003EA  C09A  F017         	movff	sprintf@tmpval+2,___flge@ff1+2
  2996  0003EE  C09B  F018         	movff	sprintf@tmpval+3,___flge@ff1+3
  2997  0003F2  0E00               	movlw	0
  2998  0003F4  6E19               	movwf	___flge@ff2,c
  2999  0003F6  0E00               	movlw	0
  3000  0003F8  6E1A               	movwf	___flge@ff2+1,c
  3001  0003FA  0E80               	movlw	128
  3002  0003FC  6E1B               	movwf	___flge@ff2+2,c
  3003  0003FE  0E3F               	movlw	63
  3004  000400  6E1C               	movwf	___flge@ff2+3,c
  3005  000402  EC20  F013         	call	___flge	;wreg free
  3006  000406  B0D8               	btfsc	status,0,c
  3007  000408  D005               	goto	l399
  3008                           
  3009                           ;doprnt.c: 849: exp--;
  3010  00040A  0100               	movlb	0	; () banked
  3011  00040C  07A0               	decf	sprintf@exp& (0+255),f,b
  3012  00040E  A0D8               	btfss	status,0,c
  3013  000410  07A1               	decf	(sprintf@exp+1)& (0+255),f,b
  3014  000412  D017               	goto	l401
  3015  000414                     l399:
  3016                           
  3017                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  3018                           
  3019                           ; BSR set to: 0
  3020  000414  C098  F015         	movff	sprintf@tmpval,___flge@ff1
  3021  000418  C099  F016         	movff	sprintf@tmpval+1,___flge@ff1+1
  3022  00041C  C09A  F017         	movff	sprintf@tmpval+2,___flge@ff1+2
  3023  000420  C09B  F018         	movff	sprintf@tmpval+3,___flge@ff1+3
  3024  000424  0E00               	movlw	0
  3025  000426  6E19               	movwf	___flge@ff2,c
  3026  000428  0E00               	movlw	0
  3027  00042A  6E1A               	movwf	___flge@ff2+1,c
  3028  00042C  0E20               	movlw	32
  3029  00042E  6E1B               	movwf	___flge@ff2+2,c
  3030  000430  0E41               	movlw	65
  3031  000432  6E1C               	movwf	___flge@ff2+3,c
  3032  000434  EC20  F013         	call	___flge	;wreg free
  3033  000438  A0D8               	btfss	status,0,c
  3034  00043A  D003               	goto	l401
  3035                           
  3036                           ;doprnt.c: 851: exp++;
  3037  00043C  0100               	movlb	0	; () banked
  3038  00043E  4BA0               	infsnz	sprintf@exp& (0+255),f,b
  3039  000440  2BA1               	incf	(sprintf@exp+1)& (0+255),f,b
  3040  000442                     l401:
  3041                           
  3042                           ;doprnt.c: 852: }
  3043                           ;doprnt.c: 1112: if(prec <= 12)
  3044                           
  3045                           ; BSR set to: 0
  3046                           
  3047                           ; BSR set to: 0
  3048                           
  3049                           ; BSR set to: 0
  3050  000442  0100               	movlb	0	; () banked
  3051  000444  BFAB               	btfsc	(sprintf@prec+1)& (0+255),7,b
  3052  000446  D006               	goto	u6240
  3053  000448  51AB               	movf	(sprintf@prec+1)& (0+255),w,b
  3054  00044A  E121               	bnz	l5134
  3055  00044C  0E0D               	movlw	13
  3056  00044E  5DAA               	subwf	sprintf@prec& (0+255),w,b
  3057  000450  B0D8               	btfsc	status,0,c
  3058  000452  D01D               	goto	l402
  3059  000454                     u6240:
  3060                           
  3061                           ; BSR set to: 0
  3062                           ;doprnt.c: 1113: fval += fround(prec);
  3063  000454  C0A4  F049         	movff	sprintf@fval,___fladd@b
  3064  000458  C0A5  F04A         	movff	sprintf@fval+1,___fladd@b+1
  3065  00045C  C0A6  F04B         	movff	sprintf@fval+2,___fladd@b+2
  3066  000460  C0A7  F04C         	movff	sprintf@fval+3,___fladd@b+3
  3067  000464  51AA               	movf	sprintf@prec& (0+255),w,b
  3068  000466  EC5F  F00F         	call	_fround
  3069  00046A  C03C  F04D         	movff	?_fround,___fladd@a
  3070  00046E  C03D  F04E         	movff	?_fround+1,___fladd@a+1
  3071  000472  C03E  F04F         	movff	?_fround+2,___fladd@a+2
  3072  000476  C03F  F050         	movff	?_fround+3,___fladd@a+3
  3073  00047A  EC67  F00C         	call	___fladd	;wreg free
  3074  00047E  C049  F0A4         	movff	?___fladd,sprintf@fval
  3075  000482  C04A  F0A5         	movff	?___fladd+1,sprintf@fval+1
  3076  000486  C04B  F0A6         	movff	?___fladd+2,sprintf@fval+2
  3077  00048A  C04C  F0A7         	movff	?___fladd+3,sprintf@fval+3
  3078  00048E                     l402:
  3079  00048E                     l5134:
  3080                           
  3081                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  3082  00048E  0100               	movlb	0	; () banked
  3083  000490  BFA1               	btfsc	(sprintf@exp+1)& (0+255),7,b
  3084  000492  D006               	goto	u6250
  3085  000494  51A1               	movf	(sprintf@exp+1)& (0+255),w,b
  3086  000496  E123               	bnz	l5142
  3087  000498  0E0A               	movlw	10
  3088  00049A  5DA0               	subwf	sprintf@exp& (0+255),w,b
  3089  00049C  B0D8               	btfsc	status,0,c
  3090  00049E  D01F               	goto	u6280
  3091  0004A0                     u6250:
  3092                           
  3093                           ; BSR set to: 0
  3094  0004A0  51A4               	movf	sprintf@fval& (0+255),w,b
  3095  0004A2  11A5               	iorwf	(sprintf@fval+1)& (0+255),w,b
  3096  0004A4  11A6               	iorwf	(sprintf@fval+2)& (0+255),w,b
  3097  0004A6  11A7               	iorwf	(sprintf@fval+3)& (0+255),w,b
  3098  0004A8  B4D8               	btfsc	status,2,c
  3099  0004AA  D064               	goto	l403
  3100                           
  3101                           ; BSR set to: 0
  3102  0004AC  C0A4  F045         	movff	sprintf@fval,___fltol@f1
  3103  0004B0  C0A5  F046         	movff	sprintf@fval+1,___fltol@f1+1
  3104  0004B4  C0A6  F047         	movff	sprintf@fval+2,___fltol@f1+2
  3105  0004B8  C0A7  F048         	movff	sprintf@fval+3,___fltol@f1+3
  3106  0004BC  EC23  F014         	call	___fltol	;wreg free
  3107  0004C0  5045               	movf	?___fltol,w,c
  3108  0004C2  1046               	iorwf	?___fltol+1,w,c
  3109  0004C4  1047               	iorwf	?___fltol+2,w,c
  3110  0004C6  1048               	iorwf	?___fltol+3,w,c
  3111  0004C8  A4D8               	btfss	status,2,c
  3112  0004CA  D054               	goto	l403
  3113  0004CC  0100               	movlb	0	; () banked
  3114  0004CE  BFA1               	btfsc	(sprintf@exp+1)& (0+255),7,b
  3115  0004D0  D051               	goto	l403
  3116  0004D2  51A1               	movf	(sprintf@exp+1)& (0+255),w,b
  3117  0004D4  E104               	bnz	l5142
  3118  0004D6  0E02               	movlw	2
  3119  0004D8  5DA0               	subwf	sprintf@exp& (0+255),w,b
  3120  0004DA  A0D8               	btfss	status,0,c
  3121  0004DC  D04B               	goto	l403
  3122  0004DE                     u6280:
  3123  0004DE                     l5142:
  3124                           
  3125                           ; BSR set to: 0
  3126                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  3127  0004DE  C098  F015         	movff	sprintf@tmpval,___flge@ff1
  3128  0004E2  C099  F016         	movff	sprintf@tmpval+1,___flge@ff1+1
  3129  0004E6  C09A  F017         	movff	sprintf@tmpval+2,___flge@ff1+2
  3130  0004EA  C09B  F018         	movff	sprintf@tmpval+3,___flge@ff1+3
  3131  0004EE  0E5F               	movlw	95
  3132  0004F0  6E19               	movwf	___flge@ff2,c
  3133  0004F2  0E70               	movlw	112
  3134  0004F4  6E1A               	movwf	___flge@ff2+1,c
  3135  0004F6  0E89               	movlw	137
  3136  0004F8  6E1B               	movwf	___flge@ff2+2,c
  3137  0004FA  0E40               	movlw	64
  3138  0004FC  6E1C               	movwf	___flge@ff2+3,c
  3139  0004FE  EC20  F013         	call	___flge	;wreg free
  3140  000502  B0D8               	btfsc	status,0,c
  3141  000504  D003               	goto	l406
  3142                           
  3143                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  3144  000506  0100               	movlb	0	; () banked
  3145  000508  0EF7               	movlw	247
  3146  00050A  D002               	goto	L4
  3147  00050C                     l406:
  3148                           
  3149                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  3150                           
  3151                           ; BSR set to: 0
  3152  00050C  0100               	movlb	0	; () banked
  3153  00050E  0EF8               	movlw	248
  3154  000510                     L4:
  3155  000510  27A0               	addwf	sprintf@exp& (0+255),f,b
  3156  000512  0EFF               	movlw	255
  3157  000514  23A1               	addwfc	(sprintf@exp+1)& (0+255),f,b
  3158                           
  3159                           ; BSR set to: 0
  3160                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  3161                           
  3162                           ; BSR set to: 0
  3163  000516  51A0               	movf	sprintf@exp& (0+255),w,b
  3164  000518  EC7F  F008         	call	_scale
  3165  00051C  C03C  F098         	movff	?_scale,sprintf@tmpval
  3166  000520  C03D  F099         	movff	?_scale+1,sprintf@tmpval+1
  3167  000524  C03E  F09A         	movff	?_scale+2,sprintf@tmpval+2
  3168  000528  C03F  F09B         	movff	?_scale+3,sprintf@tmpval+3
  3169  00052C  C0A4  F015         	movff	sprintf@fval,__div_to_l_@f1
  3170  000530  C0A5  F016         	movff	sprintf@fval+1,__div_to_l_@f1+1
  3171  000534  C0A6  F017         	movff	sprintf@fval+2,__div_to_l_@f1+2
  3172  000538  C0A7  F018         	movff	sprintf@fval+3,__div_to_l_@f1+3
  3173  00053C  C098  F019         	movff	sprintf@tmpval,__div_to_l_@f2
  3174  000540  C099  F01A         	movff	sprintf@tmpval+1,__div_to_l_@f2+1
  3175  000544  C09A  F01B         	movff	sprintf@tmpval+2,__div_to_l_@f2+2
  3176  000548  C09B  F01C         	movff	sprintf@tmpval+3,__div_to_l_@f2+3
  3177  00054C  EC8C  F012         	call	__div_to_l_	;wreg free
  3178  000550  C015  F09C         	movff	?__div_to_l_,sprintf@val
  3179  000554  C016  F09D         	movff	?__div_to_l_+1,sprintf@val+1
  3180  000558  C017  F09E         	movff	?__div_to_l_+2,sprintf@val+2
  3181  00055C  C018  F09F         	movff	?__div_to_l_+3,sprintf@val+3
  3182                           
  3183                           ;doprnt.c: 1129: fval = 0.0;
  3184  000560  0E00               	movlw	0
  3185  000562  0100               	movlb	0	; () banked
  3186  000564  6FA4               	movwf	sprintf@fval& (0+255),b
  3187  000566  0E00               	movlw	0
  3188  000568  6FA5               	movwf	(sprintf@fval+1)& (0+255),b
  3189  00056A  0E00               	movlw	0
  3190  00056C  6FA6               	movwf	(sprintf@fval+2)& (0+255),b
  3191  00056E  0E00               	movlw	0
  3192  000570  6FA7               	movwf	(sprintf@fval+3)& (0+255),b
  3193                           
  3194                           ;doprnt.c: 1130: } else {
  3195  000572  D03C               	goto	l412
  3196  000574                     l403:
  3197                           
  3198                           ;doprnt.c: 1131: val = (unsigned long)fval;
  3199                           
  3200                           ; BSR set to: 0
  3201  000574  C0A4  F045         	movff	sprintf@fval,___fltol@f1
  3202  000578  C0A5  F046         	movff	sprintf@fval+1,___fltol@f1+1
  3203  00057C  C0A6  F047         	movff	sprintf@fval+2,___fltol@f1+2
  3204  000580  C0A7  F048         	movff	sprintf@fval+3,___fltol@f1+3
  3205  000584  EC23  F014         	call	___fltol	;wreg free
  3206  000588  C045  F09C         	movff	?___fltol,sprintf@val
  3207  00058C  C046  F09D         	movff	?___fltol+1,sprintf@val+1
  3208  000590  C047  F09E         	movff	?___fltol+2,sprintf@val+2
  3209  000594  C048  F09F         	movff	?___fltol+3,sprintf@val+3
  3210                           
  3211                           ;doprnt.c: 1132: fval -= (double)val;
  3212  000598  C0A4  F05D         	movff	sprintf@fval,___flsub@b
  3213  00059C  C0A5  F05E         	movff	sprintf@fval+1,___flsub@b+1
  3214  0005A0  C0A6  F05F         	movff	sprintf@fval+2,___flsub@b+2
  3215  0005A4  C0A7  F060         	movff	sprintf@fval+3,___flsub@b+3
  3216  0005A8  C09C  F01B         	movff	sprintf@val,___xxtofl@val
  3217  0005AC  C09D  F01C         	movff	sprintf@val+1,___xxtofl@val+1
  3218  0005B0  C09E  F01D         	movff	sprintf@val+2,___xxtofl@val+2
  3219  0005B4  C09F  F01E         	movff	sprintf@val+3,___xxtofl@val+3
  3220  0005B8  0E00               	movlw	0
  3221  0005BA  ECB6  F010         	call	___xxtofl
  3222  0005BE  C01B  F061         	movff	?___xxtofl,___flsub@a
  3223  0005C2  C01C  F062         	movff	?___xxtofl+1,___flsub@a+1
  3224  0005C6  C01D  F063         	movff	?___xxtofl+2,___flsub@a+2
  3225  0005CA  C01E  F064         	movff	?___xxtofl+3,___flsub@a+3
  3226  0005CE  EC3E  F017         	call	___flsub	;wreg free
  3227  0005D2  C05D  F0A4         	movff	?___flsub,sprintf@fval
  3228  0005D6  C05E  F0A5         	movff	?___flsub+1,sprintf@fval+1
  3229  0005DA  C05F  F0A6         	movff	?___flsub+2,sprintf@fval+2
  3230  0005DE  C060  F0A7         	movff	?___flsub+3,sprintf@fval+3
  3231                           
  3232                           ;doprnt.c: 1133: exp = 0;
  3233  0005E2  0E00               	movlw	0
  3234  0005E4  0100               	movlb	0	; () banked
  3235  0005E6  6FA1               	movwf	(sprintf@exp+1)& (0+255),b
  3236  0005E8  0E00               	movlw	0
  3237  0005EA  6FA0               	movwf	sprintf@exp& (0+255),b
  3238  0005EC                     l412:
  3239                           
  3240                           ; BSR set to: 0
  3241                           ;doprnt.c: 1134: }
  3242                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  3243                           
  3244                           ; BSR set to: 0
  3245  0005EC  0E01               	movlw	1
  3246  0005EE  6FAC               	movwf	sprintf@c& (0+255),b
  3247  0005F0                     l5162:
  3248                           
  3249                           ; BSR set to: 0
  3250  0005F0  0E0A               	movlw	10
  3251  0005F2  19AC               	xorwf	sprintf@c& (0+255),w,b
  3252  0005F4  B4D8               	btfsc	status,2,c
  3253  0005F6  D01B               	goto	u6320
  3254                           
  3255                           ; BSR set to: 0
  3256                           ;doprnt.c: 1137: if(val < dpowers[c])
  3257                           
  3258                           ; BSR set to: 0
  3259                           
  3260                           ; BSR set to: 0
  3261  0005F8  51AC               	movf	sprintf@c& (0+255),w,b
  3262  0005FA  0D04               	mullw	4
  3263  0005FC  0E41               	movlw	low _dpowers
  3264  0005FE  24F3               	addwf	prodl,w,c
  3265  000600  6EF6               	movwf	tblptrl,c
  3266  000602  0EFE               	movlw	high _dpowers
  3267  000604  20F4               	addwfc	prodh,w,c
  3268  000606  6EF7               	movwf	tblptrh,c
  3269  000608                     	if	1	;There are 3 active tblptr bytes
  3270  000608  6AF8               	clrf	tblptru,c
  3271  00060A  0E00               	movlw	low (__mediumconst shr (0+16))
  3272  00060C  22F8               	addwfc	tblptru,f,c
  3273  00060E                     	endif
  3274  00060E  0009               	tblrd		*+
  3275  000610  50F5               	movf	tablat,w,c
  3276  000612  5D9C               	subwf	sprintf@val& (0+255),w,b
  3277  000614  0009               	tblrd		*+
  3278  000616  50F5               	movf	tablat,w,c
  3279  000618  599D               	subwfb	(sprintf@val+1)& (0+255),w,b
  3280  00061A  0009               	tblrd		*+
  3281  00061C  50F5               	movf	tablat,w,c
  3282  00061E  599E               	subwfb	(sprintf@val+2)& (0+255),w,b
  3283  000620  0009               	tblrd		*+
  3284  000622  50F5               	movf	tablat,w,c
  3285  000624  599F               	subwfb	(sprintf@val+3)& (0+255),w,b
  3286  000626  A0D8               	btfss	status,0,c
  3287  000628  D002               	goto	u6320
  3288                           
  3289                           ; BSR set to: 0
  3290                           
  3291                           ; BSR set to: 0
  3292                           
  3293                           ; BSR set to: 0
  3294                           ;doprnt.c: 1138: break;
  3295  00062A  2BAC               	incf	sprintf@c& (0+255),f,b
  3296  00062C  D7E1               	goto	l5162
  3297  00062E                     u6320:
  3298                           
  3299                           ; BSR set to: 0
  3300                           ;doprnt.c: 1142: width -= prec + c + exp;
  3301                           
  3302                           ; BSR set to: 0
  3303  00062E  C0AC  F08A         	movff	sprintf@c,??_sprintf
  3304  000632  6B8B               	clrf	(??_sprintf+1)& (0+255),b
  3305  000634  BF8A               	btfsc	??_sprintf& (0+255),7,b
  3306  000636  078B               	decf	(??_sprintf+1)& (0+255),f,b
  3307  000638  51AA               	movf	sprintf@prec& (0+255),w,b
  3308  00063A  278A               	addwf	??_sprintf& (0+255),f,b
  3309  00063C  51AB               	movf	(sprintf@prec+1)& (0+255),w,b
  3310  00063E  238B               	addwfc	(??_sprintf+1)& (0+255),f,b
  3311  000640  51A0               	movf	sprintf@exp& (0+255),w,b
  3312  000642  278A               	addwf	??_sprintf& (0+255),f,b
  3313  000644  51A1               	movf	(sprintf@exp+1)& (0+255),w,b
  3314  000646  238B               	addwfc	(??_sprintf+1)& (0+255),f,b
  3315  000648  518A               	movf	??_sprintf& (0+255),w,b
  3316  00064A  5FA8               	subwf	sprintf@width& (0+255),f,b
  3317  00064C  518B               	movf	(??_sprintf+1)& (0+255),w,b
  3318  00064E  5BA9               	subwfb	(sprintf@width+1)& (0+255),f,b
  3319                           
  3320                           ;doprnt.c: 1143: if(
  3321                           ;doprnt.c: 1147: prec)
  3322  000650  51AA               	movf	sprintf@prec& (0+255),w,b
  3323  000652  11AB               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3324  000654  B4D8               	btfsc	status,2,c
  3325  000656  D003               	goto	l416
  3326                           
  3327                           ; BSR set to: 0
  3328                           ;doprnt.c: 1148: width--;
  3329  000658  07A8               	decf	sprintf@width& (0+255),f,b
  3330  00065A  A0D8               	btfss	status,0,c
  3331  00065C  07A9               	decf	(sprintf@width+1)& (0+255),f,b
  3332  00065E                     l416:
  3333                           
  3334                           ; BSR set to: 0
  3335                           ;doprnt.c: 1149: if(flag & 0x03)
  3336                           
  3337                           ; BSR set to: 0
  3338  00065E  0E03               	movlw	3
  3339  000660  15A2               	andwf	sprintf@flag& (0+255),w,b
  3340  000662  6F8A               	movwf	??_sprintf& (0+255),b
  3341  000664  0E00               	movlw	0
  3342  000666  15A3               	andwf	(sprintf@flag+1)& (0+255),w,b
  3343  000668  6F8B               	movwf	(??_sprintf+1)& (0+255),b
  3344  00066A  518A               	movf	??_sprintf& (0+255),w,b
  3345  00066C  118B               	iorwf	(??_sprintf+1)& (0+255),w,b
  3346  00066E  B4D8               	btfsc	status,2,c
  3347  000670  D003               	goto	l417
  3348                           
  3349                           ; BSR set to: 0
  3350                           ;doprnt.c: 1150: width--;
  3351  000672  07A8               	decf	sprintf@width& (0+255),f,b
  3352  000674  A0D8               	btfss	status,0,c
  3353  000676  07A9               	decf	(sprintf@width+1)& (0+255),f,b
  3354  000678                     l417:
  3355                           
  3356                           ; BSR set to: 0
  3357                           ;doprnt.c: 1153: if(flag & 0x04) {
  3358                           
  3359                           ; BSR set to: 0
  3360  000678  A5A2               	btfss	sprintf@flag& (0+255),2,b
  3361  00067A  D031               	goto	l424
  3362                           
  3363                           ; BSR set to: 0
  3364                           ;doprnt.c: 1157: if(flag & 0x03)
  3365  00067C  0E03               	movlw	3
  3366  00067E  15A2               	andwf	sprintf@flag& (0+255),w,b
  3367  000680  6F8A               	movwf	??_sprintf& (0+255),b
  3368  000682  0E00               	movlw	0
  3369  000684  15A3               	andwf	(sprintf@flag+1)& (0+255),w,b
  3370  000686  6F8B               	movwf	(??_sprintf+1)& (0+255),b
  3371  000688  518A               	movf	??_sprintf& (0+255),w,b
  3372  00068A  118B               	iorwf	(??_sprintf+1)& (0+255),w,b
  3373  00068C  B4D8               	btfsc	status,2,c
  3374  00068E  D014               	goto	l420
  3375                           
  3376                           ; BSR set to: 0
  3377                           ;doprnt.c: 1159: ((*sp++ = ('-')));
  3378  000690  C080  FFD9         	movff	sprintf@sp,fsr2l
  3379  000694  C081  FFDA         	movff	sprintf@sp+1,fsr2h
  3380  000698  0E2D               	movlw	45
  3381  00069A  6EDF               	movwf	indf2,c
  3382                           
  3383                           ; BSR set to: 0
  3384  00069C  4B80               	infsnz	sprintf@sp& (0+255),f,b
  3385  00069E  2B81               	incf	(sprintf@sp+1)& (0+255),f,b
  3386                           
  3387                           ; BSR set to: 0
  3388                           ;doprnt.c: 1168: while(width > 0) {
  3389  0006A0  D00B               	goto	l420
  3390  0006A2                     l5190:
  3391                           
  3392                           ; BSR set to: 0
  3393                           ;doprnt.c: 1169: ((*sp++ = ('0')));
  3394  0006A2  C080  FFD9         	movff	sprintf@sp,fsr2l
  3395  0006A6  C081  FFDA         	movff	sprintf@sp+1,fsr2h
  3396  0006AA  0E30               	movlw	48
  3397  0006AC  6EDF               	movwf	indf2,c
  3398                           
  3399                           ; BSR set to: 0
  3400  0006AE  4B80               	infsnz	sprintf@sp& (0+255),f,b
  3401  0006B0  2B81               	incf	(sprintf@sp+1)& (0+255),f,b
  3402                           
  3403                           ; BSR set to: 0
  3404                           ;doprnt.c: 1170: width--;
  3405  0006B2  07A8               	decf	sprintf@width& (0+255),f,b
  3406  0006B4  A0D8               	btfss	status,0,c
  3407  0006B6  07A9               	decf	(sprintf@width+1)& (0+255),f,b
  3408  0006B8                     l420:
  3409                           
  3410                           ; BSR set to: 0
  3411                           
  3412                           ; BSR set to: 0
  3413  0006B8  BFA9               	btfsc	(sprintf@width+1)& (0+255),7,b
  3414  0006BA  D075               	goto	l428
  3415  0006BC  51A9               	movf	(sprintf@width+1)& (0+255),w,b
  3416  0006BE  E1F1               	bnz	l5190
  3417  0006C0  05A8               	decf	sprintf@width& (0+255),w,b
  3418  0006C2  A0D8               	btfss	status,0,c
  3419  0006C4  D070               	goto	l428
  3420  0006C6  D7ED               	goto	l421
  3421  0006C8                     l5198:
  3422                           
  3423                           ; BSR set to: 0
  3424                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  3425  0006C8  C080  FFD9         	movff	sprintf@sp,fsr2l
  3426  0006CC  C081  FFDA         	movff	sprintf@sp+1,fsr2h
  3427  0006D0  0E20               	movlw	32
  3428  0006D2  6EDF               	movwf	indf2,c
  3429                           
  3430                           ; BSR set to: 0
  3431  0006D4  4B80               	infsnz	sprintf@sp& (0+255),f,b
  3432  0006D6  2B81               	incf	(sprintf@sp+1)& (0+255),f,b
  3433                           
  3434                           ; BSR set to: 0
  3435                           ;doprnt.c: 1182: width--;
  3436  0006D8  07A8               	decf	sprintf@width& (0+255),f,b
  3437  0006DA  A0D8               	btfss	status,0,c
  3438  0006DC  07A9               	decf	(sprintf@width+1)& (0+255),f,b
  3439  0006DE                     l424:
  3440                           
  3441                           ; BSR set to: 0
  3442                           
  3443                           ; BSR set to: 0
  3444  0006DE  BFA9               	btfsc	(sprintf@width+1)& (0+255),7,b
  3445  0006E0  D005               	goto	u6380
  3446  0006E2  51A9               	movf	(sprintf@width+1)& (0+255),w,b
  3447  0006E4  E1F1               	bnz	l5198
  3448  0006E6  05A8               	decf	sprintf@width& (0+255),w,b
  3449  0006E8  B0D8               	btfsc	status,0,c
  3450  0006EA  D7EE               	goto	l425
  3451  0006EC                     u6380:
  3452                           
  3453                           ; BSR set to: 0
  3454                           ;doprnt.c: 1183: }
  3455                           ;doprnt.c: 1188: if(flag & 0x03)
  3456                           
  3457                           ; BSR set to: 0
  3458  0006EC  0E03               	movlw	3
  3459  0006EE  15A2               	andwf	sprintf@flag& (0+255),w,b
  3460  0006F0  6F8A               	movwf	??_sprintf& (0+255),b
  3461  0006F2  0E00               	movlw	0
  3462  0006F4  15A3               	andwf	(sprintf@flag+1)& (0+255),w,b
  3463  0006F6  6F8B               	movwf	(??_sprintf+1)& (0+255),b
  3464  0006F8  518A               	movf	??_sprintf& (0+255),w,b
  3465  0006FA  118B               	iorwf	(??_sprintf+1)& (0+255),w,b
  3466  0006FC  B4D8               	btfsc	status,2,c
  3467  0006FE  D053               	goto	l428
  3468                           
  3469                           ; BSR set to: 0
  3470                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  3471  000700  C080  FFD9         	movff	sprintf@sp,fsr2l
  3472  000704  C081  FFDA         	movff	sprintf@sp+1,fsr2h
  3473  000708  0E2D               	movlw	45
  3474  00070A  D04A               	goto	L5
  3475  00070C                     
  3476                           ; BSR set to: 0
  3477                           ;doprnt.c: 1200: {
  3478                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  3479                           
  3480                           ; BSR set to: 0
  3481  00070C  C09C  F015         	movff	sprintf@val,___lldiv@dividend
  3482  000710  C09D  F016         	movff	sprintf@val+1,___lldiv@dividend+1
  3483  000714  C09E  F017         	movff	sprintf@val+2,___lldiv@dividend+2
  3484  000718  C09F  F018         	movff	sprintf@val+3,___lldiv@dividend+3
  3485  00071C  51AC               	movf	sprintf@c& (0+255),w,b
  3486  00071E  0D04               	mullw	4
  3487  000720  0E41               	movlw	low _dpowers
  3488  000722  24F3               	addwf	prodl,w,c
  3489  000724  6EF6               	movwf	tblptrl,c
  3490  000726  0EFE               	movlw	high _dpowers
  3491  000728  20F4               	addwfc	prodh,w,c
  3492  00072A  6EF7               	movwf	tblptrh,c
  3493  00072C                     	if	1	;There are 3 active tblptr bytes
  3494  00072C  6AF8               	clrf	tblptru,c
  3495  00072E  0E00               	movlw	low (__mediumconst shr (0+16))
  3496  000730  22F8               	addwfc	tblptru,f,c
  3497  000732                     	endif
  3498  000732  0009               	tblrd		*+
  3499  000734  CFF5 F019          	movff	tablat,___lldiv@divisor
  3500  000738  0009               	tblrd		*+
  3501  00073A  CFF5 F01A          	movff	tablat,___lldiv@divisor+1
  3502  00073E  0009               	tblrd		*+
  3503  000740  CFF5 F01B          	movff	tablat,___lldiv@divisor+2
  3504  000744  000A               	tblrd		*-
  3505  000746  CFF5 F01C          	movff	tablat,___lldiv@divisor+3
  3506  00074A  EC2D  F015         	call	___lldiv	;wreg free
  3507  00074E  C015  F098         	movff	?___lldiv,sprintf@tmpval
  3508  000752  C016  F099         	movff	?___lldiv+1,sprintf@tmpval+1
  3509  000756  C017  F09A         	movff	?___lldiv+2,sprintf@tmpval+2
  3510  00075A  C018  F09B         	movff	?___lldiv+3,sprintf@tmpval+3
  3511                           
  3512                           ;doprnt.c: 1202: tmpval.vd %= 10;
  3513  00075E  C098  F022         	movff	sprintf@tmpval,___llmod@dividend
  3514  000762  C099  F023         	movff	sprintf@tmpval+1,___llmod@dividend+1
  3515  000766  C09A  F024         	movff	sprintf@tmpval+2,___llmod@dividend+2
  3516  00076A  C09B  F025         	movff	sprintf@tmpval+3,___llmod@dividend+3
  3517  00076E  0E0A               	movlw	10
  3518  000770  6E26               	movwf	___llmod@divisor,c
  3519  000772  0E00               	movlw	0
  3520  000774  6E27               	movwf	___llmod@divisor+1,c
  3521  000776  0E00               	movlw	0
  3522  000778  6E28               	movwf	___llmod@divisor+2,c
  3523  00077A  0E00               	movlw	0
  3524  00077C  6E29               	movwf	___llmod@divisor+3,c
  3525  00077E  EC62  F016         	call	___llmod	;wreg free
  3526  000782  C022  F098         	movff	?___llmod,sprintf@tmpval
  3527  000786  C023  F099         	movff	?___llmod+1,sprintf@tmpval+1
  3528  00078A  C024  F09A         	movff	?___llmod+2,sprintf@tmpval+2
  3529  00078E  C025  F09B         	movff	?___llmod+3,sprintf@tmpval+3
  3530                           
  3531                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  3532  000792  0100               	movlb	0	; () banked
  3533  000794  5198               	movf	sprintf@tmpval& (0+255),w,b
  3534  000796  0F30               	addlw	48
  3535  000798  C080  FFD9         	movff	sprintf@sp,fsr2l
  3536  00079C  C081  FFDA         	movff	sprintf@sp+1,fsr2h
  3537  0007A0                     L5:
  3538  0007A0  6EDF               	movwf	indf2,c
  3539                           
  3540                           ; BSR set to: 0
  3541  0007A2  4B80               	infsnz	sprintf@sp& (0+255),f,b
  3542  0007A4  2B81               	incf	(sprintf@sp+1)& (0+255),f,b
  3543  0007A6                     l428:
  3544                           
  3545                           ; BSR set to: 0
  3546                           
  3547                           ; BSR set to: 0
  3548  0007A6  07AC               	decf	sprintf@c& (0+255),f,b
  3549  0007A8  29AC               	incf	sprintf@c& (0+255),w,b
  3550  0007AA  B4D8               	btfsc	status,2,c
  3551  0007AC  D00C               	goto	l431
  3552  0007AE  D7AE               	goto	l429
  3553  0007B0                     l5222:
  3554                           
  3555                           ; BSR set to: 0
  3556                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  3557  0007B0  C080  FFD9         	movff	sprintf@sp,fsr2l
  3558  0007B4  C081  FFDA         	movff	sprintf@sp+1,fsr2h
  3559  0007B8  0E30               	movlw	48
  3560  0007BA  6EDF               	movwf	indf2,c
  3561                           
  3562                           ; BSR set to: 0
  3563  0007BC  4B80               	infsnz	sprintf@sp& (0+255),f,b
  3564  0007BE  2B81               	incf	(sprintf@sp+1)& (0+255),f,b
  3565                           
  3566                           ; BSR set to: 0
  3567                           ;doprnt.c: 1209: exp--;
  3568  0007C0  07A0               	decf	sprintf@exp& (0+255),f,b
  3569  0007C2  A0D8               	btfss	status,0,c
  3570  0007C4  07A1               	decf	(sprintf@exp+1)& (0+255),f,b
  3571  0007C6                     l431:
  3572                           
  3573                           ; BSR set to: 0
  3574                           
  3575                           ; BSR set to: 0
  3576  0007C6  BFA1               	btfsc	(sprintf@exp+1)& (0+255),7,b
  3577  0007C8  D005               	goto	u6410
  3578  0007CA  51A1               	movf	(sprintf@exp+1)& (0+255),w,b
  3579  0007CC  E1F1               	bnz	l5222
  3580  0007CE  05A0               	decf	sprintf@exp& (0+255),w,b
  3581  0007D0  B0D8               	btfsc	status,0,c
  3582  0007D2  D7EE               	goto	l432
  3583  0007D4                     u6410:
  3584                           
  3585                           ; BSR set to: 0
  3586                           ;doprnt.c: 1210: }
  3587                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  3588                           
  3589                           ; BSR set to: 0
  3590  0007D4  BFAB               	btfsc	(sprintf@prec+1)& (0+255),7,b
  3591  0007D6  D009               	goto	l434
  3592  0007D8  51AB               	movf	(sprintf@prec+1)& (0+255),w,b
  3593  0007DA  E104               	bnz	u6420
  3594  0007DC  0E09               	movlw	9
  3595  0007DE  5DAA               	subwf	sprintf@prec& (0+255),w,b
  3596  0007E0  A0D8               	btfss	status,0,c
  3597  0007E2  D003               	goto	l434
  3598  0007E4                     u6420:
  3599                           
  3600                           ; BSR set to: 0
  3601                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  3602  0007E4  0E08               	movlw	8
  3603  0007E6  6FAC               	movwf	sprintf@c& (0+255),b
  3604  0007E8  D002               	goto	l435
  3605  0007EA                     l434:
  3606                           
  3607                           ; BSR set to: 0
  3608                           ;doprnt.c: 1213: else
  3609                           ;doprnt.c: 1214: c = prec;
  3610  0007EA  C0AA  F0AC         	movff	sprintf@prec,sprintf@c
  3611  0007EE                     l435:
  3612                           
  3613                           ; BSR set to: 0
  3614                           ;doprnt.c: 1215: prec -= c;
  3615                           
  3616                           ; BSR set to: 0
  3617  0007EE  51AC               	movf	sprintf@c& (0+255),w,b
  3618  0007F0  5FAA               	subwf	sprintf@prec& (0+255),f,b
  3619  0007F2  0E00               	movlw	0
  3620  0007F4  BFAC               	btfsc	sprintf@c& (0+255),7,b
  3621  0007F6  0EFF               	movlw	255
  3622  0007F8  5BAB               	subwfb	(sprintf@prec+1)& (0+255),f,b
  3623                           
  3624                           ; BSR set to: 0
  3625                           ;doprnt.c: 1219: if(c)
  3626  0007FA  51AC               	movf	sprintf@c& (0+255),w,b
  3627  0007FC  B4D8               	btfsc	status,2,c
  3628  0007FE  D008               	goto	l436
  3629                           
  3630                           ; BSR set to: 0
  3631                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  3632  000800  C080  FFD9         	movff	sprintf@sp,fsr2l
  3633  000804  C081  FFDA         	movff	sprintf@sp+1,fsr2h
  3634  000808  0E2E               	movlw	46
  3635  00080A  6EDF               	movwf	indf2,c
  3636                           
  3637                           ; BSR set to: 0
  3638  00080C  4B80               	infsnz	sprintf@sp& (0+255),f,b
  3639  00080E  2B81               	incf	(sprintf@sp+1)& (0+255),f,b
  3640  000810                     l436:
  3641                           
  3642                           ; BSR set to: 0
  3643                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3644                           
  3645                           ; BSR set to: 0
  3646  000810  51AC               	movf	sprintf@c& (0+255),w,b
  3647  000812  EC7F  F008         	call	_scale
  3648  000816  C03C  F08E         	movff	?_scale,_sprintf$1785
  3649  00081A  C03D  F08F         	movff	?_scale+1,_sprintf$1785+1
  3650  00081E  C03E  F090         	movff	?_scale+2,_sprintf$1785+2
  3651  000822  C03F  F091         	movff	?_scale+3,_sprintf$1785+3
  3652                           
  3653                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3654  000826  C0A4  F027         	movff	sprintf@fval,___flmul@a
  3655  00082A  C0A5  F028         	movff	sprintf@fval+1,___flmul@a+1
  3656  00082E  C0A6  F029         	movff	sprintf@fval+2,___flmul@a+2
  3657  000832  C0A7  F02A         	movff	sprintf@fval+3,___flmul@a+3
  3658  000836  C08E  F023         	movff	_sprintf$1785,___flmul@b
  3659  00083A  C08F  F024         	movff	_sprintf$1785+1,___flmul@b+1
  3660  00083E  C090  F025         	movff	_sprintf$1785+2,___flmul@b+2
  3661  000842  C091  F026         	movff	_sprintf$1785+3,___flmul@b+3
  3662  000846  ECBF  F00A         	call	___flmul	;wreg free
  3663  00084A  C023  F045         	movff	?___flmul,___fltol@f1
  3664  00084E  C024  F046         	movff	?___flmul+1,___fltol@f1+1
  3665  000852  C025  F047         	movff	?___flmul+2,___fltol@f1+2
  3666  000856  C026  F048         	movff	?___flmul+3,___fltol@f1+3
  3667  00085A  EC23  F014         	call	___fltol	;wreg free
  3668  00085E  C045  F09C         	movff	?___fltol,sprintf@val
  3669  000862  C046  F09D         	movff	?___fltol+1,sprintf@val+1
  3670  000866  C047  F09E         	movff	?___fltol+2,sprintf@val+2
  3671  00086A  C048  F09F         	movff	?___fltol+3,sprintf@val+3
  3672                           
  3673                           ;doprnt.c: 1228: while(c--) {
  3674  00086E  D077               	goto	l437
  3675  000870                     
  3676                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  3677  000870  C09C  F015         	movff	sprintf@val,___lldiv@dividend
  3678  000874  C09D  F016         	movff	sprintf@val+1,___lldiv@dividend+1
  3679  000878  C09E  F017         	movff	sprintf@val+2,___lldiv@dividend+2
  3680  00087C  C09F  F018         	movff	sprintf@val+3,___lldiv@dividend+3
  3681  000880  0100               	movlb	0	; () banked
  3682  000882  51AC               	movf	sprintf@c& (0+255),w,b
  3683  000884  0D04               	mullw	4
  3684  000886  0E41               	movlw	low _dpowers
  3685  000888  24F3               	addwf	prodl,w,c
  3686  00088A  6EF6               	movwf	tblptrl,c
  3687  00088C  0EFE               	movlw	high _dpowers
  3688  00088E  20F4               	addwfc	prodh,w,c
  3689  000890  6EF7               	movwf	tblptrh,c
  3690  000892                     	if	1	;There are 3 active tblptr bytes
  3691  000892  6AF8               	clrf	tblptru,c
  3692  000894  0E00               	movlw	low (__mediumconst shr (0+16))
  3693  000896  22F8               	addwfc	tblptru,f,c
  3694  000898                     	endif
  3695  000898  0009               	tblrd		*+
  3696  00089A  CFF5 F019          	movff	tablat,___lldiv@divisor
  3697  00089E  0009               	tblrd		*+
  3698  0008A0  CFF5 F01A          	movff	tablat,___lldiv@divisor+1
  3699  0008A4  0009               	tblrd		*+
  3700  0008A6  CFF5 F01B          	movff	tablat,___lldiv@divisor+2
  3701  0008AA  000A               	tblrd		*-
  3702  0008AC  CFF5 F01C          	movff	tablat,___lldiv@divisor+3
  3703  0008B0  EC2D  F015         	call	___lldiv	;wreg free
  3704  0008B4  C015  F098         	movff	?___lldiv,sprintf@tmpval
  3705  0008B8  C016  F099         	movff	?___lldiv+1,sprintf@tmpval+1
  3706  0008BC  C017  F09A         	movff	?___lldiv+2,sprintf@tmpval+2
  3707  0008C0  C018  F09B         	movff	?___lldiv+3,sprintf@tmpval+3
  3708                           
  3709                           ;doprnt.c: 1230: tmpval.vd %= 10;
  3710  0008C4  C098  F022         	movff	sprintf@tmpval,___llmod@dividend
  3711  0008C8  C099  F023         	movff	sprintf@tmpval+1,___llmod@dividend+1
  3712  0008CC  C09A  F024         	movff	sprintf@tmpval+2,___llmod@dividend+2
  3713  0008D0  C09B  F025         	movff	sprintf@tmpval+3,___llmod@dividend+3
  3714  0008D4  0E0A               	movlw	10
  3715  0008D6  6E26               	movwf	___llmod@divisor,c
  3716  0008D8  0E00               	movlw	0
  3717  0008DA  6E27               	movwf	___llmod@divisor+1,c
  3718  0008DC  0E00               	movlw	0
  3719  0008DE  6E28               	movwf	___llmod@divisor+2,c
  3720  0008E0  0E00               	movlw	0
  3721  0008E2  6E29               	movwf	___llmod@divisor+3,c
  3722  0008E4  EC62  F016         	call	___llmod	;wreg free
  3723  0008E8  C022  F098         	movff	?___llmod,sprintf@tmpval
  3724  0008EC  C023  F099         	movff	?___llmod+1,sprintf@tmpval+1
  3725  0008F0  C024  F09A         	movff	?___llmod+2,sprintf@tmpval+2
  3726  0008F4  C025  F09B         	movff	?___llmod+3,sprintf@tmpval+3
  3727                           
  3728                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  3729  0008F8  0100               	movlb	0	; () banked
  3730  0008FA  5198               	movf	sprintf@tmpval& (0+255),w,b
  3731  0008FC  0F30               	addlw	48
  3732  0008FE  C080  FFD9         	movff	sprintf@sp,fsr2l
  3733  000902  C081  FFDA         	movff	sprintf@sp+1,fsr2h
  3734  000906  6EDF               	movwf	indf2,c
  3735                           
  3736                           ; BSR set to: 0
  3737  000908  4B80               	infsnz	sprintf@sp& (0+255),f,b
  3738  00090A  2B81               	incf	(sprintf@sp+1)& (0+255),f,b
  3739                           
  3740                           ; BSR set to: 0
  3741                           ;doprnt.c: 1232: val %= dpowers[c];
  3742  00090C  C09C  F022         	movff	sprintf@val,___llmod@dividend
  3743  000910  C09D  F023         	movff	sprintf@val+1,___llmod@dividend+1
  3744  000914  C09E  F024         	movff	sprintf@val+2,___llmod@dividend+2
  3745  000918  C09F  F025         	movff	sprintf@val+3,___llmod@dividend+3
  3746  00091C  51AC               	movf	sprintf@c& (0+255),w,b
  3747  00091E  0D04               	mullw	4
  3748  000920  0E41               	movlw	low _dpowers
  3749  000922  24F3               	addwf	prodl,w,c
  3750  000924  6EF6               	movwf	tblptrl,c
  3751  000926  0EFE               	movlw	high _dpowers
  3752  000928  20F4               	addwfc	prodh,w,c
  3753  00092A  6EF7               	movwf	tblptrh,c
  3754  00092C                     	if	1	;There are 3 active tblptr bytes
  3755  00092C  6AF8               	clrf	tblptru,c
  3756  00092E  0E00               	movlw	low (__mediumconst shr (0+16))
  3757  000930  22F8               	addwfc	tblptru,f,c
  3758  000932                     	endif
  3759  000932  0009               	tblrd		*+
  3760  000934  CFF5 F026          	movff	tablat,___llmod@divisor
  3761  000938  0009               	tblrd		*+
  3762  00093A  CFF5 F027          	movff	tablat,___llmod@divisor+1
  3763  00093E  0009               	tblrd		*+
  3764  000940  CFF5 F028          	movff	tablat,___llmod@divisor+2
  3765  000944  000A               	tblrd		*-
  3766  000946  CFF5 F029          	movff	tablat,___llmod@divisor+3
  3767  00094A  EC62  F016         	call	___llmod	;wreg free
  3768  00094E  C022  F09C         	movff	?___llmod,sprintf@val
  3769  000952  C023  F09D         	movff	?___llmod+1,sprintf@val+1
  3770  000956  C024  F09E         	movff	?___llmod+2,sprintf@val+2
  3771  00095A  C025  F09F         	movff	?___llmod+3,sprintf@val+3
  3772  00095E                     l437:
  3773  00095E  0100               	movlb	0	; () banked
  3774  000960  07AC               	decf	sprintf@c& (0+255),f,b
  3775  000962  29AC               	incf	sprintf@c& (0+255),w,b
  3776  000964  B4D8               	btfsc	status,2,c
  3777  000966  D00C               	goto	l440
  3778  000968  D783               	goto	l438
  3779  00096A                     
  3780                           ; BSR set to: 0
  3781                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  3782                           
  3783                           ; BSR set to: 0
  3784  00096A  C080  FFD9         	movff	sprintf@sp,fsr2l
  3785  00096E  C081  FFDA         	movff	sprintf@sp+1,fsr2h
  3786  000972  0E30               	movlw	48
  3787  000974  6EDF               	movwf	indf2,c
  3788                           
  3789                           ; BSR set to: 0
  3790  000976  4B80               	infsnz	sprintf@sp& (0+255),f,b
  3791  000978  2B81               	incf	(sprintf@sp+1)& (0+255),f,b
  3792                           
  3793                           ; BSR set to: 0
  3794                           ;doprnt.c: 1237: prec--;
  3795  00097A  07AA               	decf	sprintf@prec& (0+255),f,b
  3796  00097C  A0D8               	btfss	status,0,c
  3797  00097E  07AB               	decf	(sprintf@prec+1)& (0+255),f,b
  3798  000980                     l440:
  3799                           
  3800                           ; BSR set to: 0
  3801                           
  3802                           ; BSR set to: 0
  3803  000980  51AA               	movf	sprintf@prec& (0+255),w,b
  3804  000982  11AB               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3805  000984  B4D8               	btfsc	status,2,c
  3806  000986  D13C               	goto	u6660
  3807  000988  D7F0               	goto	l441
  3808  00098A                     l394:
  3809                           
  3810                           ; BSR set to: 0
  3811                           ;doprnt.c: 1246: }
  3812                           ;doprnt.c: 1253: {
  3813                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  3814                           
  3815                           ; BSR set to: 0
  3816  00098A  C094  FFD9         	movff	sprintf@ap,fsr2l
  3817  00098E  C095  FFDA         	movff	sprintf@ap+1,fsr2h
  3818  000992  CFDE F09C          	movff	postinc2,sprintf@val
  3819  000996  CFDD F09D          	movff	postdec2,sprintf@val+1
  3820  00099A  0E00               	movlw	0
  3821  00099C  BF9D               	btfsc	(sprintf@val+1)& (0+255),7,b
  3822  00099E  0EFF               	movlw	-1
  3823  0009A0  6F9E               	movwf	(sprintf@val+2)& (0+255),b
  3824  0009A2  6F9F               	movwf	(sprintf@val+3)& (0+255),b
  3825                           
  3826                           ; BSR set to: 0
  3827  0009A4  0E02               	movlw	2
  3828  0009A6  2794               	addwf	sprintf@ap& (0+255),f,b
  3829  0009A8  0E00               	movlw	0
  3830  0009AA  2395               	addwfc	(sprintf@ap+1)& (0+255),f,b
  3831                           
  3832                           ; BSR set to: 0
  3833                           ;doprnt.c: 1261: if((long)val < 0) {
  3834  0009AC  AF9F               	btfss	(sprintf@val+3)& (0+255),7,b
  3835  0009AE  D00A               	goto	l443
  3836                           
  3837                           ; BSR set to: 0
  3838                           ;doprnt.c: 1262: flag |= 0x03;
  3839  0009B0  0E03               	movlw	3
  3840  0009B2  13A2               	iorwf	sprintf@flag& (0+255),f,b
  3841                           
  3842                           ; BSR set to: 0
  3843                           ;doprnt.c: 1263: val = -val;
  3844  0009B4  1F9F               	comf	(sprintf@val+3)& (0+255),f,b
  3845  0009B6  1F9E               	comf	(sprintf@val+2)& (0+255),f,b
  3846  0009B8  1F9D               	comf	(sprintf@val+1)& (0+255),f,b
  3847  0009BA  6D9C               	negf	sprintf@val& (0+255),b
  3848  0009BC  0E00               	movlw	0
  3849  0009BE  239D               	addwfc	(sprintf@val+1)& (0+255),f,b
  3850  0009C0  239E               	addwfc	(sprintf@val+2)& (0+255),f,b
  3851  0009C2  239F               	addwfc	(sprintf@val+3)& (0+255),f,b
  3852  0009C4                     l443:
  3853                           
  3854                           ; BSR set to: 0
  3855                           ;doprnt.c: 1264: }
  3856                           ;doprnt.c: 1266: }
  3857                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  3858                           
  3859                           ; BSR set to: 0
  3860  0009C4  51AA               	movf	sprintf@prec& (0+255),w,b
  3861  0009C6  11AB               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3862  0009C8  A4D8               	btfss	status,2,c
  3863  0009CA  D008               	goto	l444
  3864                           
  3865                           ; BSR set to: 0
  3866  0009CC  519C               	movf	sprintf@val& (0+255),w,b
  3867  0009CE  119D               	iorwf	(sprintf@val+1)& (0+255),w,b
  3868  0009D0  119E               	iorwf	(sprintf@val+2)& (0+255),w,b
  3869  0009D2  119F               	iorwf	(sprintf@val+3)& (0+255),w,b
  3870  0009D4  A4D8               	btfss	status,2,c
  3871  0009D6  D002               	goto	l444
  3872                           
  3873                           ; BSR set to: 0
  3874                           ;doprnt.c: 1291: prec++;
  3875  0009D8  4BAA               	infsnz	sprintf@prec& (0+255),f,b
  3876  0009DA  2BAB               	incf	(sprintf@prec+1)& (0+255),f,b
  3877  0009DC                     l444:
  3878                           
  3879                           ; BSR set to: 0
  3880                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3881                           
  3882                           ; BSR set to: 0
  3883  0009DC  0E01               	movlw	1
  3884  0009DE  6FAC               	movwf	sprintf@c& (0+255),b
  3885  0009E0                     l5284:
  3886                           
  3887                           ; BSR set to: 0
  3888  0009E0  0E0A               	movlw	10
  3889  0009E2  19AC               	xorwf	sprintf@c& (0+255),w,b
  3890  0009E4  B4D8               	btfsc	status,2,c
  3891  0009E6  D01B               	goto	u6510
  3892                           
  3893                           ; BSR set to: 0
  3894                           ;doprnt.c: 1306: if(val < dpowers[c])
  3895                           
  3896                           ; BSR set to: 0
  3897                           
  3898                           ; BSR set to: 0
  3899  0009E8  51AC               	movf	sprintf@c& (0+255),w,b
  3900  0009EA  0D04               	mullw	4
  3901  0009EC  0E41               	movlw	low _dpowers
  3902  0009EE  24F3               	addwf	prodl,w,c
  3903  0009F0  6EF6               	movwf	tblptrl,c
  3904  0009F2  0EFE               	movlw	high _dpowers
  3905  0009F4  20F4               	addwfc	prodh,w,c
  3906  0009F6  6EF7               	movwf	tblptrh,c
  3907  0009F8                     	if	1	;There are 3 active tblptr bytes
  3908  0009F8  6AF8               	clrf	tblptru,c
  3909  0009FA  0E00               	movlw	low (__mediumconst shr (0+16))
  3910  0009FC  22F8               	addwfc	tblptru,f,c
  3911  0009FE                     	endif
  3912  0009FE  0009               	tblrd		*+
  3913  000A00  50F5               	movf	tablat,w,c
  3914  000A02  5D9C               	subwf	sprintf@val& (0+255),w,b
  3915  000A04  0009               	tblrd		*+
  3916  000A06  50F5               	movf	tablat,w,c
  3917  000A08  599D               	subwfb	(sprintf@val+1)& (0+255),w,b
  3918  000A0A  0009               	tblrd		*+
  3919  000A0C  50F5               	movf	tablat,w,c
  3920  000A0E  599E               	subwfb	(sprintf@val+2)& (0+255),w,b
  3921  000A10  0009               	tblrd		*+
  3922  000A12  50F5               	movf	tablat,w,c
  3923  000A14  599F               	subwfb	(sprintf@val+3)& (0+255),w,b
  3924  000A16  A0D8               	btfss	status,0,c
  3925  000A18  D002               	goto	u6510
  3926                           
  3927                           ; BSR set to: 0
  3928                           
  3929                           ; BSR set to: 0
  3930                           
  3931                           ; BSR set to: 0
  3932                           ;doprnt.c: 1307: break;
  3933  000A1A  2BAC               	incf	sprintf@c& (0+255),f,b
  3934  000A1C  D7E1               	goto	l5284
  3935  000A1E                     u6510:
  3936                           
  3937                           ; BSR set to: 0
  3938                           ;doprnt.c: 1339: if(c < prec)
  3939                           
  3940                           ; BSR set to: 0
  3941  000A1E  0E80               	movlw	128
  3942  000A20  BFAC               	btfsc	sprintf@c& (0+255),7,b
  3943  000A22  0E7F               	movlw	127
  3944  000A24  6F8A               	movwf	??_sprintf& (0+255),b
  3945  000A26  51AA               	movf	sprintf@prec& (0+255),w,b
  3946  000A28  5DAC               	subwf	sprintf@c& (0+255),w,b
  3947  000A2A  51AB               	movf	(sprintf@prec+1)& (0+255),w,b
  3948  000A2C  0A80               	xorlw	128
  3949  000A2E  598A               	subwfb	??_sprintf& (0+255),w,b
  3950  000A30  B0D8               	btfsc	status,0,c
  3951  000A32  D003               	goto	l448
  3952                           
  3953                           ; BSR set to: 0
  3954                           ;doprnt.c: 1340: c = prec;
  3955  000A34  C0AA  F0AC         	movff	sprintf@prec,sprintf@c
  3956  000A38  D010               	goto	l450
  3957  000A3A                     l448:
  3958                           
  3959                           ; BSR set to: 0
  3960                           ;doprnt.c: 1341: else if(prec < c)
  3961                           
  3962                           ; BSR set to: 0
  3963  000A3A  51AB               	movf	(sprintf@prec+1)& (0+255),w,b
  3964  000A3C  0A80               	xorlw	128
  3965  000A3E  6F8A               	movwf	??_sprintf& (0+255),b
  3966  000A40  51AC               	movf	sprintf@c& (0+255),w,b
  3967  000A42  5DAA               	subwf	sprintf@prec& (0+255),w,b
  3968  000A44  0E80               	movlw	128
  3969  000A46  BFAC               	btfsc	sprintf@c& (0+255),7,b
  3970  000A48  0E7F               	movlw	127
  3971  000A4A  598A               	subwfb	??_sprintf& (0+255),w,b
  3972  000A4C  B0D8               	btfsc	status,0,c
  3973  000A4E  D005               	goto	l450
  3974                           
  3975                           ; BSR set to: 0
  3976                           ;doprnt.c: 1342: prec = c;
  3977  000A50  51AC               	movf	sprintf@c& (0+255),w,b
  3978  000A52  6FAA               	movwf	sprintf@prec& (0+255),b
  3979  000A54  6BAB               	clrf	(sprintf@prec+1)& (0+255),b
  3980  000A56  BFAA               	btfsc	sprintf@prec& (0+255),7,b
  3981  000A58  07AB               	decf	(sprintf@prec+1)& (0+255),f,b
  3982  000A5A                     l450:
  3983                           
  3984                           ; BSR set to: 0
  3985                           ;doprnt.c: 1345: if(width && flag & 0x03)
  3986                           
  3987                           ; BSR set to: 0
  3988                           
  3989                           ; BSR set to: 0
  3990  000A5A  51A8               	movf	sprintf@width& (0+255),w,b
  3991  000A5C  11A9               	iorwf	(sprintf@width+1)& (0+255),w,b
  3992  000A5E  B4D8               	btfsc	status,2,c
  3993  000A60  D00D               	goto	l451
  3994                           
  3995                           ; BSR set to: 0
  3996  000A62  0E03               	movlw	3
  3997  000A64  15A2               	andwf	sprintf@flag& (0+255),w,b
  3998  000A66  6F8A               	movwf	??_sprintf& (0+255),b
  3999  000A68  0E00               	movlw	0
  4000  000A6A  15A3               	andwf	(sprintf@flag+1)& (0+255),w,b
  4001  000A6C  6F8B               	movwf	(??_sprintf+1)& (0+255),b
  4002  000A6E  518A               	movf	??_sprintf& (0+255),w,b
  4003  000A70  118B               	iorwf	(??_sprintf+1)& (0+255),w,b
  4004  000A72  B4D8               	btfsc	status,2,c
  4005  000A74  D003               	goto	l451
  4006                           
  4007                           ; BSR set to: 0
  4008                           ;doprnt.c: 1346: width--;
  4009  000A76  07A8               	decf	sprintf@width& (0+255),f,b
  4010  000A78  A0D8               	btfss	status,0,c
  4011  000A7A  07A9               	decf	(sprintf@width+1)& (0+255),f,b
  4012  000A7C                     l451:
  4013                           
  4014                           ; BSR set to: 0
  4015                           ;doprnt.c: 1348: if(flag & 0x4000) {
  4016                           
  4017                           ; BSR set to: 0
  4018  000A7C  ADA3               	btfss	(sprintf@flag+1)& (0+255),6,b
  4019  000A7E  D013               	goto	l454
  4020                           
  4021                           ; BSR set to: 0
  4022                           ;doprnt.c: 1349: if(width > prec)
  4023  000A80  51A8               	movf	sprintf@width& (0+255),w,b
  4024  000A82  5DAA               	subwf	sprintf@prec& (0+255),w,b
  4025  000A84  51AB               	movf	(sprintf@prec+1)& (0+255),w,b
  4026  000A86  0A80               	xorlw	128
  4027  000A88  6F8A               	movwf	??_sprintf& (0+255),b
  4028  000A8A  51A9               	movf	(sprintf@width+1)& (0+255),w,b
  4029  000A8C  0A80               	xorlw	128
  4030  000A8E  598A               	subwfb	??_sprintf& (0+255),w,b
  4031  000A90  B0D8               	btfsc	status,0,c
  4032  000A92  D005               	goto	l453
  4033                           
  4034                           ; BSR set to: 0
  4035                           ;doprnt.c: 1350: width -= prec;
  4036  000A94  51AA               	movf	sprintf@prec& (0+255),w,b
  4037  000A96  5FA8               	subwf	sprintf@width& (0+255),f,b
  4038  000A98  51AB               	movf	(sprintf@prec+1)& (0+255),w,b
  4039  000A9A  5BA9               	subwfb	(sprintf@width+1)& (0+255),f,b
  4040  000A9C  D004               	goto	l454
  4041  000A9E                     l453:
  4042                           
  4043                           ; BSR set to: 0
  4044                           ;doprnt.c: 1351: else
  4045                           ;doprnt.c: 1352: width = 0;
  4046                           
  4047                           ; BSR set to: 0
  4048  000A9E  0E00               	movlw	0
  4049  000AA0  6FA9               	movwf	(sprintf@width+1)& (0+255),b
  4050  000AA2  0E00               	movlw	0
  4051  000AA4  6FA8               	movwf	sprintf@width& (0+255),b
  4052  000AA6                     l454:
  4053                           
  4054                           ; BSR set to: 0
  4055                           ;doprnt.c: 1353: }
  4056                           ;doprnt.c: 1381: if(width > c)
  4057                           
  4058                           ; BSR set to: 0
  4059                           
  4060                           ; BSR set to: 0
  4061  000AA6  0E80               	movlw	128
  4062  000AA8  BFAC               	btfsc	sprintf@c& (0+255),7,b
  4063  000AAA  0E7F               	movlw	127
  4064  000AAC  6F8A               	movwf	??_sprintf& (0+255),b
  4065  000AAE  51A8               	movf	sprintf@width& (0+255),w,b
  4066  000AB0  5DAC               	subwf	sprintf@c& (0+255),w,b
  4067  000AB2  51A9               	movf	(sprintf@width+1)& (0+255),w,b
  4068  000AB4  0A80               	xorlw	128
  4069  000AB6  598A               	subwfb	??_sprintf& (0+255),w,b
  4070  000AB8  B0D8               	btfsc	status,0,c
  4071  000ABA  D007               	goto	l455
  4072                           
  4073                           ; BSR set to: 0
  4074                           ;doprnt.c: 1382: width -= c;
  4075  000ABC  51AC               	movf	sprintf@c& (0+255),w,b
  4076  000ABE  5FA8               	subwf	sprintf@width& (0+255),f,b
  4077  000AC0  0E00               	movlw	0
  4078  000AC2  BFAC               	btfsc	sprintf@c& (0+255),7,b
  4079  000AC4  0EFF               	movlw	255
  4080  000AC6  5BA9               	subwfb	(sprintf@width+1)& (0+255),f,b
  4081  000AC8  D004               	goto	l456
  4082  000ACA                     l455:
  4083                           
  4084                           ; BSR set to: 0
  4085                           ;doprnt.c: 1383: else
  4086                           ;doprnt.c: 1384: width = 0;
  4087                           
  4088                           ; BSR set to: 0
  4089  000ACA  0E00               	movlw	0
  4090  000ACC  6FA9               	movwf	(sprintf@width+1)& (0+255),b
  4091  000ACE  0E00               	movlw	0
  4092  000AD0  6FA8               	movwf	sprintf@width& (0+255),b
  4093  000AD2                     l456:
  4094                           
  4095                           ; BSR set to: 0
  4096                           ;doprnt.c: 1387: if(flag & 0x04) {
  4097                           
  4098                           ; BSR set to: 0
  4099  000AD2  A5A2               	btfss	sprintf@flag& (0+255),2,b
  4100  000AD4  D022               	goto	l457
  4101                           
  4102                           ; BSR set to: 0
  4103                           ;doprnt.c: 1392: if(flag & 0x03)
  4104  000AD6  0E03               	movlw	3
  4105  000AD8  15A2               	andwf	sprintf@flag& (0+255),w,b
  4106  000ADA  6F8A               	movwf	??_sprintf& (0+255),b
  4107  000ADC  0E00               	movlw	0
  4108  000ADE  15A3               	andwf	(sprintf@flag+1)& (0+255),w,b
  4109  000AE0  6F8B               	movwf	(??_sprintf+1)& (0+255),b
  4110  000AE2  518A               	movf	??_sprintf& (0+255),w,b
  4111  000AE4  118B               	iorwf	(??_sprintf+1)& (0+255),w,b
  4112  000AE6  B4D8               	btfsc	status,2,c
  4113  000AE8  D008               	goto	l458
  4114                           
  4115                           ; BSR set to: 0
  4116                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  4117  000AEA  C080  FFD9         	movff	sprintf@sp,fsr2l
  4118  000AEE  C081  FFDA         	movff	sprintf@sp+1,fsr2h
  4119  000AF2  0E2D               	movlw	45
  4120  000AF4  6EDF               	movwf	indf2,c
  4121                           
  4122                           ; BSR set to: 0
  4123  000AF6  4B80               	infsnz	sprintf@sp& (0+255),f,b
  4124  000AF8  2B81               	incf	(sprintf@sp+1)& (0+255),f,b
  4125  000AFA                     l458:
  4126                           
  4127                           ; BSR set to: 0
  4128                           ;doprnt.c: 1415: if(width)
  4129                           
  4130                           ; BSR set to: 0
  4131  000AFA  51A8               	movf	sprintf@width& (0+255),w,b
  4132  000AFC  11A9               	iorwf	(sprintf@width+1)& (0+255),w,b
  4133  000AFE  B4D8               	btfsc	status,2,c
  4134  000B00  D077               	goto	l467
  4135                           
  4136                           ; BSR set to: 0
  4137                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  4138                           
  4139                           ; BSR set to: 0
  4140                           
  4141                           ;doprnt.c: 1416: do
  4142  000B02  C080  FFD9         	movff	sprintf@sp,fsr2l
  4143  000B06  C081  FFDA         	movff	sprintf@sp+1,fsr2h
  4144  000B0A  0E30               	movlw	48
  4145  000B0C  6EDF               	movwf	indf2,c
  4146                           
  4147                           ; BSR set to: 0
  4148  000B0E  4B80               	infsnz	sprintf@sp& (0+255),f,b
  4149  000B10  2B81               	incf	(sprintf@sp+1)& (0+255),f,b
  4150                           
  4151                           ; BSR set to: 0
  4152                           ;doprnt.c: 1418: while(--width);
  4153  000B12  07A8               	decf	sprintf@width& (0+255),f,b
  4154  000B14  A0D8               	btfss	status,0,c
  4155  000B16  07A9               	decf	(sprintf@width+1)& (0+255),f,b
  4156  000B18  D7F0               	goto	l458
  4157  000B1A                     l457:
  4158                           
  4159                           ; BSR set to: 0
  4160                           ;doprnt.c: 1422: {
  4161                           ;doprnt.c: 1424: if(width
  4162                           ;doprnt.c: 1428: )
  4163                           
  4164                           ; BSR set to: 0
  4165  000B1A  51A8               	movf	sprintf@width& (0+255),w,b
  4166  000B1C  11A9               	iorwf	(sprintf@width+1)& (0+255),w,b
  4167  000B1E  B4D8               	btfsc	status,2,c
  4168  000B20  D00F               	goto	u6640
  4169  000B22                     u6630:
  4170                           
  4171                           ; BSR set to: 0
  4172                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  4173                           
  4174                           ; BSR set to: 0
  4175                           
  4176                           ;doprnt.c: 1429: do
  4177  000B22  C080  FFD9         	movff	sprintf@sp,fsr2l
  4178  000B26  C081  FFDA         	movff	sprintf@sp+1,fsr2h
  4179  000B2A  0E20               	movlw	32
  4180  000B2C  6EDF               	movwf	indf2,c
  4181                           
  4182                           ; BSR set to: 0
  4183  000B2E  4B80               	infsnz	sprintf@sp& (0+255),f,b
  4184  000B30  2B81               	incf	(sprintf@sp+1)& (0+255),f,b
  4185                           
  4186                           ; BSR set to: 0
  4187                           ;doprnt.c: 1431: while(--width);
  4188  000B32  07A8               	decf	sprintf@width& (0+255),f,b
  4189  000B34  A0D8               	btfss	status,0,c
  4190  000B36  07A9               	decf	(sprintf@width+1)& (0+255),f,b
  4191  000B38  51A8               	movf	sprintf@width& (0+255),w,b
  4192  000B3A  11A9               	iorwf	(sprintf@width+1)& (0+255),w,b
  4193  000B3C  A4D8               	btfss	status,2,c
  4194  000B3E  D7F1               	goto	u6630
  4195  000B40                     u6640:
  4196                           
  4197                           ; BSR set to: 0
  4198                           ;doprnt.c: 1438: if(flag & 0x03)
  4199                           
  4200                           ; BSR set to: 0
  4201                           
  4202                           ; BSR set to: 0
  4203  000B40  0E03               	movlw	3
  4204  000B42  15A2               	andwf	sprintf@flag& (0+255),w,b
  4205  000B44  6F8A               	movwf	??_sprintf& (0+255),b
  4206  000B46  0E00               	movlw	0
  4207  000B48  15A3               	andwf	(sprintf@flag+1)& (0+255),w,b
  4208  000B4A  6F8B               	movwf	(??_sprintf+1)& (0+255),b
  4209  000B4C  518A               	movf	??_sprintf& (0+255),w,b
  4210  000B4E  118B               	iorwf	(??_sprintf+1)& (0+255),w,b
  4211  000B50  B4D8               	btfsc	status,2,c
  4212  000B52  D04E               	goto	l467
  4213                           
  4214                           ; BSR set to: 0
  4215                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  4216  000B54  C080  FFD9         	movff	sprintf@sp,fsr2l
  4217  000B58  C081  FFDA         	movff	sprintf@sp+1,fsr2h
  4218  000B5C  0E2D               	movlw	45
  4219  000B5E  6EDF               	movwf	indf2,c
  4220  000B60  D045               	goto	l5358
  4221  000B62                     l5354:
  4222                           
  4223                           ; BSR set to: 0
  4224                           ;doprnt.c: 1478: {
  4225                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4226  000B62  C0AA  F08A         	movff	sprintf@prec,??_sprintf
  4227  000B66  C0AB  F08B         	movff	sprintf@prec+1,??_sprintf+1
  4228  000B6A  90D8               	bcf	status,0,c
  4229  000B6C  378A               	rlcf	??_sprintf& (0+255),f,b
  4230  000B6E  378B               	rlcf	(??_sprintf+1)& (0+255),f,b
  4231  000B70  90D8               	bcf	status,0,c
  4232  000B72  378A               	rlcf	??_sprintf& (0+255),f,b
  4233  000B74  378B               	rlcf	(??_sprintf+1)& (0+255),f,b
  4234  000B76  0E41               	movlw	low _dpowers
  4235  000B78  258A               	addwf	??_sprintf& (0+255),w,b
  4236  000B7A  6EF6               	movwf	tblptrl,c
  4237  000B7C  0EFE               	movlw	high _dpowers
  4238  000B7E  218B               	addwfc	(??_sprintf+1)& (0+255),w,b
  4239  000B80  6EF7               	movwf	tblptrh,c
  4240  000B82                     	if	1	;There are 3 active tblptr bytes
  4241  000B82  6AF8               	clrf	tblptru,c
  4242  000B84  0E00               	movlw	low (__mediumconst shr (0+16))
  4243  000B86  22F8               	addwfc	tblptru,f,c
  4244  000B88                     	endif
  4245  000B88  0009               	tblrd		*+
  4246  000B8A  CFF5 F019          	movff	tablat,___lldiv@divisor
  4247  000B8E  0009               	tblrd		*+
  4248  000B90  CFF5 F01A          	movff	tablat,___lldiv@divisor+1
  4249  000B94  0009               	tblrd		*+
  4250  000B96  CFF5 F01B          	movff	tablat,___lldiv@divisor+2
  4251  000B9A  000A               	tblrd		*-
  4252  000B9C  CFF5 F01C          	movff	tablat,___lldiv@divisor+3
  4253  000BA0  C09C  F015         	movff	sprintf@val,___lldiv@dividend
  4254  000BA4  C09D  F016         	movff	sprintf@val+1,___lldiv@dividend+1
  4255  000BA8  C09E  F017         	movff	sprintf@val+2,___lldiv@dividend+2
  4256  000BAC  C09F  F018         	movff	sprintf@val+3,___lldiv@dividend+3
  4257  000BB0  EC2D  F015         	call	___lldiv	;wreg free
  4258  000BB4  C015  F022         	movff	?___lldiv,___llmod@dividend
  4259  000BB8  C016  F023         	movff	?___lldiv+1,___llmod@dividend+1
  4260  000BBC  C017  F024         	movff	?___lldiv+2,___llmod@dividend+2
  4261  000BC0  C018  F025         	movff	?___lldiv+3,___llmod@dividend+3
  4262  000BC4  0E0A               	movlw	10
  4263  000BC6  6E26               	movwf	___llmod@divisor,c
  4264  000BC8  0E00               	movlw	0
  4265  000BCA  6E27               	movwf	___llmod@divisor+1,c
  4266  000BCC  0E00               	movlw	0
  4267  000BCE  6E28               	movwf	___llmod@divisor+2,c
  4268  000BD0  0E00               	movlw	0
  4269  000BD2  6E29               	movwf	___llmod@divisor+3,c
  4270  000BD4  EC62  F016         	call	___llmod	;wreg free
  4271  000BD8  5022               	movf	?___llmod,w,c
  4272  000BDA  0F30               	addlw	48
  4273  000BDC  0100               	movlb	0	; () banked
  4274  000BDE  6FAC               	movwf	sprintf@c& (0+255),b
  4275                           
  4276                           ; BSR set to: 0
  4277                           ;doprnt.c: 1523: }
  4278                           ;doprnt.c: 1524: ((*sp++ = (c)));
  4279  000BE0  C080  FFD9         	movff	sprintf@sp,fsr2l
  4280  000BE4  C081  FFDA         	movff	sprintf@sp+1,fsr2h
  4281  000BE8  C0AC  FFDF         	movff	sprintf@c,indf2
  4282  000BEC                     l5358:
  4283                           
  4284                           ; BSR set to: 0
  4285  000BEC  4B80               	infsnz	sprintf@sp& (0+255),f,b
  4286  000BEE  2B81               	incf	(sprintf@sp+1)& (0+255),f,b
  4287  000BF0                     l467:
  4288                           
  4289                           ; BSR set to: 0
  4290                           
  4291                           ; BSR set to: 0
  4292  000BF0  07AA               	decf	sprintf@prec& (0+255),f,b
  4293  000BF2  A0D8               	btfss	status,0,c
  4294  000BF4  07AB               	decf	(sprintf@prec+1)& (0+255),f,b
  4295  000BF6  29AA               	incf	sprintf@prec& (0+255),w,b
  4296  000BF8  E1B4               	bnz	l5354
  4297  000BFA  29AB               	incf	(sprintf@prec+1)& (0+255),w,b
  4298  000BFC  A4D8               	btfss	status,2,c
  4299  000BFE  D7B1               	goto	l468
  4300  000C00                     u6660:
  4301                           
  4302                           ; BSR set to: 0
  4303                           
  4304                           ; BSR set to: 0
  4305                           
  4306                           ; BSR set to: 0
  4307  000C00  C082  FFF6         	movff	sprintf@f,tblptrl
  4308  000C04  C083  FFF7         	movff	sprintf@f+1,tblptrh
  4309  000C08  4B82               	infsnz	sprintf@f& (0+255),f,b
  4310  000C0A  2B83               	incf	(sprintf@f+1)& (0+255),f,b
  4311  000C0C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4312  000C0C  6AF8               	clrf	tblptru,c
  4313  000C0E                     	endif
  4314  000C0E                     	if	0	;tblptru may be non-zero
  4315  000C0E                     	endif
  4316  000C0E  0008               	tblrd		*
  4317  000C10  CFF5 F0AC          	movff	tablat,sprintf@c
  4318  000C14  51AC               	movf	sprintf@c& (0+255),w,b
  4319  000C16  A4D8               	btfss	status,2,c
  4320  000C18  EF10  F000         	goto	l356
  4321  000C1C                     u6670:
  4322                           
  4323                           ; BSR set to: 0
  4324                           ;doprnt.c: 1538: *sp = 0;
  4325                           
  4326                           ; BSR set to: 0
  4327                           
  4328                           ;doprnt.c: 1525: }
  4329                           ;doprnt.c: 1533: }
  4330                           ;doprnt.c: 1535: alldone:
  4331                           
  4332                           ; BSR set to: 0
  4333  000C1C  C080  FFD9         	movff	sprintf@sp,fsr2l
  4334  000C20  C081  FFDA         	movff	sprintf@sp+1,fsr2h
  4335  000C24  0E00               	movlw	0
  4336  000C26  6EDF               	movwf	indf2,c
  4337  000C28  0012               	return	
  4338  000C2A                     __end_of_sprintf:
  4339                           	opt stack 0
  4340                           tblptru	equ	0xFF8
  4341                           tblptrh	equ	0xFF7
  4342                           tblptrl	equ	0xFF6
  4343                           tablat	equ	0xFF5
  4344                           prodh	equ	0xFF4
  4345                           prodl	equ	0xFF3
  4346                           postinc0	equ	0xFEE
  4347                           wreg	equ	0xFE8
  4348                           indf1	equ	0xFE7
  4349                           postdec1	equ	0xFE5
  4350                           fsr1h	equ	0xFE2
  4351                           fsr1l	equ	0xFE1
  4352                           indf2	equ	0xFDF
  4353                           postinc2	equ	0xFDE
  4354                           postdec2	equ	0xFDD
  4355                           fsr2h	equ	0xFDA
  4356                           fsr2l	equ	0xFD9
  4357                           status	equ	0xFD8
  4358                           
  4359 ;; *************** function _scale *****************
  4360 ;; Defined at:
  4361 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  4362 ;; Parameters:    Size  Location     Type
  4363 ;;  scl             1    wreg     char 
  4364 ;; Auto vars:     Size  Location     Type
  4365 ;;  scl             1   67[COMRAM] char 
  4366 ;; Return value:  Size  Location     Type
  4367 ;;                  4   59[COMRAM] char 
  4368 ;; Registers used:
  4369 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4370 ;; Tracked objects:
  4371 ;;		On entry : 0/0
  4372 ;;		On exit  : 0/0
  4373 ;;		Unchanged: 0/0
  4374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4375 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4376 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4377 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4378 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4379 ;;Total ram usage:        9 bytes
  4380 ;; Hardware stack levels used:    1
  4381 ;; Hardware stack levels required when called:    4
  4382 ;; This function calls:
  4383 ;;		___awdiv
  4384 ;;		___awmod
  4385 ;;		___flmul
  4386 ;; This function is called by:
  4387 ;;		_sprintf
  4388 ;; This function uses a non-reentrant model
  4389 ;;
  4390                           
  4391                           	psect	text2
  4392  0010FE                     __ptext2:
  4393                           	opt stack 0
  4394  0010FE                     _scale:
  4395                           	opt stack 25
  4396                           
  4397                           ; BSR set to: 0
  4398                           ;incstack = 0
  4399                           ;scale@scl stored from wreg
  4400  0010FE  6E44               	movwf	scale@scl,c
  4401                           
  4402                           ;doprnt.c: 428: if(scl < 0) {
  4403  001100  AE44               	btfss	scale@scl,7,c
  4404  001102  D11F               	goto	l345
  4405                           
  4406                           ;doprnt.c: 429: scl = -scl;
  4407  001104  6C44               	negf	scale@scl,c
  4408                           
  4409                           ;doprnt.c: 430: if(scl>=110)
  4410  001106  5044               	movf	scale@scl,w,c
  4411  001108  0A80               	xorlw	128
  4412  00110A  0F12               	addlw	-238
  4413  00110C  A0D8               	btfss	status,0,c
  4414  00110E  D0A1               	goto	l346
  4415                           
  4416                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4417  001110  0E00               	movlw	0
  4418  001112  6E1E               	movwf	___awdiv@divisor+1,c
  4419  001114  0E0A               	movlw	10
  4420  001116  6E1D               	movwf	___awdiv@divisor,c
  4421  001118  0E00               	movlw	0
  4422  00111A  6E18               	movwf	___awmod@divisor+1,c
  4423  00111C  0E64               	movlw	100
  4424  00111E  6E17               	movwf	___awmod@divisor,c
  4425  001120  5044               	movf	scale@scl,w,c
  4426  001122  6E15               	movwf	___awmod@dividend,c
  4427  001124  6A16               	clrf	___awmod@dividend+1,c
  4428  001126  BE15               	btfsc	___awmod@dividend,7,c
  4429  001128  0616               	decf	___awmod@dividend+1,f,c
  4430  00112A  EC2A  F016         	call	___awmod	;wreg free
  4431  00112E  C015  F01B         	movff	?___awmod,___awdiv@dividend
  4432  001132  C016  F01C         	movff	?___awmod+1,___awdiv@dividend+1
  4433  001136  ECEB  F014         	call	___awdiv	;wreg free
  4434  00113A  90D8               	bcf	status,0,c
  4435  00113C  361B               	rlcf	?___awdiv,f,c
  4436  00113E  361C               	rlcf	?___awdiv+1,f,c
  4437  001140  90D8               	bcf	status,0,c
  4438  001142  361B               	rlcf	?___awdiv,f,c
  4439  001144  361C               	rlcf	?___awdiv+1,f,c
  4440  001146  0E24               	movlw	36
  4441  001148  261B               	addwf	?___awdiv,f,c
  4442  00114A  0E00               	movlw	0
  4443  00114C  221C               	addwfc	?___awdiv+1,f,c
  4444  00114E  0E0D               	movlw	low __npowers_
  4445  001150  241B               	addwf	?___awdiv,w,c
  4446  001152  6EF6               	movwf	tblptrl,c
  4447  001154  0EFE               	movlw	high __npowers_
  4448  001156  201C               	addwfc	?___awdiv+1,w,c
  4449  001158  6EF7               	movwf	tblptrh,c
  4450  00115A                     	if	1	;There are 3 active tblptr bytes
  4451  00115A  6AF8               	clrf	tblptru,c
  4452  00115C  0E00               	movlw	low (__mediumconst shr (0+16))
  4453  00115E  22F8               	addwfc	tblptru,f,c
  4454  001160                     	endif
  4455  001160  0009               	tblrd		*+
  4456  001162  CFF5 F027          	movff	tablat,___flmul@a
  4457  001166  0009               	tblrd		*+
  4458  001168  CFF5 F028          	movff	tablat,___flmul@a+1
  4459  00116C  0009               	tblrd		*+
  4460  00116E  CFF5 F029          	movff	tablat,___flmul@a+2
  4461  001172  000A               	tblrd		*-
  4462  001174  CFF5 F02A          	movff	tablat,___flmul@a+3
  4463  001178  0E00               	movlw	0
  4464  00117A  6E1E               	movwf	___awdiv@divisor+1,c
  4465  00117C  0E64               	movlw	100
  4466  00117E  6E1D               	movwf	___awdiv@divisor,c
  4467  001180  5044               	movf	scale@scl,w,c
  4468  001182  6E1B               	movwf	___awdiv@dividend,c
  4469  001184  6A1C               	clrf	___awdiv@dividend+1,c
  4470  001186  BE1B               	btfsc	___awdiv@dividend,7,c
  4471  001188  061C               	decf	___awdiv@dividend+1,f,c
  4472  00118A  ECEB  F014         	call	___awdiv	;wreg free
  4473  00118E  90D8               	bcf	status,0,c
  4474  001190  361B               	rlcf	?___awdiv,f,c
  4475  001192  361C               	rlcf	?___awdiv+1,f,c
  4476  001194  90D8               	bcf	status,0,c
  4477  001196  361B               	rlcf	?___awdiv,f,c
  4478  001198  361C               	rlcf	?___awdiv+1,f,c
  4479  00119A  0E48               	movlw	72
  4480  00119C  261B               	addwf	?___awdiv,f,c
  4481  00119E  0E00               	movlw	0
  4482  0011A0  221C               	addwfc	?___awdiv+1,f,c
  4483  0011A2  0E0D               	movlw	low __npowers_
  4484  0011A4  241B               	addwf	?___awdiv,w,c
  4485  0011A6  6EF6               	movwf	tblptrl,c
  4486  0011A8  0EFE               	movlw	high __npowers_
  4487  0011AA  201C               	addwfc	?___awdiv+1,w,c
  4488  0011AC  6EF7               	movwf	tblptrh,c
  4489  0011AE                     	if	1	;There are 3 active tblptr bytes
  4490  0011AE  6AF8               	clrf	tblptru,c
  4491  0011B0  0E00               	movlw	low (__mediumconst shr (0+16))
  4492  0011B2  22F8               	addwfc	tblptru,f,c
  4493  0011B4                     	endif
  4494  0011B4  0009               	tblrd		*+
  4495  0011B6  CFF5 F023          	movff	tablat,___flmul@b
  4496  0011BA  0009               	tblrd		*+
  4497  0011BC  CFF5 F024          	movff	tablat,___flmul@b+1
  4498  0011C0  0009               	tblrd		*+
  4499  0011C2  CFF5 F025          	movff	tablat,___flmul@b+2
  4500  0011C6  000A               	tblrd		*-
  4501  0011C8  CFF5 F026          	movff	tablat,___flmul@b+3
  4502  0011CC  ECBF  F00A         	call	___flmul	;wreg free
  4503  0011D0  C023  F040         	movff	?___flmul,_scale$1784
  4504  0011D4  C024  F041         	movff	?___flmul+1,_scale$1784+1
  4505  0011D8  C025  F042         	movff	?___flmul+2,_scale$1784+2
  4506  0011DC  C026  F043         	movff	?___flmul+3,_scale$1784+3
  4507                           
  4508                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4509  0011E0  C040  F023         	movff	_scale$1784,___flmul@b
  4510  0011E4  C041  F024         	movff	_scale$1784+1,___flmul@b+1
  4511  0011E8  C042  F025         	movff	_scale$1784+2,___flmul@b+2
  4512  0011EC  C043  F026         	movff	_scale$1784+3,___flmul@b+3
  4513  0011F0  0E00               	movlw	0
  4514  0011F2  6E18               	movwf	___awmod@divisor+1,c
  4515  0011F4  0E0A               	movlw	10
  4516  0011F6  6E17               	movwf	___awmod@divisor,c
  4517  0011F8  5044               	movf	scale@scl,w,c
  4518  0011FA  6E15               	movwf	___awmod@dividend,c
  4519  0011FC  6A16               	clrf	___awmod@dividend+1,c
  4520  0011FE  BE15               	btfsc	___awmod@dividend,7,c
  4521  001200  0616               	decf	___awmod@dividend+1,f,c
  4522  001202  EC2A  F016         	call	___awmod	;wreg free
  4523  001206  90D8               	bcf	status,0,c
  4524  001208  3615               	rlcf	?___awmod,f,c
  4525  00120A  3616               	rlcf	?___awmod+1,f,c
  4526  00120C  90D8               	bcf	status,0,c
  4527  00120E  3615               	rlcf	?___awmod,f,c
  4528  001210  3616               	rlcf	?___awmod+1,f,c
  4529  001212  0E0D               	movlw	low __npowers_
  4530  001214  2415               	addwf	?___awmod,w,c
  4531  001216  6EF6               	movwf	tblptrl,c
  4532  001218  0EFE               	movlw	high __npowers_
  4533  00121A  2016               	addwfc	?___awmod+1,w,c
  4534  00121C  6EF7               	movwf	tblptrh,c
  4535  00121E                     	if	1	;There are 3 active tblptr bytes
  4536  00121E  6AF8               	clrf	tblptru,c
  4537  001220  0E00               	movlw	low (__mediumconst shr (0+16))
  4538  001222  22F8               	addwfc	tblptru,f,c
  4539  001224                     	endif
  4540  001224  0009               	tblrd		*+
  4541  001226  CFF5 F027          	movff	tablat,___flmul@a
  4542  00122A  0009               	tblrd		*+
  4543  00122C  CFF5 F028          	movff	tablat,___flmul@a+1
  4544  001230  0009               	tblrd		*+
  4545  001232  CFF5 F029          	movff	tablat,___flmul@a+2
  4546  001236  000A               	tblrd		*-
  4547  001238  CFF5 F02A          	movff	tablat,___flmul@a+3
  4548  00123C  ECBF  F00A         	call	___flmul	;wreg free
  4549  001240  C023  F03C         	movff	?___flmul,?_scale
  4550  001244  C024  F03D         	movff	?___flmul+1,?_scale+1
  4551  001248  C025  F03E         	movff	?___flmul+2,?_scale+2
  4552  00124C  C026  F03F         	movff	?___flmul+3,?_scale+3
  4553  001250  0012               	return	
  4554  001252                     l346:
  4555                           
  4556                           ;doprnt.c: 432: else if(scl > 10)
  4557  001252  5044               	movf	scale@scl,w,c
  4558  001254  0A80               	xorlw	128
  4559  001256  0F75               	addlw	-139
  4560  001258  A0D8               	btfss	status,0,c
  4561  00125A  D05B               	goto	l349
  4562                           
  4563                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  4564  00125C  0E00               	movlw	0
  4565  00125E  6E1E               	movwf	___awdiv@divisor+1,c
  4566  001260  0E0A               	movlw	10
  4567  001262  6E1D               	movwf	___awdiv@divisor,c
  4568  001264  5044               	movf	scale@scl,w,c
  4569  001266  6E1B               	movwf	___awdiv@dividend,c
  4570  001268  6A1C               	clrf	___awdiv@dividend+1,c
  4571  00126A  BE1B               	btfsc	___awdiv@dividend,7,c
  4572  00126C  061C               	decf	___awdiv@dividend+1,f,c
  4573  00126E  ECEB  F014         	call	___awdiv	;wreg free
  4574  001272  90D8               	bcf	status,0,c
  4575  001274  361B               	rlcf	?___awdiv,f,c
  4576  001276  361C               	rlcf	?___awdiv+1,f,c
  4577  001278  90D8               	bcf	status,0,c
  4578  00127A  361B               	rlcf	?___awdiv,f,c
  4579  00127C  361C               	rlcf	?___awdiv+1,f,c
  4580  00127E  0E24               	movlw	36
  4581  001280  261B               	addwf	?___awdiv,f,c
  4582  001282  0E00               	movlw	0
  4583  001284  221C               	addwfc	?___awdiv+1,f,c
  4584  001286  0E0D               	movlw	low __npowers_
  4585  001288  241B               	addwf	?___awdiv,w,c
  4586  00128A  6EF6               	movwf	tblptrl,c
  4587  00128C  0EFE               	movlw	high __npowers_
  4588  00128E  201C               	addwfc	?___awdiv+1,w,c
  4589  001290  6EF7               	movwf	tblptrh,c
  4590  001292                     	if	1	;There are 3 active tblptr bytes
  4591  001292  6AF8               	clrf	tblptru,c
  4592  001294  0E00               	movlw	low (__mediumconst shr (0+16))
  4593  001296  22F8               	addwfc	tblptru,f,c
  4594  001298                     	endif
  4595  001298  0009               	tblrd		*+
  4596  00129A  CFF5 F023          	movff	tablat,___flmul@b
  4597  00129E  0009               	tblrd		*+
  4598  0012A0  CFF5 F024          	movff	tablat,___flmul@b+1
  4599  0012A4  0009               	tblrd		*+
  4600  0012A6  CFF5 F025          	movff	tablat,___flmul@b+2
  4601  0012AA  000A               	tblrd		*-
  4602  0012AC  CFF5 F026          	movff	tablat,___flmul@b+3
  4603  0012B0  0E00               	movlw	0
  4604  0012B2  6E18               	movwf	___awmod@divisor+1,c
  4605  0012B4  0E0A               	movlw	10
  4606  0012B6  6E17               	movwf	___awmod@divisor,c
  4607  0012B8  5044               	movf	scale@scl,w,c
  4608  0012BA  6E15               	movwf	___awmod@dividend,c
  4609  0012BC  6A16               	clrf	___awmod@dividend+1,c
  4610  0012BE  BE15               	btfsc	___awmod@dividend,7,c
  4611  0012C0  0616               	decf	___awmod@dividend+1,f,c
  4612  0012C2  EC2A  F016         	call	___awmod	;wreg free
  4613  0012C6  90D8               	bcf	status,0,c
  4614  0012C8  3615               	rlcf	?___awmod,f,c
  4615  0012CA  3616               	rlcf	?___awmod+1,f,c
  4616  0012CC  90D8               	bcf	status,0,c
  4617  0012CE  3615               	rlcf	?___awmod,f,c
  4618  0012D0  3616               	rlcf	?___awmod+1,f,c
  4619  0012D2  0E0D               	movlw	low __npowers_
  4620  0012D4  2415               	addwf	?___awmod,w,c
  4621  0012D6  6EF6               	movwf	tblptrl,c
  4622  0012D8  0EFE               	movlw	high __npowers_
  4623  0012DA  2016               	addwfc	?___awmod+1,w,c
  4624  0012DC  6EF7               	movwf	tblptrh,c
  4625  0012DE                     	if	1	;There are 3 active tblptr bytes
  4626  0012DE  6AF8               	clrf	tblptru,c
  4627  0012E0  0E00               	movlw	low (__mediumconst shr (0+16))
  4628  0012E2  22F8               	addwfc	tblptru,f,c
  4629  0012E4                     	endif
  4630  0012E4  0009               	tblrd		*+
  4631  0012E6  CFF5 F027          	movff	tablat,___flmul@a
  4632  0012EA  0009               	tblrd		*+
  4633  0012EC  CFF5 F028          	movff	tablat,___flmul@a+1
  4634  0012F0  0009               	tblrd		*+
  4635  0012F2  CFF5 F029          	movff	tablat,___flmul@a+2
  4636  0012F6  000A               	tblrd		*-
  4637  0012F8  CFF5 F02A          	movff	tablat,___flmul@a+3
  4638  0012FC  ECBF  F00A         	call	___flmul	;wreg free
  4639  001300  C023  F03C         	movff	?___flmul,?_scale
  4640  001304  C024  F03D         	movff	?___flmul+1,?_scale+1
  4641  001308  C025  F03E         	movff	?___flmul+2,?_scale+2
  4642  00130C  C026  F03F         	movff	?___flmul+3,?_scale+3
  4643  001310  0012               	return	
  4644  001312                     l349:
  4645                           
  4646                           ;doprnt.c: 434: return _npowers_[scl];
  4647  001312  5044               	movf	scale@scl,w,c
  4648  001314  0D04               	mullw	4
  4649  001316  0E0D               	movlw	low __npowers_
  4650  001318  24F3               	addwf	prodl,w,c
  4651  00131A  6EF6               	movwf	tblptrl,c
  4652  00131C  0EFE               	movlw	high __npowers_
  4653  00131E  20F4               	addwfc	prodh,w,c
  4654  001320  6EF7               	movwf	tblptrh,c
  4655  001322                     	if	1	;There are 3 active tblptr bytes
  4656  001322  6AF8               	clrf	tblptru,c
  4657  001324  0E00               	movlw	low (__mediumconst shr (0+16))
  4658  001326  22F8               	addwfc	tblptru,f,c
  4659  001328                     	endif
  4660  001328  0009               	tblrd		*+
  4661  00132A  CFF5 F03C          	movff	tablat,?_scale
  4662  00132E  0009               	tblrd		*+
  4663  001330  CFF5 F03D          	movff	tablat,?_scale+1
  4664  001334  0009               	tblrd		*+
  4665  001336  CFF5 F03E          	movff	tablat,?_scale+2
  4666  00133A  000A               	tblrd		*-
  4667  00133C  CFF5 F03F          	movff	tablat,?_scale+3
  4668  001340  0012               	return	
  4669  001342                     l345:
  4670                           
  4671                           ;doprnt.c: 435: }
  4672                           ;doprnt.c: 436: if(scl>=110)
  4673  001342  5044               	movf	scale@scl,w,c
  4674  001344  0A80               	xorlw	128
  4675  001346  0F12               	addlw	-238
  4676  001348  A0D8               	btfss	status,0,c
  4677  00134A  D0A1               	goto	l350
  4678                           
  4679                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4680  00134C  0E00               	movlw	0
  4681  00134E  6E1E               	movwf	___awdiv@divisor+1,c
  4682  001350  0E0A               	movlw	10
  4683  001352  6E1D               	movwf	___awdiv@divisor,c
  4684  001354  0E00               	movlw	0
  4685  001356  6E18               	movwf	___awmod@divisor+1,c
  4686  001358  0E64               	movlw	100
  4687  00135A  6E17               	movwf	___awmod@divisor,c
  4688  00135C  5044               	movf	scale@scl,w,c
  4689  00135E  6E15               	movwf	___awmod@dividend,c
  4690  001360  6A16               	clrf	___awmod@dividend+1,c
  4691  001362  BE15               	btfsc	___awmod@dividend,7,c
  4692  001364  0616               	decf	___awmod@dividend+1,f,c
  4693  001366  EC2A  F016         	call	___awmod	;wreg free
  4694  00136A  C015  F01B         	movff	?___awmod,___awdiv@dividend
  4695  00136E  C016  F01C         	movff	?___awmod+1,___awdiv@dividend+1
  4696  001372  ECEB  F014         	call	___awdiv	;wreg free
  4697  001376  90D8               	bcf	status,0,c
  4698  001378  361B               	rlcf	?___awdiv,f,c
  4699  00137A  361C               	rlcf	?___awdiv+1,f,c
  4700  00137C  90D8               	bcf	status,0,c
  4701  00137E  361B               	rlcf	?___awdiv,f,c
  4702  001380  361C               	rlcf	?___awdiv+1,f,c
  4703  001382  0E24               	movlw	36
  4704  001384  261B               	addwf	?___awdiv,f,c
  4705  001386  0E00               	movlw	0
  4706  001388  221C               	addwfc	?___awdiv+1,f,c
  4707  00138A  0ED9               	movlw	low __powers_
  4708  00138C  241B               	addwf	?___awdiv,w,c
  4709  00138E  6EF6               	movwf	tblptrl,c
  4710  001390  0EFD               	movlw	high __powers_
  4711  001392  201C               	addwfc	?___awdiv+1,w,c
  4712  001394  6EF7               	movwf	tblptrh,c
  4713  001396                     	if	1	;There are 3 active tblptr bytes
  4714  001396  6AF8               	clrf	tblptru,c
  4715  001398  0E00               	movlw	low (__mediumconst shr (0+16))
  4716  00139A  22F8               	addwfc	tblptru,f,c
  4717  00139C                     	endif
  4718  00139C  0009               	tblrd		*+
  4719  00139E  CFF5 F027          	movff	tablat,___flmul@a
  4720  0013A2  0009               	tblrd		*+
  4721  0013A4  CFF5 F028          	movff	tablat,___flmul@a+1
  4722  0013A8  0009               	tblrd		*+
  4723  0013AA  CFF5 F029          	movff	tablat,___flmul@a+2
  4724  0013AE  000A               	tblrd		*-
  4725  0013B0  CFF5 F02A          	movff	tablat,___flmul@a+3
  4726  0013B4  0E00               	movlw	0
  4727  0013B6  6E1E               	movwf	___awdiv@divisor+1,c
  4728  0013B8  0E64               	movlw	100
  4729  0013BA  6E1D               	movwf	___awdiv@divisor,c
  4730  0013BC  5044               	movf	scale@scl,w,c
  4731  0013BE  6E1B               	movwf	___awdiv@dividend,c
  4732  0013C0  6A1C               	clrf	___awdiv@dividend+1,c
  4733  0013C2  BE1B               	btfsc	___awdiv@dividend,7,c
  4734  0013C4  061C               	decf	___awdiv@dividend+1,f,c
  4735  0013C6  ECEB  F014         	call	___awdiv	;wreg free
  4736  0013CA  90D8               	bcf	status,0,c
  4737  0013CC  361B               	rlcf	?___awdiv,f,c
  4738  0013CE  361C               	rlcf	?___awdiv+1,f,c
  4739  0013D0  90D8               	bcf	status,0,c
  4740  0013D2  361B               	rlcf	?___awdiv,f,c
  4741  0013D4  361C               	rlcf	?___awdiv+1,f,c
  4742  0013D6  0E48               	movlw	72
  4743  0013D8  261B               	addwf	?___awdiv,f,c
  4744  0013DA  0E00               	movlw	0
  4745  0013DC  221C               	addwfc	?___awdiv+1,f,c
  4746  0013DE  0ED9               	movlw	low __powers_
  4747  0013E0  241B               	addwf	?___awdiv,w,c
  4748  0013E2  6EF6               	movwf	tblptrl,c
  4749  0013E4  0EFD               	movlw	high __powers_
  4750  0013E6  201C               	addwfc	?___awdiv+1,w,c
  4751  0013E8  6EF7               	movwf	tblptrh,c
  4752  0013EA                     	if	1	;There are 3 active tblptr bytes
  4753  0013EA  6AF8               	clrf	tblptru,c
  4754  0013EC  0E00               	movlw	low (__mediumconst shr (0+16))
  4755  0013EE  22F8               	addwfc	tblptru,f,c
  4756  0013F0                     	endif
  4757  0013F0  0009               	tblrd		*+
  4758  0013F2  CFF5 F023          	movff	tablat,___flmul@b
  4759  0013F6  0009               	tblrd		*+
  4760  0013F8  CFF5 F024          	movff	tablat,___flmul@b+1
  4761  0013FC  0009               	tblrd		*+
  4762  0013FE  CFF5 F025          	movff	tablat,___flmul@b+2
  4763  001402  000A               	tblrd		*-
  4764  001404  CFF5 F026          	movff	tablat,___flmul@b+3
  4765  001408  ECBF  F00A         	call	___flmul	;wreg free
  4766  00140C  C023  F040         	movff	?___flmul,_scale$1784
  4767  001410  C024  F041         	movff	?___flmul+1,_scale$1784+1
  4768  001414  C025  F042         	movff	?___flmul+2,_scale$1784+2
  4769  001418  C026  F043         	movff	?___flmul+3,_scale$1784+3
  4770                           
  4771                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4772  00141C  C040  F023         	movff	_scale$1784,___flmul@b
  4773  001420  C041  F024         	movff	_scale$1784+1,___flmul@b+1
  4774  001424  C042  F025         	movff	_scale$1784+2,___flmul@b+2
  4775  001428  C043  F026         	movff	_scale$1784+3,___flmul@b+3
  4776  00142C  0E00               	movlw	0
  4777  00142E  6E18               	movwf	___awmod@divisor+1,c
  4778  001430  0E0A               	movlw	10
  4779  001432  6E17               	movwf	___awmod@divisor,c
  4780  001434  5044               	movf	scale@scl,w,c
  4781  001436  6E15               	movwf	___awmod@dividend,c
  4782  001438  6A16               	clrf	___awmod@dividend+1,c
  4783  00143A  BE15               	btfsc	___awmod@dividend,7,c
  4784  00143C  0616               	decf	___awmod@dividend+1,f,c
  4785  00143E  EC2A  F016         	call	___awmod	;wreg free
  4786  001442  90D8               	bcf	status,0,c
  4787  001444  3615               	rlcf	?___awmod,f,c
  4788  001446  3616               	rlcf	?___awmod+1,f,c
  4789  001448  90D8               	bcf	status,0,c
  4790  00144A  3615               	rlcf	?___awmod,f,c
  4791  00144C  3616               	rlcf	?___awmod+1,f,c
  4792  00144E  0ED9               	movlw	low __powers_
  4793  001450  2415               	addwf	?___awmod,w,c
  4794  001452  6EF6               	movwf	tblptrl,c
  4795  001454  0EFD               	movlw	high __powers_
  4796  001456  2016               	addwfc	?___awmod+1,w,c
  4797  001458  6EF7               	movwf	tblptrh,c
  4798  00145A                     	if	1	;There are 3 active tblptr bytes
  4799  00145A  6AF8               	clrf	tblptru,c
  4800  00145C  0E00               	movlw	low (__mediumconst shr (0+16))
  4801  00145E  22F8               	addwfc	tblptru,f,c
  4802  001460                     	endif
  4803  001460  0009               	tblrd		*+
  4804  001462  CFF5 F027          	movff	tablat,___flmul@a
  4805  001466  0009               	tblrd		*+
  4806  001468  CFF5 F028          	movff	tablat,___flmul@a+1
  4807  00146C  0009               	tblrd		*+
  4808  00146E  CFF5 F029          	movff	tablat,___flmul@a+2
  4809  001472  000A               	tblrd		*-
  4810  001474  CFF5 F02A          	movff	tablat,___flmul@a+3
  4811  001478  ECBF  F00A         	call	___flmul	;wreg free
  4812  00147C  C023  F03C         	movff	?___flmul,?_scale
  4813  001480  C024  F03D         	movff	?___flmul+1,?_scale+1
  4814  001484  C025  F03E         	movff	?___flmul+2,?_scale+2
  4815  001488  C026  F03F         	movff	?___flmul+3,?_scale+3
  4816  00148C  0012               	return	
  4817  00148E                     l350:
  4818                           
  4819                           ;doprnt.c: 438: else if(scl > 10)
  4820  00148E  5044               	movf	scale@scl,w,c
  4821  001490  0A80               	xorlw	128
  4822  001492  0F75               	addlw	-139
  4823  001494  A0D8               	btfss	status,0,c
  4824  001496  D05B               	goto	l352
  4825                           
  4826                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  4827  001498  0E00               	movlw	0
  4828  00149A  6E1E               	movwf	___awdiv@divisor+1,c
  4829  00149C  0E0A               	movlw	10
  4830  00149E  6E1D               	movwf	___awdiv@divisor,c
  4831  0014A0  5044               	movf	scale@scl,w,c
  4832  0014A2  6E1B               	movwf	___awdiv@dividend,c
  4833  0014A4  6A1C               	clrf	___awdiv@dividend+1,c
  4834  0014A6  BE1B               	btfsc	___awdiv@dividend,7,c
  4835  0014A8  061C               	decf	___awdiv@dividend+1,f,c
  4836  0014AA  ECEB  F014         	call	___awdiv	;wreg free
  4837  0014AE  90D8               	bcf	status,0,c
  4838  0014B0  361B               	rlcf	?___awdiv,f,c
  4839  0014B2  361C               	rlcf	?___awdiv+1,f,c
  4840  0014B4  90D8               	bcf	status,0,c
  4841  0014B6  361B               	rlcf	?___awdiv,f,c
  4842  0014B8  361C               	rlcf	?___awdiv+1,f,c
  4843  0014BA  0E24               	movlw	36
  4844  0014BC  261B               	addwf	?___awdiv,f,c
  4845  0014BE  0E00               	movlw	0
  4846  0014C0  221C               	addwfc	?___awdiv+1,f,c
  4847  0014C2  0ED9               	movlw	low __powers_
  4848  0014C4  241B               	addwf	?___awdiv,w,c
  4849  0014C6  6EF6               	movwf	tblptrl,c
  4850  0014C8  0EFD               	movlw	high __powers_
  4851  0014CA  201C               	addwfc	?___awdiv+1,w,c
  4852  0014CC  6EF7               	movwf	tblptrh,c
  4853  0014CE                     	if	1	;There are 3 active tblptr bytes
  4854  0014CE  6AF8               	clrf	tblptru,c
  4855  0014D0  0E00               	movlw	low (__mediumconst shr (0+16))
  4856  0014D2  22F8               	addwfc	tblptru,f,c
  4857  0014D4                     	endif
  4858  0014D4  0009               	tblrd		*+
  4859  0014D6  CFF5 F023          	movff	tablat,___flmul@b
  4860  0014DA  0009               	tblrd		*+
  4861  0014DC  CFF5 F024          	movff	tablat,___flmul@b+1
  4862  0014E0  0009               	tblrd		*+
  4863  0014E2  CFF5 F025          	movff	tablat,___flmul@b+2
  4864  0014E6  000A               	tblrd		*-
  4865  0014E8  CFF5 F026          	movff	tablat,___flmul@b+3
  4866  0014EC  0E00               	movlw	0
  4867  0014EE  6E18               	movwf	___awmod@divisor+1,c
  4868  0014F0  0E0A               	movlw	10
  4869  0014F2  6E17               	movwf	___awmod@divisor,c
  4870  0014F4  5044               	movf	scale@scl,w,c
  4871  0014F6  6E15               	movwf	___awmod@dividend,c
  4872  0014F8  6A16               	clrf	___awmod@dividend+1,c
  4873  0014FA  BE15               	btfsc	___awmod@dividend,7,c
  4874  0014FC  0616               	decf	___awmod@dividend+1,f,c
  4875  0014FE  EC2A  F016         	call	___awmod	;wreg free
  4876  001502  90D8               	bcf	status,0,c
  4877  001504  3615               	rlcf	?___awmod,f,c
  4878  001506  3616               	rlcf	?___awmod+1,f,c
  4879  001508  90D8               	bcf	status,0,c
  4880  00150A  3615               	rlcf	?___awmod,f,c
  4881  00150C  3616               	rlcf	?___awmod+1,f,c
  4882  00150E  0ED9               	movlw	low __powers_
  4883  001510  2415               	addwf	?___awmod,w,c
  4884  001512  6EF6               	movwf	tblptrl,c
  4885  001514  0EFD               	movlw	high __powers_
  4886  001516  2016               	addwfc	?___awmod+1,w,c
  4887  001518  6EF7               	movwf	tblptrh,c
  4888  00151A                     	if	1	;There are 3 active tblptr bytes
  4889  00151A  6AF8               	clrf	tblptru,c
  4890  00151C  0E00               	movlw	low (__mediumconst shr (0+16))
  4891  00151E  22F8               	addwfc	tblptru,f,c
  4892  001520                     	endif
  4893  001520  0009               	tblrd		*+
  4894  001522  CFF5 F027          	movff	tablat,___flmul@a
  4895  001526  0009               	tblrd		*+
  4896  001528  CFF5 F028          	movff	tablat,___flmul@a+1
  4897  00152C  0009               	tblrd		*+
  4898  00152E  CFF5 F029          	movff	tablat,___flmul@a+2
  4899  001532  000A               	tblrd		*-
  4900  001534  CFF5 F02A          	movff	tablat,___flmul@a+3
  4901  001538  ECBF  F00A         	call	___flmul	;wreg free
  4902  00153C  C023  F03C         	movff	?___flmul,?_scale
  4903  001540  C024  F03D         	movff	?___flmul+1,?_scale+1
  4904  001544  C025  F03E         	movff	?___flmul+2,?_scale+2
  4905  001548  C026  F03F         	movff	?___flmul+3,?_scale+3
  4906  00154C  0012               	return	
  4907  00154E                     l352:
  4908                           
  4909                           ;doprnt.c: 440: return _powers_[scl];
  4910  00154E  5044               	movf	scale@scl,w,c
  4911  001550  0D04               	mullw	4
  4912  001552  0ED9               	movlw	low __powers_
  4913  001554  24F3               	addwf	prodl,w,c
  4914  001556  6EF6               	movwf	tblptrl,c
  4915  001558  0EFD               	movlw	high __powers_
  4916  00155A  20F4               	addwfc	prodh,w,c
  4917  00155C  6EF7               	movwf	tblptrh,c
  4918  00155E                     	if	1	;There are 3 active tblptr bytes
  4919  00155E  6AF8               	clrf	tblptru,c
  4920  001560  0E00               	movlw	low (__mediumconst shr (0+16))
  4921  001562  22F8               	addwfc	tblptru,f,c
  4922  001564                     	endif
  4923  001564  0009               	tblrd		*+
  4924  001566  CFF5 F03C          	movff	tablat,?_scale
  4925  00156A  0009               	tblrd		*+
  4926  00156C  CFF5 F03D          	movff	tablat,?_scale+1
  4927  001570  0009               	tblrd		*+
  4928  001572  CFF5 F03E          	movff	tablat,?_scale+2
  4929  001576  000A               	tblrd		*-
  4930  001578  CFF5 F03F          	movff	tablat,?_scale+3
  4931  00157C  0012               	return	
  4932  00157E                     __end_of_scale:
  4933                           	opt stack 0
  4934                           tblptru	equ	0xFF8
  4935                           tblptrh	equ	0xFF7
  4936                           tblptrl	equ	0xFF6
  4937                           tablat	equ	0xFF5
  4938                           prodh	equ	0xFF4
  4939                           prodl	equ	0xFF3
  4940                           postinc0	equ	0xFEE
  4941                           wreg	equ	0xFE8
  4942                           indf1	equ	0xFE7
  4943                           postdec1	equ	0xFE5
  4944                           fsr1h	equ	0xFE2
  4945                           fsr1l	equ	0xFE1
  4946                           indf2	equ	0xFDF
  4947                           postinc2	equ	0xFDE
  4948                           postdec2	equ	0xFDD
  4949                           fsr2h	equ	0xFDA
  4950                           fsr2l	equ	0xFD9
  4951                           status	equ	0xFD8
  4952                           
  4953 ;; *************** function _isdigit *****************
  4954 ;; Defined at:
  4955 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  4956 ;; Parameters:    Size  Location     Type
  4957 ;;  c               1    wreg     unsigned char 
  4958 ;; Auto vars:     Size  Location     Type
  4959 ;;  c               1   22[COMRAM] unsigned char 
  4960 ;; Return value:  Size  Location     Type
  4961 ;;		None               void
  4962 ;; Registers used:
  4963 ;;		wreg, status,2, status,0
  4964 ;; Tracked objects:
  4965 ;;		On entry : 0/0
  4966 ;;		On exit  : 0/0
  4967 ;;		Unchanged: 0/0
  4968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4969 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4970 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4971 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4972 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4973 ;;Total ram usage:        3 bytes
  4974 ;; Hardware stack levels used:    1
  4975 ;; Hardware stack levels required when called:    3
  4976 ;; This function calls:
  4977 ;;		Nothing
  4978 ;; This function is called by:
  4979 ;;		_sprintf
  4980 ;; This function uses a non-reentrant model
  4981 ;;
  4982                           
  4983                           	psect	text3
  4984  0030E2                     __ptext3:
  4985                           	opt stack 0
  4986  0030E2                     _isdigit:
  4987                           	opt stack 26
  4988                           
  4989                           ;incstack = 0
  4990                           ;isdigit@c stored from wreg
  4991  0030E2  6E17               	movwf	isdigit@c,c
  4992  0030E4  0E00               	movlw	0
  4993  0030E6  6E16               	movwf	_isdigit$1408,c
  4994  0030E8  0E3A               	movlw	58
  4995  0030EA  6017               	cpfslt	isdigit@c,c
  4996  0030EC  D005               	goto	l835
  4997  0030EE  0E2F               	movlw	47
  4998  0030F0  6417               	cpfsgt	isdigit@c,c
  4999  0030F2  D002               	goto	l835
  5000  0030F4  0E01               	movlw	1
  5001  0030F6  6E16               	movwf	_isdigit$1408,c
  5002  0030F8                     l835:
  5003  0030F8  C016  F015         	movff	_isdigit$1408,??_isdigit
  5004  0030FC  3015               	rrcf	??_isdigit,w,c
  5005  0030FE  0012               	return	
  5006  003100                     __end_of_isdigit:
  5007                           	opt stack 0
  5008                           tblptru	equ	0xFF8
  5009                           tblptrh	equ	0xFF7
  5010                           tblptrl	equ	0xFF6
  5011                           tablat	equ	0xFF5
  5012                           prodh	equ	0xFF4
  5013                           prodl	equ	0xFF3
  5014                           postinc0	equ	0xFEE
  5015                           wreg	equ	0xFE8
  5016                           indf1	equ	0xFE7
  5017                           postdec1	equ	0xFE5
  5018                           fsr1h	equ	0xFE2
  5019                           fsr1l	equ	0xFE1
  5020                           indf2	equ	0xFDF
  5021                           postinc2	equ	0xFDE
  5022                           postdec2	equ	0xFDD
  5023                           fsr2h	equ	0xFDA
  5024                           fsr2l	equ	0xFD9
  5025                           status	equ	0xFD8
  5026                           
  5027 ;; *************** function _fround *****************
  5028 ;; Defined at:
  5029 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  5030 ;; Parameters:    Size  Location     Type
  5031 ;;  prec            1    wreg     unsigned char 
  5032 ;; Auto vars:     Size  Location     Type
  5033 ;;  prec            1   71[COMRAM] unsigned char 
  5034 ;; Return value:  Size  Location     Type
  5035 ;;                  4   59[COMRAM] unsigned char 
  5036 ;; Registers used:
  5037 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5038 ;; Tracked objects:
  5039 ;;		On entry : 0/0
  5040 ;;		On exit  : 0/0
  5041 ;;		Unchanged: 0/0
  5042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5043 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5044 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5046 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5047 ;;Total ram usage:       13 bytes
  5048 ;; Hardware stack levels used:    1
  5049 ;; Hardware stack levels required when called:    4
  5050 ;; This function calls:
  5051 ;;		___awdiv
  5052 ;;		___awmod
  5053 ;;		___flmul
  5054 ;; This function is called by:
  5055 ;;		_sprintf
  5056 ;; This function uses a non-reentrant model
  5057 ;;
  5058                           
  5059                           	psect	text4
  5060  001EBE                     __ptext4:
  5061                           	opt stack 0
  5062  001EBE                     _fround:
  5063                           	opt stack 25
  5064                           
  5065                           ;incstack = 0
  5066                           ;fround@prec stored from wreg
  5067  001EBE  6E48               	movwf	fround@prec,c
  5068                           
  5069                           ;doprnt.c: 413: if(prec>=110)
  5070  001EC0  0E6D               	movlw	109
  5071  001EC2  6448               	cpfsgt	fround@prec,c
  5072  001EC4  D0B5               	goto	l339
  5073                           
  5074                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5075  001EC6  0E00               	movlw	0
  5076  001EC8  6E1E               	movwf	___awdiv@divisor+1,c
  5077  001ECA  0E0A               	movlw	10
  5078  001ECC  6E1D               	movwf	___awdiv@divisor,c
  5079  001ECE  0E00               	movlw	0
  5080  001ED0  6E18               	movwf	___awmod@divisor+1,c
  5081  001ED2  0E64               	movlw	100
  5082  001ED4  6E17               	movwf	___awmod@divisor,c
  5083  001ED6  C048  F015         	movff	fround@prec,___awmod@dividend
  5084  001EDA  6A16               	clrf	___awmod@dividend+1,c
  5085  001EDC  EC2A  F016         	call	___awmod	;wreg free
  5086  001EE0  C015  F01B         	movff	?___awmod,___awdiv@dividend
  5087  001EE4  C016  F01C         	movff	?___awmod+1,___awdiv@dividend+1
  5088  001EE8  ECEB  F014         	call	___awdiv	;wreg free
  5089  001EEC  90D8               	bcf	status,0,c
  5090  001EEE  361B               	rlcf	?___awdiv,f,c
  5091  001EF0  361C               	rlcf	?___awdiv+1,f,c
  5092  001EF2  90D8               	bcf	status,0,c
  5093  001EF4  361B               	rlcf	?___awdiv,f,c
  5094  001EF6  361C               	rlcf	?___awdiv+1,f,c
  5095  001EF8  0E24               	movlw	36
  5096  001EFA  261B               	addwf	?___awdiv,f,c
  5097  001EFC  0E00               	movlw	0
  5098  001EFE  221C               	addwfc	?___awdiv+1,f,c
  5099  001F00  0E0D               	movlw	low __npowers_
  5100  001F02  241B               	addwf	?___awdiv,w,c
  5101  001F04  6EF6               	movwf	tblptrl,c
  5102  001F06  0EFE               	movlw	high __npowers_
  5103  001F08  201C               	addwfc	?___awdiv+1,w,c
  5104  001F0A  6EF7               	movwf	tblptrh,c
  5105  001F0C                     	if	1	;There are 3 active tblptr bytes
  5106  001F0C  6AF8               	clrf	tblptru,c
  5107  001F0E  0E00               	movlw	low (__mediumconst shr (0+16))
  5108  001F10  22F8               	addwfc	tblptru,f,c
  5109  001F12                     	endif
  5110  001F12  0009               	tblrd		*+
  5111  001F14  CFF5 F027          	movff	tablat,___flmul@a
  5112  001F18  0009               	tblrd		*+
  5113  001F1A  CFF5 F028          	movff	tablat,___flmul@a+1
  5114  001F1E  0009               	tblrd		*+
  5115  001F20  CFF5 F029          	movff	tablat,___flmul@a+2
  5116  001F24  000A               	tblrd		*-
  5117  001F26  CFF5 F02A          	movff	tablat,___flmul@a+3
  5118  001F2A  0E00               	movlw	0
  5119  001F2C  6E1E               	movwf	___awdiv@divisor+1,c
  5120  001F2E  0E64               	movlw	100
  5121  001F30  6E1D               	movwf	___awdiv@divisor,c
  5122  001F32  C048  F01B         	movff	fround@prec,___awdiv@dividend
  5123  001F36  6A1C               	clrf	___awdiv@dividend+1,c
  5124  001F38  ECEB  F014         	call	___awdiv	;wreg free
  5125  001F3C  90D8               	bcf	status,0,c
  5126  001F3E  361B               	rlcf	?___awdiv,f,c
  5127  001F40  361C               	rlcf	?___awdiv+1,f,c
  5128  001F42  90D8               	bcf	status,0,c
  5129  001F44  361B               	rlcf	?___awdiv,f,c
  5130  001F46  361C               	rlcf	?___awdiv+1,f,c
  5131  001F48  0E48               	movlw	72
  5132  001F4A  261B               	addwf	?___awdiv,f,c
  5133  001F4C  0E00               	movlw	0
  5134  001F4E  221C               	addwfc	?___awdiv+1,f,c
  5135  001F50  0E0D               	movlw	low __npowers_
  5136  001F52  241B               	addwf	?___awdiv,w,c
  5137  001F54  6EF6               	movwf	tblptrl,c
  5138  001F56  0EFE               	movlw	high __npowers_
  5139  001F58  201C               	addwfc	?___awdiv+1,w,c
  5140  001F5A  6EF7               	movwf	tblptrh,c
  5141  001F5C                     	if	1	;There are 3 active tblptr bytes
  5142  001F5C  6AF8               	clrf	tblptru,c
  5143  001F5E  0E00               	movlw	low (__mediumconst shr (0+16))
  5144  001F60  22F8               	addwfc	tblptru,f,c
  5145  001F62                     	endif
  5146  001F62  0009               	tblrd		*+
  5147  001F64  CFF5 F023          	movff	tablat,___flmul@b
  5148  001F68  0009               	tblrd		*+
  5149  001F6A  CFF5 F024          	movff	tablat,___flmul@b+1
  5150  001F6E  0009               	tblrd		*+
  5151  001F70  CFF5 F025          	movff	tablat,___flmul@b+2
  5152  001F74  000A               	tblrd		*-
  5153  001F76  CFF5 F026          	movff	tablat,___flmul@b+3
  5154  001F7A  ECBF  F00A         	call	___flmul	;wreg free
  5155  001F7E  C023  F044         	movff	?___flmul,_fround$1782
  5156  001F82  C024  F045         	movff	?___flmul+1,_fround$1782+1
  5157  001F86  C025  F046         	movff	?___flmul+2,_fround$1782+2
  5158  001F8A  C026  F047         	movff	?___flmul+3,_fround$1782+3
  5159                           
  5160                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5161  001F8E  0E00               	movlw	0
  5162  001F90  6E18               	movwf	___awmod@divisor+1,c
  5163  001F92  0E0A               	movlw	10
  5164  001F94  6E17               	movwf	___awmod@divisor,c
  5165  001F96  C048  F015         	movff	fround@prec,___awmod@dividend
  5166  001F9A  6A16               	clrf	___awmod@dividend+1,c
  5167  001F9C  EC2A  F016         	call	___awmod	;wreg free
  5168  001FA0  90D8               	bcf	status,0,c
  5169  001FA2  3615               	rlcf	?___awmod,f,c
  5170  001FA4  3616               	rlcf	?___awmod+1,f,c
  5171  001FA6  90D8               	bcf	status,0,c
  5172  001FA8  3615               	rlcf	?___awmod,f,c
  5173  001FAA  3616               	rlcf	?___awmod+1,f,c
  5174  001FAC  0E0D               	movlw	low __npowers_
  5175  001FAE  2415               	addwf	?___awmod,w,c
  5176  001FB0  6EF6               	movwf	tblptrl,c
  5177  001FB2  0EFE               	movlw	high __npowers_
  5178  001FB4  2016               	addwfc	?___awmod+1,w,c
  5179  001FB6  6EF7               	movwf	tblptrh,c
  5180  001FB8                     	if	1	;There are 3 active tblptr bytes
  5181  001FB8  6AF8               	clrf	tblptru,c
  5182  001FBA  0E00               	movlw	low (__mediumconst shr (0+16))
  5183  001FBC  22F8               	addwfc	tblptru,f,c
  5184  001FBE                     	endif
  5185  001FBE  0009               	tblrd		*+
  5186  001FC0  CFF5 F027          	movff	tablat,___flmul@a
  5187  001FC4  0009               	tblrd		*+
  5188  001FC6  CFF5 F028          	movff	tablat,___flmul@a+1
  5189  001FCA  0009               	tblrd		*+
  5190  001FCC  CFF5 F029          	movff	tablat,___flmul@a+2
  5191  001FD0  000A               	tblrd		*-
  5192  001FD2  CFF5 F02A          	movff	tablat,___flmul@a+3
  5193  001FD6  C044  F023         	movff	_fround$1782,___flmul@b
  5194  001FDA  C045  F024         	movff	_fround$1782+1,___flmul@b+1
  5195  001FDE  C046  F025         	movff	_fround$1782+2,___flmul@b+2
  5196  001FE2  C047  F026         	movff	_fround$1782+3,___flmul@b+3
  5197  001FE6  ECBF  F00A         	call	___flmul	;wreg free
  5198  001FEA  C023  F040         	movff	?___flmul,_fround$1783
  5199  001FEE  C024  F041         	movff	?___flmul+1,_fround$1783+1
  5200  001FF2  C025  F042         	movff	?___flmul+2,_fround$1783+2
  5201  001FF6  C026  F043         	movff	?___flmul+3,_fround$1783+3
  5202                           
  5203                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5204  001FFA  C040  F023         	movff	_fround$1783,___flmul@b
  5205  001FFE  C041  F024         	movff	_fround$1783+1,___flmul@b+1
  5206  002002  C042  F025         	movff	_fround$1783+2,___flmul@b+2
  5207  002006  C043  F026         	movff	_fround$1783+3,___flmul@b+3
  5208  00200A  0E00               	movlw	0
  5209  00200C  6E27               	movwf	___flmul@a,c
  5210  00200E  0E00               	movlw	0
  5211  002010  6E28               	movwf	___flmul@a+1,c
  5212  002012  0E00               	movlw	0
  5213  002014  6E29               	movwf	___flmul@a+2,c
  5214  002016  0E3F               	movlw	63
  5215  002018  6E2A               	movwf	___flmul@a+3,c
  5216  00201A  ECBF  F00A         	call	___flmul	;wreg free
  5217  00201E  C023  F03C         	movff	?___flmul,?_fround
  5218  002022  C024  F03D         	movff	?___flmul+1,?_fround+1
  5219  002026  C025  F03E         	movff	?___flmul+2,?_fround+2
  5220  00202A  C026  F03F         	movff	?___flmul+3,?_fround+3
  5221  00202E  0012               	return	
  5222  002030                     l339:
  5223                           
  5224                           ;doprnt.c: 415: else if(prec > 10)
  5225  002030  0E0A               	movlw	10
  5226  002032  6448               	cpfsgt	fround@prec,c
  5227  002034  D071               	goto	l342
  5228                           
  5229                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5230  002036  0E00               	movlw	0
  5231  002038  6E18               	movwf	___awmod@divisor+1,c
  5232  00203A  0E0A               	movlw	10
  5233  00203C  6E17               	movwf	___awmod@divisor,c
  5234  00203E  C048  F015         	movff	fround@prec,___awmod@dividend
  5235  002042  6A16               	clrf	___awmod@dividend+1,c
  5236  002044  EC2A  F016         	call	___awmod	;wreg free
  5237  002048  90D8               	bcf	status,0,c
  5238  00204A  3615               	rlcf	?___awmod,f,c
  5239  00204C  3616               	rlcf	?___awmod+1,f,c
  5240  00204E  90D8               	bcf	status,0,c
  5241  002050  3615               	rlcf	?___awmod,f,c
  5242  002052  3616               	rlcf	?___awmod+1,f,c
  5243  002054  0E0D               	movlw	low __npowers_
  5244  002056  2415               	addwf	?___awmod,w,c
  5245  002058  6EF6               	movwf	tblptrl,c
  5246  00205A  0EFE               	movlw	high __npowers_
  5247  00205C  2016               	addwfc	?___awmod+1,w,c
  5248  00205E  6EF7               	movwf	tblptrh,c
  5249  002060                     	if	1	;There are 3 active tblptr bytes
  5250  002060  6AF8               	clrf	tblptru,c
  5251  002062  0E00               	movlw	low (__mediumconst shr (0+16))
  5252  002064  22F8               	addwfc	tblptru,f,c
  5253  002066                     	endif
  5254  002066  0009               	tblrd		*+
  5255  002068  CFF5 F027          	movff	tablat,___flmul@a
  5256  00206C  0009               	tblrd		*+
  5257  00206E  CFF5 F028          	movff	tablat,___flmul@a+1
  5258  002072  0009               	tblrd		*+
  5259  002074  CFF5 F029          	movff	tablat,___flmul@a+2
  5260  002078  000A               	tblrd		*-
  5261  00207A  CFF5 F02A          	movff	tablat,___flmul@a+3
  5262  00207E  0E00               	movlw	0
  5263  002080  6E1E               	movwf	___awdiv@divisor+1,c
  5264  002082  0E0A               	movlw	10
  5265  002084  6E1D               	movwf	___awdiv@divisor,c
  5266  002086  C048  F01B         	movff	fround@prec,___awdiv@dividend
  5267  00208A  6A1C               	clrf	___awdiv@dividend+1,c
  5268  00208C  ECEB  F014         	call	___awdiv	;wreg free
  5269  002090  90D8               	bcf	status,0,c
  5270  002092  361B               	rlcf	?___awdiv,f,c
  5271  002094  361C               	rlcf	?___awdiv+1,f,c
  5272  002096  90D8               	bcf	status,0,c
  5273  002098  361B               	rlcf	?___awdiv,f,c
  5274  00209A  361C               	rlcf	?___awdiv+1,f,c
  5275  00209C  0E24               	movlw	36
  5276  00209E  261B               	addwf	?___awdiv,f,c
  5277  0020A0  0E00               	movlw	0
  5278  0020A2  221C               	addwfc	?___awdiv+1,f,c
  5279  0020A4  0E0D               	movlw	low __npowers_
  5280  0020A6  241B               	addwf	?___awdiv,w,c
  5281  0020A8  6EF6               	movwf	tblptrl,c
  5282  0020AA  0EFE               	movlw	high __npowers_
  5283  0020AC  201C               	addwfc	?___awdiv+1,w,c
  5284  0020AE  6EF7               	movwf	tblptrh,c
  5285  0020B0                     	if	1	;There are 3 active tblptr bytes
  5286  0020B0  6AF8               	clrf	tblptru,c
  5287  0020B2  0E00               	movlw	low (__mediumconst shr (0+16))
  5288  0020B4  22F8               	addwfc	tblptru,f,c
  5289  0020B6                     	endif
  5290  0020B6  0009               	tblrd		*+
  5291  0020B8  CFF5 F023          	movff	tablat,___flmul@b
  5292  0020BC  0009               	tblrd		*+
  5293  0020BE  CFF5 F024          	movff	tablat,___flmul@b+1
  5294  0020C2  0009               	tblrd		*+
  5295  0020C4  CFF5 F025          	movff	tablat,___flmul@b+2
  5296  0020C8  000A               	tblrd		*-
  5297  0020CA  CFF5 F026          	movff	tablat,___flmul@b+3
  5298  0020CE  ECBF  F00A         	call	___flmul	;wreg free
  5299  0020D2  C023  F044         	movff	?___flmul,_fround$1782
  5300  0020D6  C024  F045         	movff	?___flmul+1,_fround$1782+1
  5301  0020DA  C025  F046         	movff	?___flmul+2,_fround$1782+2
  5302  0020DE  C026  F047         	movff	?___flmul+3,_fround$1782+3
  5303                           
  5304                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5305  0020E2  C044  F023         	movff	_fround$1782,___flmul@b
  5306  0020E6  C045  F024         	movff	_fround$1782+1,___flmul@b+1
  5307  0020EA  C046  F025         	movff	_fround$1782+2,___flmul@b+2
  5308  0020EE  C047  F026         	movff	_fround$1782+3,___flmul@b+3
  5309  0020F2  0E00               	movlw	0
  5310  0020F4  6E27               	movwf	___flmul@a,c
  5311  0020F6  0E00               	movlw	0
  5312  0020F8  6E28               	movwf	___flmul@a+1,c
  5313  0020FA  0E00               	movlw	0
  5314  0020FC  6E29               	movwf	___flmul@a+2,c
  5315  0020FE  0E3F               	movlw	63
  5316  002100  6E2A               	movwf	___flmul@a+3,c
  5317  002102  ECBF  F00A         	call	___flmul	;wreg free
  5318  002106  C023  F03C         	movff	?___flmul,?_fround
  5319  00210A  C024  F03D         	movff	?___flmul+1,?_fround+1
  5320  00210E  C025  F03E         	movff	?___flmul+2,?_fround+2
  5321  002112  C026  F03F         	movff	?___flmul+3,?_fround+3
  5322  002116  0012               	return	
  5323  002118                     l342:
  5324                           
  5325                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  5326  002118  5048               	movf	fround@prec,w,c
  5327  00211A  0D04               	mullw	4
  5328  00211C  0E0D               	movlw	low __npowers_
  5329  00211E  24F3               	addwf	prodl,w,c
  5330  002120  6EF6               	movwf	tblptrl,c
  5331  002122  0EFE               	movlw	high __npowers_
  5332  002124  20F4               	addwfc	prodh,w,c
  5333  002126  6EF7               	movwf	tblptrh,c
  5334  002128                     	if	1	;There are 3 active tblptr bytes
  5335  002128  6AF8               	clrf	tblptru,c
  5336  00212A  0E00               	movlw	low (__mediumconst shr (0+16))
  5337  00212C  22F8               	addwfc	tblptru,f,c
  5338  00212E                     	endif
  5339  00212E  0009               	tblrd		*+
  5340  002130  CFF5 F023          	movff	tablat,___flmul@b
  5341  002134  0009               	tblrd		*+
  5342  002136  CFF5 F024          	movff	tablat,___flmul@b+1
  5343  00213A  0009               	tblrd		*+
  5344  00213C  CFF5 F025          	movff	tablat,___flmul@b+2
  5345  002140  000A               	tblrd		*-
  5346  002142  CFF5 F026          	movff	tablat,___flmul@b+3
  5347  002146  0E00               	movlw	0
  5348  002148  6E27               	movwf	___flmul@a,c
  5349  00214A  0E00               	movlw	0
  5350  00214C  6E28               	movwf	___flmul@a+1,c
  5351  00214E  0E00               	movlw	0
  5352  002150  6E29               	movwf	___flmul@a+2,c
  5353  002152  0E3F               	movlw	63
  5354  002154  6E2A               	movwf	___flmul@a+3,c
  5355  002156  ECBF  F00A         	call	___flmul	;wreg free
  5356  00215A  C023  F03C         	movff	?___flmul,?_fround
  5357  00215E  C024  F03D         	movff	?___flmul+1,?_fround+1
  5358  002162  C025  F03E         	movff	?___flmul+2,?_fround+2
  5359  002166  C026  F03F         	movff	?___flmul+3,?_fround+3
  5360  00216A  0012               	return	
  5361  00216C                     __end_of_fround:
  5362                           	opt stack 0
  5363                           tblptru	equ	0xFF8
  5364                           tblptrh	equ	0xFF7
  5365                           tblptrl	equ	0xFF6
  5366                           tablat	equ	0xFF5
  5367                           prodh	equ	0xFF4
  5368                           prodl	equ	0xFF3
  5369                           postinc0	equ	0xFEE
  5370                           wreg	equ	0xFE8
  5371                           indf1	equ	0xFE7
  5372                           postdec1	equ	0xFE5
  5373                           fsr1h	equ	0xFE2
  5374                           fsr1l	equ	0xFE1
  5375                           indf2	equ	0xFDF
  5376                           postinc2	equ	0xFDE
  5377                           postdec2	equ	0xFDD
  5378                           fsr2h	equ	0xFDA
  5379                           fsr2l	equ	0xFD9
  5380                           status	equ	0xFD8
  5381                           
  5382 ;; *************** function ___flmul *****************
  5383 ;; Defined at:
  5384 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcmul.c"
  5385 ;; Parameters:    Size  Location     Type
  5386 ;;  b               4   34[COMRAM] unsigned char 
  5387 ;;  a               4   38[COMRAM] unsigned char 
  5388 ;; Auto vars:     Size  Location     Type
  5389 ;;  prod            4   53[COMRAM] struct .
  5390 ;;  grs             4   47[COMRAM] unsigned long 
  5391 ;;  temp            2   57[COMRAM] struct .
  5392 ;;  bexp            1   52[COMRAM] unsigned char 
  5393 ;;  aexp            1   51[COMRAM] unsigned char 
  5394 ;;  sign            1   46[COMRAM] unsigned char 
  5395 ;; Return value:  Size  Location     Type
  5396 ;;                  4   34[COMRAM] unsigned char 
  5397 ;; Registers used:
  5398 ;;		wreg, status,2, status,0, prodl, prodh
  5399 ;; Tracked objects:
  5400 ;;		On entry : 0/0
  5401 ;;		On exit  : 0/0
  5402 ;;		Unchanged: 0/0
  5403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5404 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5405 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5406 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5407 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5408 ;;Total ram usage:       25 bytes
  5409 ;; Hardware stack levels used:    1
  5410 ;; Hardware stack levels required when called:    3
  5411 ;; This function calls:
  5412 ;;		Nothing
  5413 ;; This function is called by:
  5414 ;;		_main
  5415 ;;		_fround
  5416 ;;		_scale
  5417 ;;		_sprintf
  5418 ;; This function uses a non-reentrant model
  5419 ;;
  5420                           
  5421                           	psect	text5
  5422  00157E                     __ptext5:
  5423                           	opt stack 0
  5424  00157E                     ___flmul:
  5425                           	opt stack 25
  5426                           
  5427                           ;incstack = 0
  5428  00157E  5026               	movf	___flmul@b+3,w,c
  5429  001580  0B80               	andlw	128
  5430  001582  6E2F               	movwf	___flmul@sign,c
  5431  001584  5026               	movf	___flmul@b+3,w,c
  5432  001586  2426               	addwf	___flmul@b+3,w,c
  5433  001588  6E35               	movwf	___flmul@bexp,c
  5434  00158A  BE25               	btfsc	___flmul@b+2,7,c
  5435  00158C  8035               	bsf	___flmul@bexp,0,c
  5436  00158E  5035               	movf	___flmul@bexp,w,c
  5437  001590  B4D8               	btfsc	status,2,c
  5438  001592  D00D               	goto	l1034
  5439  001594  2835               	incf	___flmul@bexp,w,c
  5440  001596  A4D8               	btfss	status,2,c
  5441  001598  D008               	goto	l1035
  5442  00159A  0E00               	movlw	0
  5443  00159C  6E23               	movwf	___flmul@b,c
  5444  00159E  0E00               	movlw	0
  5445  0015A0  6E24               	movwf	___flmul@b+1,c
  5446  0015A2  0E00               	movlw	0
  5447  0015A4  6E25               	movwf	___flmul@b+2,c
  5448  0015A6  0E00               	movlw	0
  5449  0015A8  6E26               	movwf	___flmul@b+3,c
  5450  0015AA                     l1035:
  5451  0015AA  8E25               	bsf	___flmul@b+2,7,c
  5452  0015AC  D008               	goto	l1036
  5453  0015AE                     l1034:
  5454  0015AE  0E00               	movlw	0
  5455  0015B0  6E23               	movwf	___flmul@b,c
  5456  0015B2  0E00               	movlw	0
  5457  0015B4  6E24               	movwf	___flmul@b+1,c
  5458  0015B6  0E00               	movlw	0
  5459  0015B8  6E25               	movwf	___flmul@b+2,c
  5460  0015BA  0E00               	movlw	0
  5461  0015BC  6E26               	movwf	___flmul@b+3,c
  5462  0015BE                     l1036:
  5463  0015BE  502A               	movf	___flmul@a+3,w,c
  5464  0015C0  0B80               	andlw	128
  5465  0015C2  1A2F               	xorwf	___flmul@sign,f,c
  5466  0015C4  502A               	movf	___flmul@a+3,w,c
  5467  0015C6  242A               	addwf	___flmul@a+3,w,c
  5468  0015C8  6E34               	movwf	___flmul@aexp,c
  5469  0015CA  BE29               	btfsc	___flmul@a+2,7,c
  5470  0015CC  8034               	bsf	___flmul@aexp,0,c
  5471  0015CE  5034               	movf	___flmul@aexp,w,c
  5472  0015D0  B4D8               	btfsc	status,2,c
  5473  0015D2  D00D               	goto	l1038
  5474  0015D4  2834               	incf	___flmul@aexp,w,c
  5475  0015D6  A4D8               	btfss	status,2,c
  5476  0015D8  D008               	goto	l1039
  5477  0015DA  0E00               	movlw	0
  5478  0015DC  6E27               	movwf	___flmul@a,c
  5479  0015DE  0E00               	movlw	0
  5480  0015E0  6E28               	movwf	___flmul@a+1,c
  5481  0015E2  0E00               	movlw	0
  5482  0015E4  6E29               	movwf	___flmul@a+2,c
  5483  0015E6  0E00               	movlw	0
  5484  0015E8  6E2A               	movwf	___flmul@a+3,c
  5485  0015EA                     l1039:
  5486  0015EA  8E29               	bsf	___flmul@a+2,7,c
  5487  0015EC  D008               	goto	l1040
  5488  0015EE                     l1038:
  5489  0015EE  0E00               	movlw	0
  5490  0015F0  6E27               	movwf	___flmul@a,c
  5491  0015F2  0E00               	movlw	0
  5492  0015F4  6E28               	movwf	___flmul@a+1,c
  5493  0015F6  0E00               	movlw	0
  5494  0015F8  6E29               	movwf	___flmul@a+2,c
  5495  0015FA  0E00               	movlw	0
  5496  0015FC  6E2A               	movwf	___flmul@a+3,c
  5497  0015FE                     l1040:
  5498  0015FE  5034               	movf	___flmul@aexp,w,c
  5499  001600  B4D8               	btfsc	status,2,c
  5500  001602  D003               	goto	u3520
  5501  001604  5035               	movf	___flmul@bexp,w,c
  5502  001606  A4D8               	btfss	status,2,c
  5503  001608  D009               	goto	l1041
  5504  00160A                     u3520:
  5505  00160A  0E00               	movlw	0
  5506  00160C  6E23               	movwf	?___flmul,c
  5507  00160E  0E00               	movlw	0
  5508  001610  6E24               	movwf	?___flmul+1,c
  5509  001612  0E00               	movlw	0
  5510  001614  6E25               	movwf	?___flmul+2,c
  5511  001616  0E00               	movlw	0
  5512  001618  6E26               	movwf	?___flmul+3,c
  5513  00161A  0012               	return	
  5514  00161C                     l1041:
  5515  00161C  5029               	movf	___flmul@a+2,w,c
  5516  00161E  0223               	mulwf	___flmul@b,c
  5517  001620  CFF3 F03A          	movff	prodl,___flmul@temp
  5518  001624  CFF4 F03B          	movff	prodh,___flmul@temp+1
  5519  001628  503A               	movf	___flmul@temp,w,c
  5520  00162A  6E30               	movwf	___flmul@grs,c
  5521  00162C  6A31               	clrf	___flmul@grs+1,c
  5522  00162E  6A32               	clrf	___flmul@grs+2,c
  5523  001630  6A33               	clrf	___flmul@grs+3,c
  5524  001632  503B               	movf	___flmul@temp+1,w,c
  5525  001634  6E36               	movwf	___flmul@prod,c
  5526  001636  6A37               	clrf	___flmul@prod+1,c
  5527  001638  6A38               	clrf	___flmul@prod+2,c
  5528  00163A  6A39               	clrf	___flmul@prod+3,c
  5529  00163C  5028               	movf	___flmul@a+1,w,c
  5530  00163E  0224               	mulwf	___flmul@b+1,c
  5531  001640  CFF3 F03A          	movff	prodl,___flmul@temp
  5532  001644  CFF4 F03B          	movff	prodh,___flmul@temp+1
  5533  001648  503A               	movf	___flmul@temp,w,c
  5534  00164A  2630               	addwf	___flmul@grs,f,c
  5535  00164C  0E00               	movlw	0
  5536  00164E  2231               	addwfc	___flmul@grs+1,f,c
  5537  001650  2232               	addwfc	___flmul@grs+2,f,c
  5538  001652  2233               	addwfc	___flmul@grs+3,f,c
  5539  001654  503B               	movf	___flmul@temp+1,w,c
  5540  001656  2636               	addwf	___flmul@prod,f,c
  5541  001658  0E00               	movlw	0
  5542  00165A  2237               	addwfc	___flmul@prod+1,f,c
  5543  00165C  2238               	addwfc	___flmul@prod+2,f,c
  5544  00165E  2239               	addwfc	___flmul@prod+3,f,c
  5545  001660  5027               	movf	___flmul@a,w,c
  5546  001662  0225               	mulwf	___flmul@b+2,c
  5547  001664  CFF3 F03A          	movff	prodl,___flmul@temp
  5548  001668  CFF4 F03B          	movff	prodh,___flmul@temp+1
  5549  00166C  503A               	movf	___flmul@temp,w,c
  5550  00166E  2630               	addwf	___flmul@grs,f,c
  5551  001670  0E00               	movlw	0
  5552  001672  2231               	addwfc	___flmul@grs+1,f,c
  5553  001674  2232               	addwfc	___flmul@grs+2,f,c
  5554  001676  2233               	addwfc	___flmul@grs+3,f,c
  5555  001678  503B               	movf	___flmul@temp+1,w,c
  5556  00167A  2636               	addwf	___flmul@prod,f,c
  5557  00167C  0E00               	movlw	0
  5558  00167E  2237               	addwfc	___flmul@prod+1,f,c
  5559  001680  2238               	addwfc	___flmul@prod+2,f,c
  5560  001682  2239               	addwfc	___flmul@prod+3,f,c
  5561  001684  C032  F033         	movff	___flmul@grs+2,___flmul@grs+3
  5562  001688  C031  F032         	movff	___flmul@grs+1,___flmul@grs+2
  5563  00168C  C030  F031         	movff	___flmul@grs,___flmul@grs+1
  5564  001690  6A30               	clrf	___flmul@grs,c
  5565  001692  5027               	movf	___flmul@a,w,c
  5566  001694  0224               	mulwf	___flmul@b+1,c
  5567  001696  CFF3 F03A          	movff	prodl,___flmul@temp
  5568  00169A  CFF4 F03B          	movff	prodh,___flmul@temp+1
  5569  00169E  503A               	movf	___flmul@temp,w,c
  5570  0016A0  2630               	addwf	___flmul@grs,f,c
  5571  0016A2  503B               	movf	___flmul@temp+1,w,c
  5572  0016A4  2231               	addwfc	___flmul@grs+1,f,c
  5573  0016A6  0E00               	movlw	0
  5574  0016A8  2232               	addwfc	___flmul@grs+2,f,c
  5575  0016AA  0E00               	movlw	0
  5576  0016AC  2233               	addwfc	___flmul@grs+3,f,c
  5577  0016AE  5028               	movf	___flmul@a+1,w,c
  5578  0016B0  0223               	mulwf	___flmul@b,c
  5579  0016B2  CFF3 F03A          	movff	prodl,___flmul@temp
  5580  0016B6  CFF4 F03B          	movff	prodh,___flmul@temp+1
  5581  0016BA  503A               	movf	___flmul@temp,w,c
  5582  0016BC  2630               	addwf	___flmul@grs,f,c
  5583  0016BE  503B               	movf	___flmul@temp+1,w,c
  5584  0016C0  2231               	addwfc	___flmul@grs+1,f,c
  5585  0016C2  0E00               	movlw	0
  5586  0016C4  2232               	addwfc	___flmul@grs+2,f,c
  5587  0016C6  0E00               	movlw	0
  5588  0016C8  2233               	addwfc	___flmul@grs+3,f,c
  5589  0016CA  C032  F033         	movff	___flmul@grs+2,___flmul@grs+3
  5590  0016CE  C031  F032         	movff	___flmul@grs+1,___flmul@grs+2
  5591  0016D2  C030  F031         	movff	___flmul@grs,___flmul@grs+1
  5592  0016D6  6A30               	clrf	___flmul@grs,c
  5593  0016D8  5027               	movf	___flmul@a,w,c
  5594  0016DA  0223               	mulwf	___flmul@b,c
  5595  0016DC  CFF3 F03A          	movff	prodl,___flmul@temp
  5596  0016E0  CFF4 F03B          	movff	prodh,___flmul@temp+1
  5597  0016E4  503A               	movf	___flmul@temp,w,c
  5598  0016E6  2630               	addwf	___flmul@grs,f,c
  5599  0016E8  503B               	movf	___flmul@temp+1,w,c
  5600  0016EA  2231               	addwfc	___flmul@grs+1,f,c
  5601  0016EC  0E00               	movlw	0
  5602  0016EE  2232               	addwfc	___flmul@grs+2,f,c
  5603  0016F0  0E00               	movlw	0
  5604  0016F2  2233               	addwfc	___flmul@grs+3,f,c
  5605  0016F4  5029               	movf	___flmul@a+2,w,c
  5606  0016F6  0224               	mulwf	___flmul@b+1,c
  5607  0016F8  CFF3 F03A          	movff	prodl,___flmul@temp
  5608  0016FC  CFF4 F03B          	movff	prodh,___flmul@temp+1
  5609  001700  503A               	movf	___flmul@temp,w,c
  5610  001702  2636               	addwf	___flmul@prod,f,c
  5611  001704  503B               	movf	___flmul@temp+1,w,c
  5612  001706  2237               	addwfc	___flmul@prod+1,f,c
  5613  001708  0E00               	movlw	0
  5614  00170A  2238               	addwfc	___flmul@prod+2,f,c
  5615  00170C  0E00               	movlw	0
  5616  00170E  2239               	addwfc	___flmul@prod+3,f,c
  5617  001710  5028               	movf	___flmul@a+1,w,c
  5618  001712  0225               	mulwf	___flmul@b+2,c
  5619  001714  CFF3 F03A          	movff	prodl,___flmul@temp
  5620  001718  CFF4 F03B          	movff	prodh,___flmul@temp+1
  5621  00171C  503A               	movf	___flmul@temp,w,c
  5622  00171E  2636               	addwf	___flmul@prod,f,c
  5623  001720  503B               	movf	___flmul@temp+1,w,c
  5624  001722  2237               	addwfc	___flmul@prod+1,f,c
  5625  001724  0E00               	movlw	0
  5626  001726  2238               	addwfc	___flmul@prod+2,f,c
  5627  001728  0E00               	movlw	0
  5628  00172A  2239               	addwfc	___flmul@prod+3,f,c
  5629  00172C  5029               	movf	___flmul@a+2,w,c
  5630  00172E  0225               	mulwf	___flmul@b+2,c
  5631  001730  CFF3 F03A          	movff	prodl,___flmul@temp
  5632  001734  CFF4 F03B          	movff	prodh,___flmul@temp+1
  5633  001738  503A               	movf	___flmul@temp,w,c
  5634  00173A  6E2B               	movwf	??___flmul& (0+255),c
  5635  00173C  503B               	movf	___flmul@temp+1,w,c
  5636  00173E  6E2C               	movwf	(??___flmul+1)& (0+255),c
  5637  001740  6A2D               	clrf	(??___flmul+2)& (0+255),c
  5638  001742  6A2E               	clrf	(??___flmul+3)& (0+255),c
  5639  001744  C02D  F02E         	movff	??___flmul+2,??___flmul+3
  5640  001748  C02C  F02D         	movff	??___flmul+1,??___flmul+2
  5641  00174C  C02B  F02C         	movff	??___flmul,??___flmul+1
  5642  001750  6A2B               	clrf	??___flmul,c
  5643  001752  502B               	movf	??___flmul,w,c
  5644  001754  2636               	addwf	___flmul@prod,f,c
  5645  001756  502C               	movf	??___flmul+1,w,c
  5646  001758  2237               	addwfc	___flmul@prod+1,f,c
  5647  00175A  502D               	movf	??___flmul+2,w,c
  5648  00175C  2238               	addwfc	___flmul@prod+2,f,c
  5649  00175E  502E               	movf	??___flmul+3,w,c
  5650  001760  2239               	addwfc	___flmul@prod+3,f,c
  5651  001762  C030  F02B         	movff	___flmul@grs,??___flmul
  5652  001766  C031  F02C         	movff	___flmul@grs+1,??___flmul+1
  5653  00176A  C032  F02D         	movff	___flmul@grs+2,??___flmul+2
  5654  00176E  C033  F02E         	movff	___flmul@grs+3,??___flmul+3
  5655  001772  0E19               	movlw	25
  5656  001774  D005               	goto	u3530
  5657  001776                     u3535:
  5658  001776  90D8               	bcf	status,0,c
  5659  001778  322E               	rrcf	??___flmul+3,f,c
  5660  00177A  322D               	rrcf	??___flmul+2,f,c
  5661  00177C  322C               	rrcf	??___flmul+1,f,c
  5662  00177E  322B               	rrcf	??___flmul,f,c
  5663  001780                     u3530:
  5664  001780  2EE8               	decfsz	wreg,f,c
  5665  001782  D7F9               	goto	u3535
  5666  001784  502B               	movf	??___flmul,w,c
  5667  001786  2636               	addwf	___flmul@prod,f,c
  5668  001788  502C               	movf	??___flmul+1,w,c
  5669  00178A  2237               	addwfc	___flmul@prod+1,f,c
  5670  00178C  502D               	movf	??___flmul+2,w,c
  5671  00178E  2238               	addwfc	___flmul@prod+2,f,c
  5672  001790  502E               	movf	??___flmul+3,w,c
  5673  001792  2239               	addwfc	___flmul@prod+3,f,c
  5674  001794  C032  F033         	movff	___flmul@grs+2,___flmul@grs+3
  5675  001798  C031  F032         	movff	___flmul@grs+1,___flmul@grs+2
  5676  00179C  C030  F031         	movff	___flmul@grs,___flmul@grs+1
  5677  0017A0  6A30               	clrf	___flmul@grs,c
  5678  0017A2  5034               	movf	___flmul@aexp,w,c
  5679  0017A4  C035  F02B         	movff	___flmul@bexp,??___flmul
  5680  0017A8  6A2C               	clrf	(??___flmul+1)& (0+255),c
  5681  0017AA  262B               	addwf	??___flmul,f,c
  5682  0017AC  0E00               	movlw	0
  5683  0017AE  222C               	addwfc	??___flmul+1,f,c
  5684  0017B0  0E82               	movlw	130
  5685  0017B2  242B               	addwf	??___flmul,w,c
  5686  0017B4  6E3A               	movwf	___flmul@temp,c
  5687  0017B6  0EFF               	movlw	255
  5688  0017B8  202C               	addwfc	??___flmul+1,w,c
  5689  0017BA  6E3B               	movwf	___flmul@temp+1,c
  5690  0017BC  D00F               	goto	l1045
  5691  0017BE  90D8               	bcf	status,0,c
  5692  0017C0  3636               	rlcf	___flmul@prod,f,c
  5693  0017C2  3637               	rlcf	___flmul@prod+1,f,c
  5694  0017C4  3638               	rlcf	___flmul@prod+2,f,c
  5695  0017C6  3639               	rlcf	___flmul@prod+3,f,c
  5696  0017C8  BE33               	btfsc	___flmul@grs+3,7,c
  5697  0017CA  8036               	bsf	___flmul@prod,0,c
  5698  0017CC  90D8               	bcf	status,0,c
  5699  0017CE  3630               	rlcf	___flmul@grs,f,c
  5700  0017D0  3631               	rlcf	___flmul@grs+1,f,c
  5701  0017D2  3632               	rlcf	___flmul@grs+2,f,c
  5702  0017D4  3633               	rlcf	___flmul@grs+3,f,c
  5703  0017D6  063A               	decf	___flmul@temp,f,c
  5704  0017D8  A0D8               	btfss	status,0,c
  5705  0017DA  063B               	decf	___flmul@temp+1,f,c
  5706  0017DC                     l1045:
  5707  0017DC  AE38               	btfss	___flmul@prod+2,7,c
  5708  0017DE  D7EF               	goto	l1046
  5709  0017E0  0E00               	movlw	0
  5710  0017E2  6E34               	movwf	___flmul@aexp,c
  5711  0017E4  AE33               	btfss	___flmul@grs+3,7,c
  5712  0017E6  D016               	goto	l1052
  5713  0017E8  0EFF               	movlw	255
  5714  0017EA  1430               	andwf	___flmul@grs,w,c
  5715  0017EC  6E2B               	movwf	??___flmul& (0+255),c
  5716  0017EE  0EFF               	movlw	255
  5717  0017F0  1431               	andwf	___flmul@grs+1,w,c
  5718  0017F2  6E2C               	movwf	(??___flmul+1)& (0+255),c
  5719  0017F4  0EFF               	movlw	255
  5720  0017F6  1432               	andwf	___flmul@grs+2,w,c
  5721  0017F8  6E2D               	movwf	(??___flmul+2)& (0+255),c
  5722  0017FA  0E7F               	movlw	127
  5723  0017FC  1433               	andwf	___flmul@grs+3,w,c
  5724  0017FE  6E2E               	movwf	(??___flmul+3)& (0+255),c
  5725  001800  502B               	movf	??___flmul,w,c
  5726  001802  102C               	iorwf	??___flmul+1,w,c
  5727  001804  102D               	iorwf	??___flmul+2,w,c
  5728  001806  102E               	iorwf	??___flmul+3,w,c
  5729  001808  A4D8               	btfss	status,2,c
  5730  00180A  D002               	goto	u3580
  5731  00180C  A036               	btfss	___flmul@prod,0,c
  5732  00180E  D002               	goto	l1052
  5733  001810                     u3580:
  5734  001810  0E01               	movlw	1
  5735  001812  6E34               	movwf	___flmul@aexp,c
  5736  001814                     l1052:
  5737  001814  5034               	movf	___flmul@aexp,w,c
  5738  001816  B4D8               	btfsc	status,2,c
  5739  001818  D01F               	goto	l1054
  5740  00181A  0E01               	movlw	1
  5741  00181C  2636               	addwf	___flmul@prod,f,c
  5742  00181E  0E00               	movlw	0
  5743  001820  2237               	addwfc	___flmul@prod+1,f,c
  5744  001822  2238               	addwfc	___flmul@prod+2,f,c
  5745  001824  2239               	addwfc	___flmul@prod+3,f,c
  5746  001826  A039               	btfss	___flmul@prod+3,0,c
  5747  001828  D017               	goto	l1054
  5748  00182A  C036  F02B         	movff	___flmul@prod,??___flmul
  5749  00182E  C037  F02C         	movff	___flmul@prod+1,??___flmul+1
  5750  001832  C038  F02D         	movff	___flmul@prod+2,??___flmul+2
  5751  001836  C039  F02E         	movff	___flmul@prod+3,??___flmul+3
  5752  00183A  342E               	rlcf	??___flmul+3,w,c
  5753  00183C  322E               	rrcf	??___flmul+3,f,c
  5754  00183E  322D               	rrcf	??___flmul+2,f,c
  5755  001840  322C               	rrcf	??___flmul+1,f,c
  5756  001842  322B               	rrcf	??___flmul,f,c
  5757  001844  C02B  F036         	movff	??___flmul,___flmul@prod
  5758  001848  C02C  F037         	movff	??___flmul+1,___flmul@prod+1
  5759  00184C  C02D  F038         	movff	??___flmul+2,___flmul@prod+2
  5760  001850  C02E  F039         	movff	??___flmul+3,___flmul@prod+3
  5761  001854  4A3A               	infsnz	___flmul@temp,f,c
  5762  001856  2A3B               	incf	___flmul@temp+1,f,c
  5763  001858                     l1054:
  5764  001858  BE3B               	btfsc	___flmul@temp+1,7,c
  5765  00185A  D00D               	goto	l1055
  5766  00185C  503B               	movf	___flmul@temp+1,w,c
  5767  00185E  E103               	bnz	u3610
  5768  001860  283A               	incf	___flmul@temp,w,c
  5769  001862  A0D8               	btfss	status,0,c
  5770  001864  D008               	goto	l1055
  5771  001866                     u3610:
  5772  001866  0E00               	movlw	0
  5773  001868  6E36               	movwf	___flmul@prod,c
  5774  00186A  0E00               	movlw	0
  5775  00186C  6E37               	movwf	___flmul@prod+1,c
  5776  00186E  0E80               	movlw	128
  5777  001870  6E38               	movwf	___flmul@prod+2,c
  5778  001872  0E7F               	movlw	127
  5779  001874  D020               	goto	L6
  5780  001876                     l1055:
  5781  001876  BE3B               	btfsc	___flmul@temp+1,7,c
  5782  001878  D005               	goto	u3620
  5783  00187A  503B               	movf	___flmul@temp+1,w,c
  5784  00187C  E10E               	bnz	l1057
  5785  00187E  043A               	decf	___flmul@temp,w,c
  5786  001880  B0D8               	btfsc	status,0,c
  5787  001882  D00B               	goto	l1057
  5788  001884                     u3620:
  5789  001884  0E00               	movlw	0
  5790  001886  6E36               	movwf	___flmul@prod,c
  5791  001888  0E00               	movlw	0
  5792  00188A  6E37               	movwf	___flmul@prod+1,c
  5793  00188C  0E00               	movlw	0
  5794  00188E  6E38               	movwf	___flmul@prod+2,c
  5795  001890  0E00               	movlw	0
  5796  001892  6E39               	movwf	___flmul@prod+3,c
  5797  001894  0E00               	movlw	0
  5798  001896  6E2F               	movwf	___flmul@sign,c
  5799  001898  D00F               	goto	l1058
  5800  00189A                     l1057:
  5801  00189A  C03A  F035         	movff	___flmul@temp,___flmul@bexp
  5802  00189E  0EFF               	movlw	255
  5803  0018A0  1636               	andwf	___flmul@prod,f,c
  5804  0018A2  0EFF               	movlw	255
  5805  0018A4  1637               	andwf	___flmul@prod+1,f,c
  5806  0018A6  0E7F               	movlw	127
  5807  0018A8  1638               	andwf	___flmul@prod+2,f,c
  5808  0018AA  0E00               	movlw	0
  5809  0018AC  1639               	andwf	___flmul@prod+3,f,c
  5810  0018AE  B035               	btfsc	___flmul@bexp,0,c
  5811  0018B0  8E38               	bsf	___flmul@prod+2,7,c
  5812  0018B2  90D8               	bcf	status,0,c
  5813  0018B4  3035               	rrcf	___flmul@bexp,w,c
  5814  0018B6                     L6:
  5815  0018B6  6E39               	movwf	___flmul@prod+3,c
  5816  0018B8                     l1058:
  5817  0018B8  502F               	movf	___flmul@sign,w,c
  5818  0018BA  1239               	iorwf	___flmul@prod+3,f,c
  5819  0018BC  C036  F023         	movff	___flmul@prod,?___flmul
  5820  0018C0  C037  F024         	movff	___flmul@prod+1,?___flmul+1
  5821  0018C4  C038  F025         	movff	___flmul@prod+2,?___flmul+2
  5822  0018C8  C039  F026         	movff	___flmul@prod+3,?___flmul+3
  5823  0018CC  0012               	return	
  5824  0018CE                     __end_of___flmul:
  5825                           	opt stack 0
  5826                           tblptru	equ	0xFF8
  5827                           tblptrh	equ	0xFF7
  5828                           tblptrl	equ	0xFF6
  5829                           tablat	equ	0xFF5
  5830                           prodh	equ	0xFF4
  5831                           prodl	equ	0xFF3
  5832                           postinc0	equ	0xFEE
  5833                           wreg	equ	0xFE8
  5834                           indf1	equ	0xFE7
  5835                           postdec1	equ	0xFE5
  5836                           fsr1h	equ	0xFE2
  5837                           fsr1l	equ	0xFE1
  5838                           indf2	equ	0xFDF
  5839                           postinc2	equ	0xFDE
  5840                           postdec2	equ	0xFDD
  5841                           fsr2h	equ	0xFDA
  5842                           fsr2l	equ	0xFD9
  5843                           status	equ	0xFD8
  5844                           
  5845 ;; *************** function ___awmod *****************
  5846 ;; Defined at:
  5847 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  5848 ;; Parameters:    Size  Location     Type
  5849 ;;  dividend        2   20[COMRAM] int 
  5850 ;;  divisor         2   22[COMRAM] int 
  5851 ;; Auto vars:     Size  Location     Type
  5852 ;;  sign            1   25[COMRAM] unsigned char 
  5853 ;;  counter         1   24[COMRAM] unsigned char 
  5854 ;; Return value:  Size  Location     Type
  5855 ;;                  2   20[COMRAM] int 
  5856 ;; Registers used:
  5857 ;;		wreg, status,2, status,0
  5858 ;; Tracked objects:
  5859 ;;		On entry : 0/0
  5860 ;;		On exit  : 0/0
  5861 ;;		Unchanged: 0/0
  5862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5863 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5864 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5865 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5866 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5867 ;;Total ram usage:        6 bytes
  5868 ;; Hardware stack levels used:    1
  5869 ;; Hardware stack levels required when called:    3
  5870 ;; This function calls:
  5871 ;;		Nothing
  5872 ;; This function is called by:
  5873 ;;		_fround
  5874 ;;		_scale
  5875 ;; This function uses a non-reentrant model
  5876 ;;
  5877                           
  5878                           	psect	text6
  5879  002C54                     __ptext6:
  5880                           	opt stack 0
  5881  002C54                     ___awmod:
  5882                           	opt stack 25
  5883                           
  5884                           ;incstack = 0
  5885  002C54  0E00               	movlw	0
  5886  002C56  6E1A               	movwf	___awmod@sign,c
  5887  002C58  AE16               	btfss	___awmod@dividend+1,7,c
  5888  002C5A  D006               	goto	l652
  5889  002C5C  6C15               	negf	___awmod@dividend,c
  5890  002C5E  1E16               	comf	___awmod@dividend+1,f,c
  5891  002C60  B0D8               	btfsc	status,0,c
  5892  002C62  2A16               	incf	___awmod@dividend+1,f,c
  5893  002C64  0E01               	movlw	1
  5894  002C66  6E1A               	movwf	___awmod@sign,c
  5895  002C68                     l652:
  5896  002C68  AE18               	btfss	___awmod@divisor+1,7,c
  5897  002C6A  D004               	goto	l653
  5898  002C6C  6C17               	negf	___awmod@divisor,c
  5899  002C6E  1E18               	comf	___awmod@divisor+1,f,c
  5900  002C70  B0D8               	btfsc	status,0,c
  5901  002C72  2A18               	incf	___awmod@divisor+1,f,c
  5902  002C74                     l653:
  5903  002C74  5017               	movf	___awmod@divisor,w,c
  5904  002C76  1018               	iorwf	___awmod@divisor+1,w,c
  5905  002C78  B4D8               	btfsc	status,2,c
  5906  002C7A  D018               	goto	l660
  5907  002C7C  0E01               	movlw	1
  5908  002C7E  6E19               	movwf	___awmod@counter,c
  5909  002C80  D004               	goto	l655
  5910  002C82  90D8               	bcf	status,0,c
  5911  002C84  3617               	rlcf	___awmod@divisor,f,c
  5912  002C86  3618               	rlcf	___awmod@divisor+1,f,c
  5913  002C88  2A19               	incf	___awmod@counter,f,c
  5914  002C8A                     l655:
  5915  002C8A  AE18               	btfss	___awmod@divisor+1,7,c
  5916  002C8C  D7FA               	goto	l656
  5917  002C8E                     u3730:
  5918  002C8E  5017               	movf	___awmod@divisor,w,c
  5919  002C90  5C15               	subwf	___awmod@dividend,w,c
  5920  002C92  5018               	movf	___awmod@divisor+1,w,c
  5921  002C94  5816               	subwfb	___awmod@dividend+1,w,c
  5922  002C96  A0D8               	btfss	status,0,c
  5923  002C98  D004               	goto	l659
  5924  002C9A  5017               	movf	___awmod@divisor,w,c
  5925  002C9C  5E15               	subwf	___awmod@dividend,f,c
  5926  002C9E  5018               	movf	___awmod@divisor+1,w,c
  5927  002CA0  5A16               	subwfb	___awmod@dividend+1,f,c
  5928  002CA2                     l659:
  5929  002CA2  90D8               	bcf	status,0,c
  5930  002CA4  3218               	rrcf	___awmod@divisor+1,f,c
  5931  002CA6  3217               	rrcf	___awmod@divisor,f,c
  5932  002CA8  2E19               	decfsz	___awmod@counter,f,c
  5933  002CAA  D7F1               	goto	u3730
  5934  002CAC                     l660:
  5935  002CAC  501A               	movf	___awmod@sign,w,c
  5936  002CAE  B4D8               	btfsc	status,2,c
  5937  002CB0  D004               	goto	l661
  5938  002CB2  6C15               	negf	___awmod@dividend,c
  5939  002CB4  1E16               	comf	___awmod@dividend+1,f,c
  5940  002CB6  B0D8               	btfsc	status,0,c
  5941  002CB8  2A16               	incf	___awmod@dividend+1,f,c
  5942  002CBA                     l661:
  5943  002CBA  C015  F015         	movff	___awmod@dividend,?___awmod
  5944  002CBE  C016  F016         	movff	___awmod@dividend+1,?___awmod+1
  5945  002CC2  0012               	return	
  5946  002CC4                     __end_of___awmod:
  5947                           	opt stack 0
  5948                           tblptru	equ	0xFF8
  5949                           tblptrh	equ	0xFF7
  5950                           tblptrl	equ	0xFF6
  5951                           tablat	equ	0xFF5
  5952                           prodh	equ	0xFF4
  5953                           prodl	equ	0xFF3
  5954                           postinc0	equ	0xFEE
  5955                           wreg	equ	0xFE8
  5956                           indf1	equ	0xFE7
  5957                           postdec1	equ	0xFE5
  5958                           fsr1h	equ	0xFE2
  5959                           fsr1l	equ	0xFE1
  5960                           indf2	equ	0xFDF
  5961                           postinc2	equ	0xFDE
  5962                           postdec2	equ	0xFDD
  5963                           fsr2h	equ	0xFDA
  5964                           fsr2l	equ	0xFD9
  5965                           status	equ	0xFD8
  5966                           
  5967 ;; *************** function ___awdiv *****************
  5968 ;; Defined at:
  5969 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  5970 ;; Parameters:    Size  Location     Type
  5971 ;;  dividend        2   26[COMRAM] int 
  5972 ;;  divisor         2   28[COMRAM] int 
  5973 ;; Auto vars:     Size  Location     Type
  5974 ;;  quotient        2   32[COMRAM] int 
  5975 ;;  sign            1   31[COMRAM] unsigned char 
  5976 ;;  counter         1   30[COMRAM] unsigned char 
  5977 ;; Return value:  Size  Location     Type
  5978 ;;                  2   26[COMRAM] int 
  5979 ;; Registers used:
  5980 ;;		wreg, status,2, status,0
  5981 ;; Tracked objects:
  5982 ;;		On entry : 0/0
  5983 ;;		On exit  : 0/0
  5984 ;;		Unchanged: 0/0
  5985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5986 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5987 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5989 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5990 ;;Total ram usage:        8 bytes
  5991 ;; Hardware stack levels used:    1
  5992 ;; Hardware stack levels required when called:    3
  5993 ;; This function calls:
  5994 ;;		Nothing
  5995 ;; This function is called by:
  5996 ;;		_fround
  5997 ;;		_scale
  5998 ;;		_sprintf
  5999 ;; This function uses a non-reentrant model
  6000 ;;
  6001                           
  6002                           	psect	text7
  6003  0029D6                     __ptext7:
  6004                           	opt stack 0
  6005  0029D6                     ___awdiv:
  6006                           	opt stack 25
  6007                           
  6008                           ;incstack = 0
  6009  0029D6  0E00               	movlw	0
  6010  0029D8  6E20               	movwf	___awdiv@sign,c
  6011  0029DA  AE1E               	btfss	___awdiv@divisor+1,7,c
  6012  0029DC  D006               	goto	l639
  6013  0029DE  6C1D               	negf	___awdiv@divisor,c
  6014  0029E0  1E1E               	comf	___awdiv@divisor+1,f,c
  6015  0029E2  B0D8               	btfsc	status,0,c
  6016  0029E4  2A1E               	incf	___awdiv@divisor+1,f,c
  6017  0029E6  0E01               	movlw	1
  6018  0029E8  6E20               	movwf	___awdiv@sign,c
  6019  0029EA                     l639:
  6020  0029EA  AE1C               	btfss	___awdiv@dividend+1,7,c
  6021  0029EC  D006               	goto	l640
  6022  0029EE  6C1B               	negf	___awdiv@dividend,c
  6023  0029F0  1E1C               	comf	___awdiv@dividend+1,f,c
  6024  0029F2  B0D8               	btfsc	status,0,c
  6025  0029F4  2A1C               	incf	___awdiv@dividend+1,f,c
  6026  0029F6  0E01               	movlw	1
  6027  0029F8  1A20               	xorwf	___awdiv@sign,f,c
  6028  0029FA                     l640:
  6029  0029FA  0E00               	movlw	0
  6030  0029FC  6E22               	movwf	___awdiv@quotient+1,c
  6031  0029FE  0E00               	movlw	0
  6032  002A00  6E21               	movwf	___awdiv@quotient,c
  6033  002A02  501D               	movf	___awdiv@divisor,w,c
  6034  002A04  101E               	iorwf	___awdiv@divisor+1,w,c
  6035  002A06  B4D8               	btfsc	status,2,c
  6036  002A08  D01C               	goto	l647
  6037  002A0A  0E01               	movlw	1
  6038  002A0C  6E1F               	movwf	___awdiv@counter,c
  6039  002A0E  D004               	goto	l642
  6040  002A10  90D8               	bcf	status,0,c
  6041  002A12  361D               	rlcf	___awdiv@divisor,f,c
  6042  002A14  361E               	rlcf	___awdiv@divisor+1,f,c
  6043  002A16  2A1F               	incf	___awdiv@counter,f,c
  6044  002A18                     l642:
  6045  002A18  AE1E               	btfss	___awdiv@divisor+1,7,c
  6046  002A1A  D7FA               	goto	l643
  6047  002A1C                     u3670:
  6048  002A1C  90D8               	bcf	status,0,c
  6049  002A1E  3621               	rlcf	___awdiv@quotient,f,c
  6050  002A20  3622               	rlcf	___awdiv@quotient+1,f,c
  6051  002A22  501D               	movf	___awdiv@divisor,w,c
  6052  002A24  5C1B               	subwf	___awdiv@dividend,w,c
  6053  002A26  501E               	movf	___awdiv@divisor+1,w,c
  6054  002A28  581C               	subwfb	___awdiv@dividend+1,w,c
  6055  002A2A  A0D8               	btfss	status,0,c
  6056  002A2C  D005               	goto	l646
  6057  002A2E  501D               	movf	___awdiv@divisor,w,c
  6058  002A30  5E1B               	subwf	___awdiv@dividend,f,c
  6059  002A32  501E               	movf	___awdiv@divisor+1,w,c
  6060  002A34  5A1C               	subwfb	___awdiv@dividend+1,f,c
  6061  002A36  8021               	bsf	___awdiv@quotient,0,c
  6062  002A38                     l646:
  6063  002A38  90D8               	bcf	status,0,c
  6064  002A3A  321E               	rrcf	___awdiv@divisor+1,f,c
  6065  002A3C  321D               	rrcf	___awdiv@divisor,f,c
  6066  002A3E  2E1F               	decfsz	___awdiv@counter,f,c
  6067  002A40  D7ED               	goto	u3670
  6068  002A42                     l647:
  6069  002A42  5020               	movf	___awdiv@sign,w,c
  6070  002A44  B4D8               	btfsc	status,2,c
  6071  002A46  D004               	goto	l648
  6072  002A48  6C21               	negf	___awdiv@quotient,c
  6073  002A4A  1E22               	comf	___awdiv@quotient+1,f,c
  6074  002A4C  B0D8               	btfsc	status,0,c
  6075  002A4E  2A22               	incf	___awdiv@quotient+1,f,c
  6076  002A50                     l648:
  6077  002A50  C021  F01B         	movff	___awdiv@quotient,?___awdiv
  6078  002A54  C022  F01C         	movff	___awdiv@quotient+1,?___awdiv+1
  6079  002A58  0012               	return	
  6080  002A5A                     __end_of___awdiv:
  6081                           	opt stack 0
  6082                           tblptru	equ	0xFF8
  6083                           tblptrh	equ	0xFF7
  6084                           tblptrl	equ	0xFF6
  6085                           tablat	equ	0xFF5
  6086                           prodh	equ	0xFF4
  6087                           prodl	equ	0xFF3
  6088                           postinc0	equ	0xFEE
  6089                           wreg	equ	0xFE8
  6090                           indf1	equ	0xFE7
  6091                           postdec1	equ	0xFE5
  6092                           fsr1h	equ	0xFE2
  6093                           fsr1l	equ	0xFE1
  6094                           indf2	equ	0xFDF
  6095                           postinc2	equ	0xFDE
  6096                           postdec2	equ	0xFDD
  6097                           fsr2h	equ	0xFDA
  6098                           fsr2l	equ	0xFD9
  6099                           status	equ	0xFD8
  6100                           
  6101 ;; *************** function __tdiv_to_l_ *****************
  6102 ;; Defined at:
  6103 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdivl.c"
  6104 ;; Parameters:    Size  Location     Type
  6105 ;;  f1              4   20[COMRAM] float 
  6106 ;;  f2              4   24[COMRAM] float 
  6107 ;; Auto vars:     Size  Location     Type
  6108 ;;  quot            4   31[COMRAM] unsigned long 
  6109 ;;  exp1            1   36[COMRAM] unsigned char 
  6110 ;;  cntr            1   35[COMRAM] unsigned char 
  6111 ;; Return value:  Size  Location     Type
  6112 ;;                  4   20[COMRAM] unsigned long 
  6113 ;; Registers used:
  6114 ;;		wreg, status,2, status,0
  6115 ;; Tracked objects:
  6116 ;;		On entry : 0/0
  6117 ;;		On exit  : 0/0
  6118 ;;		Unchanged: 0/0
  6119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6120 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6121 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6122 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6123 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6124 ;;Total ram usage:       17 bytes
  6125 ;; Hardware stack levels used:    1
  6126 ;; Hardware stack levels required when called:    3
  6127 ;; This function calls:
  6128 ;;		Nothing
  6129 ;; This function is called by:
  6130 ;;		_sprintf
  6131 ;; This function uses a non-reentrant model
  6132 ;;
  6133                           
  6134                           	psect	text8
  6135  0022BC                     __ptext8:
  6136                           	opt stack 0
  6137  0022BC                     __tdiv_to_l_:
  6138                           	opt stack 26
  6139                           
  6140                           ;incstack = 0
  6141  0022BC  C017  F01D         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  6142  0022C0  6A1E               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  6143  0022C2  6A1F               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  6144  0022C4  3416               	rlcf	__tdiv_to_l_@f1+1,w,c
  6145  0022C6  361D               	rlcf	??__tdiv_to_l_& (0+255),f,c
  6146  0022C8  E301               	bnc	u3871
  6147  0022CA  801E               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  6148  0022CC                     u3871:
  6149  0022CC  501D               	movf	??__tdiv_to_l_,w,c
  6150  0022CE  6E25               	movwf	__tdiv_to_l_@exp1,c
  6151  0022D0  5025               	movf	__tdiv_to_l_@exp1,w,c
  6152  0022D2  A4D8               	btfss	status,2,c
  6153  0022D4  D009               	goto	l775
  6154  0022D6  0E00               	movlw	0
  6155  0022D8  6E15               	movwf	?__tdiv_to_l_,c
  6156  0022DA  0E00               	movlw	0
  6157  0022DC  6E16               	movwf	?__tdiv_to_l_+1,c
  6158  0022DE  0E00               	movlw	0
  6159  0022E0  6E17               	movwf	?__tdiv_to_l_+2,c
  6160  0022E2  0E00               	movlw	0
  6161  0022E4  6E18               	movwf	?__tdiv_to_l_+3,c
  6162  0022E6  0012               	return	
  6163  0022E8                     l775:
  6164  0022E8  C01B  F01D         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  6165  0022EC  6A1E               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  6166  0022EE  6A1F               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  6167  0022F0  341A               	rlcf	__tdiv_to_l_@f2+1,w,c
  6168  0022F2  361D               	rlcf	??__tdiv_to_l_& (0+255),f,c
  6169  0022F4  E301               	bnc	u3891
  6170  0022F6  801E               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  6171  0022F8                     u3891:
  6172  0022F8  501D               	movf	??__tdiv_to_l_,w,c
  6173  0022FA  6E24               	movwf	__tdiv_to_l_@cntr,c
  6174  0022FC  5024               	movf	__tdiv_to_l_@cntr,w,c
  6175  0022FE  A4D8               	btfss	status,2,c
  6176  002300  D009               	goto	l777
  6177  002302  0E00               	movlw	0
  6178  002304  6E15               	movwf	?__tdiv_to_l_,c
  6179  002306  0E00               	movlw	0
  6180  002308  6E16               	movwf	?__tdiv_to_l_+1,c
  6181  00230A  0E00               	movlw	0
  6182  00230C  6E17               	movwf	?__tdiv_to_l_+2,c
  6183  00230E  0E00               	movlw	0
  6184  002310  6E18               	movwf	?__tdiv_to_l_+3,c
  6185  002312  0012               	return	
  6186  002314                     l777:
  6187  002314  8E16               	bsf	__tdiv_to_l_@f1+1,7,c
  6188  002316  0EFF               	movlw	255
  6189  002318  1615               	andwf	__tdiv_to_l_@f1,f,c
  6190  00231A  0EFF               	movlw	255
  6191  00231C  1616               	andwf	__tdiv_to_l_@f1+1,f,c
  6192  00231E  0E00               	movlw	0
  6193  002320  1617               	andwf	__tdiv_to_l_@f1+2,f,c
  6194  002322  8E1A               	bsf	__tdiv_to_l_@f2+1,7,c
  6195  002324  0EFF               	movlw	255
  6196  002326  1619               	andwf	__tdiv_to_l_@f2,f,c
  6197  002328  0EFF               	movlw	255
  6198  00232A  161A               	andwf	__tdiv_to_l_@f2+1,f,c
  6199  00232C  0E00               	movlw	0
  6200  00232E  161B               	andwf	__tdiv_to_l_@f2+2,f,c
  6201  002330  0E00               	movlw	0
  6202  002332  6E20               	movwf	__tdiv_to_l_@quot,c
  6203  002334  0E00               	movlw	0
  6204  002336  6E21               	movwf	__tdiv_to_l_@quot+1,c
  6205  002338  0E00               	movlw	0
  6206  00233A  6E22               	movwf	__tdiv_to_l_@quot+2,c
  6207  00233C  0E00               	movlw	0
  6208  00233E  6E23               	movwf	__tdiv_to_l_@quot+3,c
  6209  002340  0E7F               	movlw	127
  6210  002342  5E25               	subwf	__tdiv_to_l_@exp1,f,c
  6211  002344  5024               	movf	__tdiv_to_l_@cntr,w,c
  6212  002346  0F98               	addlw	152
  6213  002348  5E25               	subwf	__tdiv_to_l_@exp1,f,c
  6214  00234A  0E18               	movlw	24
  6215  00234C  6E24               	movwf	__tdiv_to_l_@cntr,c
  6216  00234E                     l778:
  6217  00234E  90D8               	bcf	status,0,c
  6218  002350  3620               	rlcf	__tdiv_to_l_@quot,f,c
  6219  002352  3621               	rlcf	__tdiv_to_l_@quot+1,f,c
  6220  002354  3622               	rlcf	__tdiv_to_l_@quot+2,f,c
  6221  002356  3623               	rlcf	__tdiv_to_l_@quot+3,f,c
  6222  002358  5019               	movf	__tdiv_to_l_@f2,w,c
  6223  00235A  5C15               	subwf	__tdiv_to_l_@f1,w,c
  6224  00235C  501A               	movf	__tdiv_to_l_@f2+1,w,c
  6225  00235E  5816               	subwfb	__tdiv_to_l_@f1+1,w,c
  6226  002360  501B               	movf	__tdiv_to_l_@f2+2,w,c
  6227  002362  5817               	subwfb	__tdiv_to_l_@f1+2,w,c
  6228  002364  A0D8               	btfss	status,0,c
  6229  002366  D007               	goto	l779
  6230  002368  5019               	movf	__tdiv_to_l_@f2,w,c
  6231  00236A  5E15               	subwf	__tdiv_to_l_@f1,f,c
  6232  00236C  501A               	movf	__tdiv_to_l_@f2+1,w,c
  6233  00236E  5A16               	subwfb	__tdiv_to_l_@f1+1,f,c
  6234  002370  501B               	movf	__tdiv_to_l_@f2+2,w,c
  6235  002372  5A17               	subwfb	__tdiv_to_l_@f1+2,f,c
  6236  002374  8020               	bsf	__tdiv_to_l_@quot,0,c
  6237  002376                     l779:
  6238  002376  90D8               	bcf	status,0,c
  6239  002378  3615               	rlcf	__tdiv_to_l_@f1,f,c
  6240  00237A  3616               	rlcf	__tdiv_to_l_@f1+1,f,c
  6241  00237C  3617               	rlcf	__tdiv_to_l_@f1+2,f,c
  6242  00237E  2E24               	decfsz	__tdiv_to_l_@cntr,f,c
  6243  002380  D7E6               	goto	l778
  6244  002382  AE25               	btfss	__tdiv_to_l_@exp1,7,c
  6245  002384  D016               	goto	l781
  6246  002386  5025               	movf	__tdiv_to_l_@exp1,w,c
  6247  002388  0A80               	xorlw	128
  6248  00238A  0F97               	addlw	151
  6249  00238C  B0D8               	btfsc	status,0,c
  6250  00238E  D009               	goto	l782
  6251  002390  0E00               	movlw	0
  6252  002392  6E15               	movwf	?__tdiv_to_l_,c
  6253  002394  0E00               	movlw	0
  6254  002396  6E16               	movwf	?__tdiv_to_l_+1,c
  6255  002398  0E00               	movlw	0
  6256  00239A  6E17               	movwf	?__tdiv_to_l_+2,c
  6257  00239C  0E00               	movlw	0
  6258  00239E  6E18               	movwf	?__tdiv_to_l_+3,c
  6259  0023A0  0012               	return	
  6260  0023A2                     l782:
  6261  0023A2  90D8               	bcf	status,0,c
  6262  0023A4  3223               	rrcf	__tdiv_to_l_@quot+3,f,c
  6263  0023A6  3222               	rrcf	__tdiv_to_l_@quot+2,f,c
  6264  0023A8  3221               	rrcf	__tdiv_to_l_@quot+1,f,c
  6265  0023AA  3220               	rrcf	__tdiv_to_l_@quot,f,c
  6266  0023AC  3E25               	incfsz	__tdiv_to_l_@exp1,f,c
  6267  0023AE  D7F9               	goto	l782
  6268  0023B0  D015               	goto	u3950
  6269  0023B2                     l781:
  6270  0023B2  0E17               	movlw	23
  6271  0023B4  6425               	cpfsgt	__tdiv_to_l_@exp1,c
  6272  0023B6  D00F               	goto	l787
  6273  0023B8  0E00               	movlw	0
  6274  0023BA  6E15               	movwf	?__tdiv_to_l_,c
  6275  0023BC  0E00               	movlw	0
  6276  0023BE  6E16               	movwf	?__tdiv_to_l_+1,c
  6277  0023C0  0E00               	movlw	0
  6278  0023C2  6E17               	movwf	?__tdiv_to_l_+2,c
  6279  0023C4  0E00               	movlw	0
  6280  0023C6  6E18               	movwf	?__tdiv_to_l_+3,c
  6281  0023C8  0012               	return	
  6282  0023CA  90D8               	bcf	status,0,c
  6283  0023CC  3620               	rlcf	__tdiv_to_l_@quot,f,c
  6284  0023CE  3621               	rlcf	__tdiv_to_l_@quot+1,f,c
  6285  0023D0  3622               	rlcf	__tdiv_to_l_@quot+2,f,c
  6286  0023D2  3623               	rlcf	__tdiv_to_l_@quot+3,f,c
  6287  0023D4  0625               	decf	__tdiv_to_l_@exp1,f,c
  6288  0023D6                     l787:
  6289  0023D6  5025               	movf	__tdiv_to_l_@exp1,w,c
  6290  0023D8  A4D8               	btfss	status,2,c
  6291  0023DA  D7F7               	goto	l788
  6292  0023DC                     u3950:
  6293  0023DC  C020  F015         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  6294  0023E0  C021  F016         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  6295  0023E4  C022  F017         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  6296  0023E8  C023  F018         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  6297  0023EC  0012               	return		;funcret
  6298  0023EE                     __end_of__tdiv_to_l_:
  6299                           	opt stack 0
  6300                           tblptru	equ	0xFF8
  6301                           tblptrh	equ	0xFF7
  6302                           tblptrl	equ	0xFF6
  6303                           tablat	equ	0xFF5
  6304                           prodh	equ	0xFF4
  6305                           prodl	equ	0xFF3
  6306                           postinc0	equ	0xFEE
  6307                           wreg	equ	0xFE8
  6308                           indf1	equ	0xFE7
  6309                           postdec1	equ	0xFE5
  6310                           fsr1h	equ	0xFE2
  6311                           fsr1l	equ	0xFE1
  6312                           indf2	equ	0xFDF
  6313                           postinc2	equ	0xFDE
  6314                           postdec2	equ	0xFDD
  6315                           fsr2h	equ	0xFDA
  6316                           fsr2l	equ	0xFD9
  6317                           status	equ	0xFD8
  6318                           
  6319 ;; *************** function __div_to_l_ *****************
  6320 ;; Defined at:
  6321 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fldivl.c"
  6322 ;; Parameters:    Size  Location     Type
  6323 ;;  f1              4   20[COMRAM] unsigned long 
  6324 ;;  f2              4   24[COMRAM] unsigned long 
  6325 ;; Auto vars:     Size  Location     Type
  6326 ;;  quot            4   28[COMRAM] unsigned long 
  6327 ;;  exp1            1   33[COMRAM] unsigned char 
  6328 ;;  cntr            1   32[COMRAM] unsigned char 
  6329 ;; Return value:  Size  Location     Type
  6330 ;;                  4   20[COMRAM] unsigned long 
  6331 ;; Registers used:
  6332 ;;		wreg, status,2, status,0
  6333 ;; Tracked objects:
  6334 ;;		On entry : 0/0
  6335 ;;		On exit  : 0/0
  6336 ;;		Unchanged: 0/0
  6337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6338 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6339 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6340 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6341 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6342 ;;Total ram usage:       14 bytes
  6343 ;; Hardware stack levels used:    1
  6344 ;; Hardware stack levels required when called:    3
  6345 ;; This function calls:
  6346 ;;		Nothing
  6347 ;; This function is called by:
  6348 ;;		_sprintf
  6349 ;; This function uses a non-reentrant model
  6350 ;;
  6351                           
  6352                           	psect	text9
  6353  002518                     __ptext9:
  6354                           	opt stack 0
  6355  002518                     __div_to_l_:
  6356                           	opt stack 26
  6357                           
  6358                           ;incstack = 0
  6359  002518  3417               	rlcf	__div_to_l_@f1+2,w,c
  6360  00251A  3418               	rlcf	__div_to_l_@f1+3,w,c
  6361  00251C  6E22               	movwf	__div_to_l_@exp1,c
  6362  00251E  5022               	movf	__div_to_l_@exp1,w,c
  6363  002520  A4D8               	btfss	status,2,c
  6364  002522  D009               	goto	l671
  6365  002524  0E00               	movlw	0
  6366  002526  6E15               	movwf	?__div_to_l_,c
  6367  002528  0E00               	movlw	0
  6368  00252A  6E16               	movwf	?__div_to_l_+1,c
  6369  00252C  0E00               	movlw	0
  6370  00252E  6E17               	movwf	?__div_to_l_+2,c
  6371  002530  0E00               	movlw	0
  6372  002532  6E18               	movwf	?__div_to_l_+3,c
  6373  002534  0012               	return	
  6374  002536                     l671:
  6375  002536  341B               	rlcf	__div_to_l_@f2+2,w,c
  6376  002538  341C               	rlcf	__div_to_l_@f2+3,w,c
  6377  00253A  6E21               	movwf	__div_to_l_@cntr,c
  6378  00253C  5021               	movf	__div_to_l_@cntr,w,c
  6379  00253E  A4D8               	btfss	status,2,c
  6380  002540  D009               	goto	l673
  6381  002542  0E00               	movlw	0
  6382  002544  6E15               	movwf	?__div_to_l_,c
  6383  002546  0E00               	movlw	0
  6384  002548  6E16               	movwf	?__div_to_l_+1,c
  6385  00254A  0E00               	movlw	0
  6386  00254C  6E17               	movwf	?__div_to_l_+2,c
  6387  00254E  0E00               	movlw	0
  6388  002550  6E18               	movwf	?__div_to_l_+3,c
  6389  002552  0012               	return	
  6390  002554                     l673:
  6391  002554  8E17               	bsf	__div_to_l_@f1+2,7,c
  6392  002556  0EFF               	movlw	255
  6393  002558  1615               	andwf	__div_to_l_@f1,f,c
  6394  00255A  0EFF               	movlw	255
  6395  00255C  1616               	andwf	__div_to_l_@f1+1,f,c
  6396  00255E  0EFF               	movlw	255
  6397  002560  1617               	andwf	__div_to_l_@f1+2,f,c
  6398  002562  0E00               	movlw	0
  6399  002564  1618               	andwf	__div_to_l_@f1+3,f,c
  6400  002566  8E1B               	bsf	__div_to_l_@f2+2,7,c
  6401  002568  0EFF               	movlw	255
  6402  00256A  1619               	andwf	__div_to_l_@f2,f,c
  6403  00256C  0EFF               	movlw	255
  6404  00256E  161A               	andwf	__div_to_l_@f2+1,f,c
  6405  002570  0EFF               	movlw	255
  6406  002572  161B               	andwf	__div_to_l_@f2+2,f,c
  6407  002574  0E00               	movlw	0
  6408  002576  161C               	andwf	__div_to_l_@f2+3,f,c
  6409  002578  0E00               	movlw	0
  6410  00257A  6E1D               	movwf	__div_to_l_@quot,c
  6411  00257C  0E00               	movlw	0
  6412  00257E  6E1E               	movwf	__div_to_l_@quot+1,c
  6413  002580  0E00               	movlw	0
  6414  002582  6E1F               	movwf	__div_to_l_@quot+2,c
  6415  002584  0E00               	movlw	0
  6416  002586  6E20               	movwf	__div_to_l_@quot+3,c
  6417  002588  0E7F               	movlw	127
  6418  00258A  5E22               	subwf	__div_to_l_@exp1,f,c
  6419  00258C  5021               	movf	__div_to_l_@cntr,w,c
  6420  00258E  0FA0               	addlw	160
  6421  002590  5E22               	subwf	__div_to_l_@exp1,f,c
  6422  002592  0E20               	movlw	32
  6423  002594  6E21               	movwf	__div_to_l_@cntr,c
  6424  002596  90D8               	bcf	status,0,c
  6425  002598  361D               	rlcf	__div_to_l_@quot,f,c
  6426  00259A  361E               	rlcf	__div_to_l_@quot+1,f,c
  6427  00259C  361F               	rlcf	__div_to_l_@quot+2,f,c
  6428  00259E  3620               	rlcf	__div_to_l_@quot+3,f,c
  6429  0025A0  5019               	movf	__div_to_l_@f2,w,c
  6430  0025A2  5C15               	subwf	__div_to_l_@f1,w,c
  6431  0025A4  501A               	movf	__div_to_l_@f2+1,w,c
  6432  0025A6  5816               	subwfb	__div_to_l_@f1+1,w,c
  6433  0025A8  501B               	movf	__div_to_l_@f2+2,w,c
  6434  0025AA  5817               	subwfb	__div_to_l_@f1+2,w,c
  6435  0025AC  501C               	movf	__div_to_l_@f2+3,w,c
  6436  0025AE  5818               	subwfb	__div_to_l_@f1+3,w,c
  6437  0025B0  A0D8               	btfss	status,0,c
  6438  0025B2  D009               	goto	l675
  6439  0025B4  5019               	movf	__div_to_l_@f2,w,c
  6440  0025B6  5E15               	subwf	__div_to_l_@f1,f,c
  6441  0025B8  501A               	movf	__div_to_l_@f2+1,w,c
  6442  0025BA  5A16               	subwfb	__div_to_l_@f1+1,f,c
  6443  0025BC  501B               	movf	__div_to_l_@f2+2,w,c
  6444  0025BE  5A17               	subwfb	__div_to_l_@f1+2,f,c
  6445  0025C0  501C               	movf	__div_to_l_@f2+3,w,c
  6446  0025C2  5A18               	subwfb	__div_to_l_@f1+3,f,c
  6447  0025C4  801D               	bsf	__div_to_l_@quot,0,c
  6448  0025C6                     l675:
  6449  0025C6  90D8               	bcf	status,0,c
  6450  0025C8  3615               	rlcf	__div_to_l_@f1,f,c
  6451  0025CA  3616               	rlcf	__div_to_l_@f1+1,f,c
  6452  0025CC  3617               	rlcf	__div_to_l_@f1+2,f,c
  6453  0025CE  3618               	rlcf	__div_to_l_@f1+3,f,c
  6454  0025D0  2E21               	decfsz	__div_to_l_@cntr,f,c
  6455  0025D2  D7E1               	goto	l674
  6456  0025D4  AE22               	btfss	__div_to_l_@exp1,7,c
  6457  0025D6  D016               	goto	l677
  6458  0025D8  5022               	movf	__div_to_l_@exp1,w,c
  6459  0025DA  0A80               	xorlw	128
  6460  0025DC  0F9F               	addlw	159
  6461  0025DE  B0D8               	btfsc	status,0,c
  6462  0025E0  D009               	goto	l678
  6463  0025E2  0E00               	movlw	0
  6464  0025E4  6E15               	movwf	?__div_to_l_,c
  6465  0025E6  0E00               	movlw	0
  6466  0025E8  6E16               	movwf	?__div_to_l_+1,c
  6467  0025EA  0E00               	movlw	0
  6468  0025EC  6E17               	movwf	?__div_to_l_+2,c
  6469  0025EE  0E00               	movlw	0
  6470  0025F0  6E18               	movwf	?__div_to_l_+3,c
  6471  0025F2  0012               	return	
  6472  0025F4                     l678:
  6473  0025F4  90D8               	bcf	status,0,c
  6474  0025F6  3220               	rrcf	__div_to_l_@quot+3,f,c
  6475  0025F8  321F               	rrcf	__div_to_l_@quot+2,f,c
  6476  0025FA  321E               	rrcf	__div_to_l_@quot+1,f,c
  6477  0025FC  321D               	rrcf	__div_to_l_@quot,f,c
  6478  0025FE  3E22               	incfsz	__div_to_l_@exp1,f,c
  6479  002600  D7F9               	goto	l678
  6480  002602  D015               	goto	u4020
  6481  002604                     l677:
  6482  002604  0E1F               	movlw	31
  6483  002606  6422               	cpfsgt	__div_to_l_@exp1,c
  6484  002608  D00F               	goto	l683
  6485  00260A  0E00               	movlw	0
  6486  00260C  6E15               	movwf	?__div_to_l_,c
  6487  00260E  0E00               	movlw	0
  6488  002610  6E16               	movwf	?__div_to_l_+1,c
  6489  002612  0E00               	movlw	0
  6490  002614  6E17               	movwf	?__div_to_l_+2,c
  6491  002616  0E00               	movlw	0
  6492  002618  6E18               	movwf	?__div_to_l_+3,c
  6493  00261A  0012               	return	
  6494  00261C  90D8               	bcf	status,0,c
  6495  00261E  361D               	rlcf	__div_to_l_@quot,f,c
  6496  002620  361E               	rlcf	__div_to_l_@quot+1,f,c
  6497  002622  361F               	rlcf	__div_to_l_@quot+2,f,c
  6498  002624  3620               	rlcf	__div_to_l_@quot+3,f,c
  6499  002626  0622               	decf	__div_to_l_@exp1,f,c
  6500  002628                     l683:
  6501  002628  5022               	movf	__div_to_l_@exp1,w,c
  6502  00262A  A4D8               	btfss	status,2,c
  6503  00262C  D7F7               	goto	l684
  6504  00262E                     u4020:
  6505  00262E  C01D  F015         	movff	__div_to_l_@quot,?__div_to_l_
  6506  002632  C01E  F016         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  6507  002636  C01F  F017         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  6508  00263A  C020  F018         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  6509  00263E  0012               	return		;funcret
  6510  002640                     __end_of__div_to_l_:
  6511                           	opt stack 0
  6512                           tblptru	equ	0xFF8
  6513                           tblptrh	equ	0xFF7
  6514                           tblptrl	equ	0xFF6
  6515                           tablat	equ	0xFF5
  6516                           prodh	equ	0xFF4
  6517                           prodl	equ	0xFF3
  6518                           postinc0	equ	0xFEE
  6519                           wreg	equ	0xFE8
  6520                           indf1	equ	0xFE7
  6521                           postdec1	equ	0xFE5
  6522                           fsr1h	equ	0xFE2
  6523                           fsr1l	equ	0xFE1
  6524                           indf2	equ	0xFDF
  6525                           postinc2	equ	0xFDE
  6526                           postdec2	equ	0xFDD
  6527                           fsr2h	equ	0xFDA
  6528                           fsr2l	equ	0xFD9
  6529                           status	equ	0xFD8
  6530                           
  6531 ;; *************** function ___llmod *****************
  6532 ;; Defined at:
  6533 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  6534 ;; Parameters:    Size  Location     Type
  6535 ;;  dividend        4   33[COMRAM] unsigned long 
  6536 ;;  divisor         4   37[COMRAM] unsigned long 
  6537 ;; Auto vars:     Size  Location     Type
  6538 ;;  counter         1   41[COMRAM] unsigned char 
  6539 ;; Return value:  Size  Location     Type
  6540 ;;                  4   33[COMRAM] unsigned long 
  6541 ;; Registers used:
  6542 ;;		wreg, status,2, status,0
  6543 ;; Tracked objects:
  6544 ;;		On entry : 0/0
  6545 ;;		On exit  : 0/0
  6546 ;;		Unchanged: 0/0
  6547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6548 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6549 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6550 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6551 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6552 ;;Total ram usage:        9 bytes
  6553 ;; Hardware stack levels used:    1
  6554 ;; Hardware stack levels required when called:    3
  6555 ;; This function calls:
  6556 ;;		Nothing
  6557 ;; This function is called by:
  6558 ;;		_sprintf
  6559 ;; This function uses a non-reentrant model
  6560 ;;
  6561                           
  6562                           	psect	text10
  6563  002CC4                     __ptext10:
  6564                           	opt stack 0
  6565  002CC4                     ___llmod:
  6566                           	opt stack 26
  6567                           
  6568                           ;incstack = 0
  6569  002CC4  5026               	movf	___llmod@divisor,w,c
  6570  002CC6  1027               	iorwf	___llmod@divisor+1,w,c
  6571  002CC8  1028               	iorwf	___llmod@divisor+2,w,c
  6572  002CCA  1029               	iorwf	___llmod@divisor+3,w,c
  6573  002CCC  B4D8               	btfsc	status,2,c
  6574  002CCE  D024               	goto	l876
  6575  002CD0  0E01               	movlw	1
  6576  002CD2  6E2A               	movwf	___llmod@counter,c
  6577  002CD4  D006               	goto	l871
  6578  002CD6  90D8               	bcf	status,0,c
  6579  002CD8  3626               	rlcf	___llmod@divisor,f,c
  6580  002CDA  3627               	rlcf	___llmod@divisor+1,f,c
  6581  002CDC  3628               	rlcf	___llmod@divisor+2,f,c
  6582  002CDE  3629               	rlcf	___llmod@divisor+3,f,c
  6583  002CE0  2A2A               	incf	___llmod@counter,f,c
  6584  002CE2                     l871:
  6585  002CE2  AE29               	btfss	___llmod@divisor+3,7,c
  6586  002CE4  D7F8               	goto	l872
  6587  002CE6                     u4430:
  6588  002CE6  5026               	movf	___llmod@divisor,w,c
  6589  002CE8  5C22               	subwf	___llmod@dividend,w,c
  6590  002CEA  5027               	movf	___llmod@divisor+1,w,c
  6591  002CEC  5823               	subwfb	___llmod@dividend+1,w,c
  6592  002CEE  5028               	movf	___llmod@divisor+2,w,c
  6593  002CF0  5824               	subwfb	___llmod@dividend+2,w,c
  6594  002CF2  5029               	movf	___llmod@divisor+3,w,c
  6595  002CF4  5825               	subwfb	___llmod@dividend+3,w,c
  6596  002CF6  A0D8               	btfss	status,0,c
  6597  002CF8  D008               	goto	l875
  6598  002CFA  5026               	movf	___llmod@divisor,w,c
  6599  002CFC  5E22               	subwf	___llmod@dividend,f,c
  6600  002CFE  5027               	movf	___llmod@divisor+1,w,c
  6601  002D00  5A23               	subwfb	___llmod@dividend+1,f,c
  6602  002D02  5028               	movf	___llmod@divisor+2,w,c
  6603  002D04  5A24               	subwfb	___llmod@dividend+2,f,c
  6604  002D06  5029               	movf	___llmod@divisor+3,w,c
  6605  002D08  5A25               	subwfb	___llmod@dividend+3,f,c
  6606  002D0A                     l875:
  6607  002D0A  90D8               	bcf	status,0,c
  6608  002D0C  3229               	rrcf	___llmod@divisor+3,f,c
  6609  002D0E  3228               	rrcf	___llmod@divisor+2,f,c
  6610  002D10  3227               	rrcf	___llmod@divisor+1,f,c
  6611  002D12  3226               	rrcf	___llmod@divisor,f,c
  6612  002D14  2E2A               	decfsz	___llmod@counter,f,c
  6613  002D16  D7E7               	goto	u4430
  6614  002D18                     l876:
  6615  002D18  C022  F022         	movff	___llmod@dividend,?___llmod
  6616  002D1C  C023  F023         	movff	___llmod@dividend+1,?___llmod+1
  6617  002D20  C024  F024         	movff	___llmod@dividend+2,?___llmod+2
  6618  002D24  C025  F025         	movff	___llmod@dividend+3,?___llmod+3
  6619  002D28  0012               	return		;funcret
  6620  002D2A                     __end_of___llmod:
  6621                           	opt stack 0
  6622                           tblptru	equ	0xFF8
  6623                           tblptrh	equ	0xFF7
  6624                           tblptrl	equ	0xFF6
  6625                           tablat	equ	0xFF5
  6626                           prodh	equ	0xFF4
  6627                           prodl	equ	0xFF3
  6628                           postinc0	equ	0xFEE
  6629                           wreg	equ	0xFE8
  6630                           indf1	equ	0xFE7
  6631                           postdec1	equ	0xFE5
  6632                           fsr1h	equ	0xFE2
  6633                           fsr1l	equ	0xFE1
  6634                           indf2	equ	0xFDF
  6635                           postinc2	equ	0xFDE
  6636                           postdec2	equ	0xFDD
  6637                           fsr2h	equ	0xFDA
  6638                           fsr2l	equ	0xFD9
  6639                           status	equ	0xFD8
  6640                           
  6641 ;; *************** function ___lldiv *****************
  6642 ;; Defined at:
  6643 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  6644 ;; Parameters:    Size  Location     Type
  6645 ;;  dividend        4   20[COMRAM] unsigned long 
  6646 ;;  divisor         4   24[COMRAM] unsigned long 
  6647 ;; Auto vars:     Size  Location     Type
  6648 ;;  quotient        4   28[COMRAM] unsigned long 
  6649 ;;  counter         1   32[COMRAM] unsigned char 
  6650 ;; Return value:  Size  Location     Type
  6651 ;;                  4   20[COMRAM] unsigned long 
  6652 ;; Registers used:
  6653 ;;		wreg, status,2, status,0
  6654 ;; Tracked objects:
  6655 ;;		On entry : 0/0
  6656 ;;		On exit  : 0/0
  6657 ;;		Unchanged: 0/0
  6658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6659 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6660 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6662 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6663 ;;Total ram usage:       13 bytes
  6664 ;; Hardware stack levels used:    1
  6665 ;; Hardware stack levels required when called:    3
  6666 ;; This function calls:
  6667 ;;		Nothing
  6668 ;; This function is called by:
  6669 ;;		_sprintf
  6670 ;; This function uses a non-reentrant model
  6671 ;;
  6672                           
  6673                           	psect	text11
  6674  002A5A                     __ptext11:
  6675                           	opt stack 0
  6676  002A5A                     ___lldiv:
  6677                           	opt stack 26
  6678                           
  6679                           ;incstack = 0
  6680  002A5A  0E00               	movlw	0
  6681  002A5C  6E1D               	movwf	___lldiv@quotient,c
  6682  002A5E  0E00               	movlw	0
  6683  002A60  6E1E               	movwf	___lldiv@quotient+1,c
  6684  002A62  0E00               	movlw	0
  6685  002A64  6E1F               	movwf	___lldiv@quotient+2,c
  6686  002A66  0E00               	movlw	0
  6687  002A68  6E20               	movwf	___lldiv@quotient+3,c
  6688  002A6A  5019               	movf	___lldiv@divisor,w,c
  6689  002A6C  101A               	iorwf	___lldiv@divisor+1,w,c
  6690  002A6E  101B               	iorwf	___lldiv@divisor+2,w,c
  6691  002A70  101C               	iorwf	___lldiv@divisor+3,w,c
  6692  002A72  B4D8               	btfsc	status,2,c
  6693  002A74  D02A               	goto	l866
  6694  002A76  0E01               	movlw	1
  6695  002A78  6E21               	movwf	___lldiv@counter,c
  6696  002A7A  D006               	goto	l861
  6697  002A7C  90D8               	bcf	status,0,c
  6698  002A7E  3619               	rlcf	___lldiv@divisor,f,c
  6699  002A80  361A               	rlcf	___lldiv@divisor+1,f,c
  6700  002A82  361B               	rlcf	___lldiv@divisor+2,f,c
  6701  002A84  361C               	rlcf	___lldiv@divisor+3,f,c
  6702  002A86  2A21               	incf	___lldiv@counter,f,c
  6703  002A88                     l861:
  6704  002A88  AE1C               	btfss	___lldiv@divisor+3,7,c
  6705  002A8A  D7F8               	goto	l862
  6706  002A8C                     u4400:
  6707  002A8C  90D8               	bcf	status,0,c
  6708  002A8E  361D               	rlcf	___lldiv@quotient,f,c
  6709  002A90  361E               	rlcf	___lldiv@quotient+1,f,c
  6710  002A92  361F               	rlcf	___lldiv@quotient+2,f,c
  6711  002A94  3620               	rlcf	___lldiv@quotient+3,f,c
  6712  002A96  5019               	movf	___lldiv@divisor,w,c
  6713  002A98  5C15               	subwf	___lldiv@dividend,w,c
  6714  002A9A  501A               	movf	___lldiv@divisor+1,w,c
  6715  002A9C  5816               	subwfb	___lldiv@dividend+1,w,c
  6716  002A9E  501B               	movf	___lldiv@divisor+2,w,c
  6717  002AA0  5817               	subwfb	___lldiv@dividend+2,w,c
  6718  002AA2  501C               	movf	___lldiv@divisor+3,w,c
  6719  002AA4  5818               	subwfb	___lldiv@dividend+3,w,c
  6720  002AA6  A0D8               	btfss	status,0,c
  6721  002AA8  D009               	goto	l865
  6722  002AAA  5019               	movf	___lldiv@divisor,w,c
  6723  002AAC  5E15               	subwf	___lldiv@dividend,f,c
  6724  002AAE  501A               	movf	___lldiv@divisor+1,w,c
  6725  002AB0  5A16               	subwfb	___lldiv@dividend+1,f,c
  6726  002AB2  501B               	movf	___lldiv@divisor+2,w,c
  6727  002AB4  5A17               	subwfb	___lldiv@dividend+2,f,c
  6728  002AB6  501C               	movf	___lldiv@divisor+3,w,c
  6729  002AB8  5A18               	subwfb	___lldiv@dividend+3,f,c
  6730  002ABA  801D               	bsf	___lldiv@quotient,0,c
  6731  002ABC                     l865:
  6732  002ABC  90D8               	bcf	status,0,c
  6733  002ABE  321C               	rrcf	___lldiv@divisor+3,f,c
  6734  002AC0  321B               	rrcf	___lldiv@divisor+2,f,c
  6735  002AC2  321A               	rrcf	___lldiv@divisor+1,f,c
  6736  002AC4  3219               	rrcf	___lldiv@divisor,f,c
  6737  002AC6  2E21               	decfsz	___lldiv@counter,f,c
  6738  002AC8  D7E1               	goto	u4400
  6739  002ACA                     l866:
  6740  002ACA  C01D  F015         	movff	___lldiv@quotient,?___lldiv
  6741  002ACE  C01E  F016         	movff	___lldiv@quotient+1,?___lldiv+1
  6742  002AD2  C01F  F017         	movff	___lldiv@quotient+2,?___lldiv+2
  6743  002AD6  C020  F018         	movff	___lldiv@quotient+3,?___lldiv+3
  6744  002ADA  0012               	return		;funcret
  6745  002ADC                     __end_of___lldiv:
  6746                           	opt stack 0
  6747                           tblptru	equ	0xFF8
  6748                           tblptrh	equ	0xFF7
  6749                           tblptrl	equ	0xFF6
  6750                           tablat	equ	0xFF5
  6751                           prodh	equ	0xFF4
  6752                           prodl	equ	0xFF3
  6753                           postinc0	equ	0xFEE
  6754                           wreg	equ	0xFE8
  6755                           indf1	equ	0xFE7
  6756                           postdec1	equ	0xFE5
  6757                           fsr1h	equ	0xFE2
  6758                           fsr1l	equ	0xFE1
  6759                           indf2	equ	0xFDF
  6760                           postinc2	equ	0xFDE
  6761                           postdec2	equ	0xFDD
  6762                           fsr2h	equ	0xFDA
  6763                           fsr2l	equ	0xFD9
  6764                           status	equ	0xFD8
  6765                           
  6766 ;; *************** function ___fltol *****************
  6767 ;; Defined at:
  6768 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fltol.c"
  6769 ;; Parameters:    Size  Location     Type
  6770 ;;  f1              4   68[COMRAM] unsigned long 
  6771 ;; Auto vars:     Size  Location     Type
  6772 ;;  exp1            1   77[COMRAM] unsigned char 
  6773 ;;  sign1           1   76[COMRAM] unsigned char 
  6774 ;; Return value:  Size  Location     Type
  6775 ;;                  4   68[COMRAM] long 
  6776 ;; Registers used:
  6777 ;;		wreg, status,2, status,0
  6778 ;; Tracked objects:
  6779 ;;		On entry : 0/0
  6780 ;;		On exit  : 0/0
  6781 ;;		Unchanged: 0/0
  6782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6783 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6784 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6785 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6786 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6787 ;;Total ram usage:       10 bytes
  6788 ;; Hardware stack levels used:    1
  6789 ;; Hardware stack levels required when called:    3
  6790 ;; This function calls:
  6791 ;;		Nothing
  6792 ;; This function is called by:
  6793 ;;		_sprintf
  6794 ;; This function uses a non-reentrant model
  6795 ;;
  6796                           
  6797                           	psect	text12
  6798  002846                     __ptext12:
  6799                           	opt stack 0
  6800  002846                     ___fltol:
  6801                           	opt stack 26
  6802                           
  6803                           ;incstack = 0
  6804  002846  3447               	rlcf	___fltol@f1+2,w,c
  6805  002848  3448               	rlcf	___fltol@f1+3,w,c
  6806  00284A  6E4E               	movwf	___fltol@exp1,c
  6807  00284C  504E               	movf	___fltol@exp1,w,c
  6808  00284E  A4D8               	btfss	status,2,c
  6809  002850  D009               	goto	l718
  6810  002852  0E00               	movlw	0
  6811  002854  6E45               	movwf	?___fltol,c
  6812  002856  0E00               	movlw	0
  6813  002858  6E46               	movwf	?___fltol+1,c
  6814  00285A  0E00               	movlw	0
  6815  00285C  6E47               	movwf	?___fltol+2,c
  6816  00285E  0E00               	movlw	0
  6817  002860  6E48               	movwf	?___fltol+3,c
  6818  002862  0012               	return	
  6819  002864                     l718:
  6820  002864  C045  F049         	movff	___fltol@f1,??___fltol
  6821  002868  C046  F04A         	movff	___fltol@f1+1,??___fltol+1
  6822  00286C  C047  F04B         	movff	___fltol@f1+2,??___fltol+2
  6823  002870  C048  F04C         	movff	___fltol@f1+3,??___fltol+3
  6824  002874  0E20               	movlw	32
  6825  002876  D005               	goto	u4330
  6826  002878                     u4335:
  6827  002878  90D8               	bcf	status,0,c
  6828  00287A  324C               	rrcf	??___fltol+3,f,c
  6829  00287C  324B               	rrcf	??___fltol+2,f,c
  6830  00287E  324A               	rrcf	??___fltol+1,f,c
  6831  002880  3249               	rrcf	??___fltol,f,c
  6832  002882                     u4330:
  6833  002882  2EE8               	decfsz	wreg,f,c
  6834  002884  D7F9               	goto	u4335
  6835  002886  5049               	movf	??___fltol,w,c
  6836  002888  6E4D               	movwf	___fltol@sign1,c
  6837  00288A  8E47               	bsf	___fltol@f1+2,7,c
  6838  00288C  0EFF               	movlw	255
  6839  00288E  1645               	andwf	___fltol@f1,f,c
  6840  002890  0EFF               	movlw	255
  6841  002892  1646               	andwf	___fltol@f1+1,f,c
  6842  002894  0EFF               	movlw	255
  6843  002896  1647               	andwf	___fltol@f1+2,f,c
  6844  002898  0E00               	movlw	0
  6845  00289A  1648               	andwf	___fltol@f1+3,f,c
  6846  00289C  0E96               	movlw	150
  6847  00289E  5E4E               	subwf	___fltol@exp1,f,c
  6848  0028A0  AE4E               	btfss	___fltol@exp1,7,c
  6849  0028A2  D016               	goto	l720
  6850  0028A4  504E               	movf	___fltol@exp1,w,c
  6851  0028A6  0A80               	xorlw	128
  6852  0028A8  0F97               	addlw	151
  6853  0028AA  B0D8               	btfsc	status,0,c
  6854  0028AC  D009               	goto	l721
  6855  0028AE  0E00               	movlw	0
  6856  0028B0  6E45               	movwf	?___fltol,c
  6857  0028B2  0E00               	movlw	0
  6858  0028B4  6E46               	movwf	?___fltol+1,c
  6859  0028B6  0E00               	movlw	0
  6860  0028B8  6E47               	movwf	?___fltol+2,c
  6861  0028BA  0E00               	movlw	0
  6862  0028BC  6E48               	movwf	?___fltol+3,c
  6863  0028BE  0012               	return	
  6864  0028C0                     l721:
  6865  0028C0  90D8               	bcf	status,0,c
  6866  0028C2  3248               	rrcf	___fltol@f1+3,f,c
  6867  0028C4  3247               	rrcf	___fltol@f1+2,f,c
  6868  0028C6  3246               	rrcf	___fltol@f1+1,f,c
  6869  0028C8  3245               	rrcf	___fltol@f1,f,c
  6870  0028CA  3E4E               	incfsz	___fltol@exp1,f,c
  6871  0028CC  D7F9               	goto	l721
  6872  0028CE  D015               	goto	u4370
  6873  0028D0                     l720:
  6874  0028D0  0E1F               	movlw	31
  6875  0028D2  644E               	cpfsgt	___fltol@exp1,c
  6876  0028D4  D00F               	goto	l726
  6877  0028D6  0E00               	movlw	0
  6878  0028D8  6E45               	movwf	?___fltol,c
  6879  0028DA  0E00               	movlw	0
  6880  0028DC  6E46               	movwf	?___fltol+1,c
  6881  0028DE  0E00               	movlw	0
  6882  0028E0  6E47               	movwf	?___fltol+2,c
  6883  0028E2  0E00               	movlw	0
  6884  0028E4  6E48               	movwf	?___fltol+3,c
  6885  0028E6  0012               	return	
  6886  0028E8  90D8               	bcf	status,0,c
  6887  0028EA  3645               	rlcf	___fltol@f1,f,c
  6888  0028EC  3646               	rlcf	___fltol@f1+1,f,c
  6889  0028EE  3647               	rlcf	___fltol@f1+2,f,c
  6890  0028F0  3648               	rlcf	___fltol@f1+3,f,c
  6891  0028F2  064E               	decf	___fltol@exp1,f,c
  6892  0028F4                     l726:
  6893  0028F4  504E               	movf	___fltol@exp1,w,c
  6894  0028F6  A4D8               	btfss	status,2,c
  6895  0028F8  D7F7               	goto	l727
  6896  0028FA                     u4370:
  6897  0028FA  504D               	movf	___fltol@sign1,w,c
  6898  0028FC  B4D8               	btfsc	status,2,c
  6899  0028FE  D008               	goto	l729
  6900  002900  1E48               	comf	___fltol@f1+3,f,c
  6901  002902  1E47               	comf	___fltol@f1+2,f,c
  6902  002904  1E46               	comf	___fltol@f1+1,f,c
  6903  002906  6C45               	negf	___fltol@f1,c
  6904  002908  0E00               	movlw	0
  6905  00290A  2246               	addwfc	___fltol@f1+1,f,c
  6906  00290C  2247               	addwfc	___fltol@f1+2,f,c
  6907  00290E  2248               	addwfc	___fltol@f1+3,f,c
  6908  002910                     l729:
  6909  002910  C045  F045         	movff	___fltol@f1,?___fltol
  6910  002914  C046  F046         	movff	___fltol@f1+1,?___fltol+1
  6911  002918  C047  F047         	movff	___fltol@f1+2,?___fltol+2
  6912  00291C  C048  F048         	movff	___fltol@f1+3,?___fltol+3
  6913  002920  0012               	return	
  6914  002922                     __end_of___fltol:
  6915                           	opt stack 0
  6916                           tblptru	equ	0xFF8
  6917                           tblptrh	equ	0xFF7
  6918                           tblptrl	equ	0xFF6
  6919                           tablat	equ	0xFF5
  6920                           prodh	equ	0xFF4
  6921                           prodl	equ	0xFF3
  6922                           postinc0	equ	0xFEE
  6923                           wreg	equ	0xFE8
  6924                           indf1	equ	0xFE7
  6925                           postdec1	equ	0xFE5
  6926                           fsr1h	equ	0xFE2
  6927                           fsr1l	equ	0xFE1
  6928                           indf2	equ	0xFDF
  6929                           postinc2	equ	0xFDE
  6930                           postdec2	equ	0xFDD
  6931                           fsr2h	equ	0xFDA
  6932                           fsr2l	equ	0xFD9
  6933                           status	equ	0xFD8
  6934                           
  6935 ;; *************** function ___flsub *****************
  6936 ;; Defined at:
  6937 ;;		line 245 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcadd.c"
  6938 ;; Parameters:    Size  Location     Type
  6939 ;;  b               4   92[COMRAM] long 
  6940 ;;  a               4   96[COMRAM] long 
  6941 ;; Auto vars:     Size  Location     Type
  6942 ;;		None
  6943 ;; Return value:  Size  Location     Type
  6944 ;;                  4   92[COMRAM] long 
  6945 ;; Registers used:
  6946 ;;		wreg, status,2, status,0, cstack
  6947 ;; Tracked objects:
  6948 ;;		On entry : 0/0
  6949 ;;		On exit  : 0/0
  6950 ;;		Unchanged: 0/0
  6951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6952 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6953 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6955 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6956 ;;Total ram usage:        8 bytes
  6957 ;; Hardware stack levels used:    1
  6958 ;; Hardware stack levels required when called:    4
  6959 ;; This function calls:
  6960 ;;		___fladd
  6961 ;; This function is called by:
  6962 ;;		_sprintf
  6963 ;; This function uses a non-reentrant model
  6964 ;;
  6965                           
  6966                           	psect	text13
  6967  002E7C                     __ptext13:
  6968                           	opt stack 0
  6969  002E7C                     ___flsub:
  6970                           	opt stack 25
  6971                           
  6972                           ;incstack = 0
  6973  002E7C  0E00               	movlw	0
  6974  002E7E  1A61               	xorwf	___flsub@a,f,c
  6975  002E80  0E00               	movlw	0
  6976  002E82  1A62               	xorwf	___flsub@a+1,f,c
  6977  002E84  0E00               	movlw	0
  6978  002E86  1A63               	xorwf	___flsub@a+2,f,c
  6979  002E88  0E80               	movlw	128
  6980  002E8A  1A64               	xorwf	___flsub@a+3,f,c
  6981  002E8C  C05D  F049         	movff	___flsub@b,___fladd@b
  6982  002E90  C05E  F04A         	movff	___flsub@b+1,___fladd@b+1
  6983  002E94  C05F  F04B         	movff	___flsub@b+2,___fladd@b+2
  6984  002E98  C060  F04C         	movff	___flsub@b+3,___fladd@b+3
  6985  002E9C  C061  F04D         	movff	___flsub@a,___fladd@a
  6986  002EA0  C062  F04E         	movff	___flsub@a+1,___fladd@a+1
  6987  002EA4  C063  F04F         	movff	___flsub@a+2,___fladd@a+2
  6988  002EA8  C064  F050         	movff	___flsub@a+3,___fladd@a+3
  6989  002EAC  EC67  F00C         	call	___fladd	;wreg free
  6990  002EB0  C049  F05D         	movff	?___fladd,?___flsub
  6991  002EB4  C04A  F05E         	movff	?___fladd+1,?___flsub+1
  6992  002EB8  C04B  F05F         	movff	?___fladd+2,?___flsub+2
  6993  002EBC  C04C  F060         	movff	?___fladd+3,?___flsub+3
  6994  002EC0  0012               	return	
  6995  002EC2                     __end_of___flsub:
  6996                           	opt stack 0
  6997                           tblptru	equ	0xFF8
  6998                           tblptrh	equ	0xFF7
  6999                           tblptrl	equ	0xFF6
  7000                           tablat	equ	0xFF5
  7001                           prodh	equ	0xFF4
  7002                           prodl	equ	0xFF3
  7003                           postinc0	equ	0xFEE
  7004                           wreg	equ	0xFE8
  7005                           indf1	equ	0xFE7
  7006                           postdec1	equ	0xFE5
  7007                           fsr1h	equ	0xFE2
  7008                           fsr1l	equ	0xFE1
  7009                           indf2	equ	0xFDF
  7010                           postinc2	equ	0xFDE
  7011                           postdec2	equ	0xFDD
  7012                           fsr2h	equ	0xFDA
  7013                           fsr2l	equ	0xFD9
  7014                           status	equ	0xFD8
  7015                           
  7016 ;; *************** function ___fladd *****************
  7017 ;; Defined at:
  7018 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcadd.c"
  7019 ;; Parameters:    Size  Location     Type
  7020 ;;  b               4   72[COMRAM] long 
  7021 ;;  a               4   76[COMRAM] long 
  7022 ;; Auto vars:     Size  Location     Type
  7023 ;;  grs             1   91[COMRAM] unsigned char 
  7024 ;;  bexp            1   90[COMRAM] unsigned char 
  7025 ;;  aexp            1   89[COMRAM] unsigned char 
  7026 ;;  signs           1   88[COMRAM] unsigned char 
  7027 ;; Return value:  Size  Location     Type
  7028 ;;                  4   72[COMRAM] unsigned char 
  7029 ;; Registers used:
  7030 ;;		wreg, status,2, status,0
  7031 ;; Tracked objects:
  7032 ;;		On entry : 0/0
  7033 ;;		On exit  : 0/0
  7034 ;;		Unchanged: 0/0
  7035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7036 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7037 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7038 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7039 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7040 ;;Total ram usage:       20 bytes
  7041 ;; Hardware stack levels used:    1
  7042 ;; Hardware stack levels required when called:    3
  7043 ;; This function calls:
  7044 ;;		Nothing
  7045 ;; This function is called by:
  7046 ;;		_sprintf
  7047 ;;		___flsub
  7048 ;; This function uses a non-reentrant model
  7049 ;;
  7050                           
  7051                           	psect	text14
  7052  0018CE                     __ptext14:
  7053                           	opt stack 0
  7054  0018CE                     ___fladd:
  7055                           	opt stack 25
  7056                           
  7057                           ;incstack = 0
  7058  0018CE  504C               	movf	___fladd@b+3,w,c
  7059  0018D0  0B80               	andlw	128
  7060  0018D2  6E59               	movwf	___fladd@signs,c
  7061  0018D4  504C               	movf	___fladd@b+3,w,c
  7062  0018D6  244C               	addwf	___fladd@b+3,w,c
  7063  0018D8  6E5B               	movwf	___fladd@bexp,c
  7064  0018DA  BE4B               	btfsc	___fladd@b+2,7,c
  7065  0018DC  805B               	bsf	___fladd@bexp,0,c
  7066  0018DE  505B               	movf	___fladd@bexp,w,c
  7067  0018E0  B4D8               	btfsc	status,2,c
  7068  0018E2  D00D               	goto	l943
  7069  0018E4  285B               	incf	___fladd@bexp,w,c
  7070  0018E6  A4D8               	btfss	status,2,c
  7071  0018E8  D008               	goto	l944
  7072  0018EA  0E00               	movlw	0
  7073  0018EC  6E49               	movwf	___fladd@b,c
  7074  0018EE  0E00               	movlw	0
  7075  0018F0  6E4A               	movwf	___fladd@b+1,c
  7076  0018F2  0E00               	movlw	0
  7077  0018F4  6E4B               	movwf	___fladd@b+2,c
  7078  0018F6  0E00               	movlw	0
  7079  0018F8  6E4C               	movwf	___fladd@b+3,c
  7080  0018FA                     l944:
  7081  0018FA  8E4B               	bsf	___fladd@b+2,7,c
  7082  0018FC  D006               	goto	L7
  7083  0018FE                     l943:
  7084  0018FE  0E00               	movlw	0
  7085  001900  6E49               	movwf	___fladd@b,c
  7086  001902  0E00               	movlw	0
  7087  001904  6E4A               	movwf	___fladd@b+1,c
  7088  001906  0E00               	movlw	0
  7089  001908  6E4B               	movwf	___fladd@b+2,c
  7090  00190A                     L7:
  7091  00190A  0E00               	movlw	0
  7092  00190C  6E4C               	movwf	___fladd@b+3,c
  7093  00190E  5050               	movf	___fladd@a+3,w,c
  7094  001910  0B80               	andlw	128
  7095  001912  6E5A               	movwf	___fladd@aexp,c
  7096  001914  5059               	movf	___fladd@signs,w,c
  7097  001916  185A               	xorwf	___fladd@aexp,w,c
  7098  001918  A4D8               	btfss	status,2,c
  7099  00191A  8C59               	bsf	___fladd@signs,6,c
  7100  00191C  5050               	movf	___fladd@a+3,w,c
  7101  00191E  2450               	addwf	___fladd@a+3,w,c
  7102  001920  6E5A               	movwf	___fladd@aexp,c
  7103  001922  BE4F               	btfsc	___fladd@a+2,7,c
  7104  001924  805A               	bsf	___fladd@aexp,0,c
  7105  001926  505A               	movf	___fladd@aexp,w,c
  7106  001928  B4D8               	btfsc	status,2,c
  7107  00192A  D00D               	goto	l948
  7108  00192C  285A               	incf	___fladd@aexp,w,c
  7109  00192E  A4D8               	btfss	status,2,c
  7110  001930  D008               	goto	l949
  7111  001932  0E00               	movlw	0
  7112  001934  6E4D               	movwf	___fladd@a,c
  7113  001936  0E00               	movlw	0
  7114  001938  6E4E               	movwf	___fladd@a+1,c
  7115  00193A  0E00               	movlw	0
  7116  00193C  6E4F               	movwf	___fladd@a+2,c
  7117  00193E  0E00               	movlw	0
  7118  001940  6E50               	movwf	___fladd@a+3,c
  7119  001942                     l949:
  7120  001942  8E4F               	bsf	___fladd@a+2,7,c
  7121  001944  D006               	goto	L8
  7122  001946                     l948:
  7123  001946  0E00               	movlw	0
  7124  001948  6E4D               	movwf	___fladd@a,c
  7125  00194A  0E00               	movlw	0
  7126  00194C  6E4E               	movwf	___fladd@a+1,c
  7127  00194E  0E00               	movlw	0
  7128  001950  6E4F               	movwf	___fladd@a+2,c
  7129  001952                     L8:
  7130  001952  0E00               	movlw	0
  7131  001954  6E50               	movwf	___fladd@a+3,c
  7132  001956  505B               	movf	___fladd@bexp,w,c
  7133  001958  5C5A               	subwf	___fladd@aexp,w,c
  7134  00195A  B0D8               	btfsc	status,0,c
  7135  00195C  D022               	goto	l951
  7136  00195E  AC59               	btfss	___fladd@signs,6,c
  7137  001960  D002               	goto	l952
  7138  001962  0E80               	movlw	128
  7139  001964  1A59               	xorwf	___fladd@signs,f,c
  7140  001966                     l952:
  7141  001966  C05B  F05C         	movff	___fladd@bexp,___fladd@grs
  7142  00196A  C05A  F05B         	movff	___fladd@aexp,___fladd@bexp
  7143  00196E  C05C  F05A         	movff	___fladd@grs,___fladd@aexp
  7144  001972  C049  F05C         	movff	___fladd@b,___fladd@grs
  7145  001976  C04D  F049         	movff	___fladd@a,___fladd@b
  7146  00197A  C05C  F04D         	movff	___fladd@grs,___fladd@a
  7147  00197E  C04A  F05C         	movff	___fladd@b+1,___fladd@grs
  7148  001982  C04E  F04A         	movff	___fladd@a+1,___fladd@b+1
  7149  001986  C05C  F04E         	movff	___fladd@grs,___fladd@a+1
  7150  00198A  C04B  F05C         	movff	___fladd@b+2,___fladd@grs
  7151  00198E  C04F  F04B         	movff	___fladd@a+2,___fladd@b+2
  7152  001992  C05C  F04F         	movff	___fladd@grs,___fladd@a+2
  7153  001996  C04C  F05C         	movff	___fladd@b+3,___fladd@grs
  7154  00199A  C050  F04C         	movff	___fladd@a+3,___fladd@b+3
  7155  00199E  C05C  F050         	movff	___fladd@grs,___fladd@a+3
  7156  0019A2                     l951:
  7157  0019A2  0E00               	movlw	0
  7158  0019A4  6E5C               	movwf	___fladd@grs,c
  7159  0019A6  505B               	movf	___fladd@bexp,w,c
  7160  0019A8  6E51               	movwf	??___fladd& (0+255),c
  7161  0019AA  6A52               	clrf	(??___fladd+1)& (0+255),c
  7162  0019AC  1E51               	comf	??___fladd,f,c
  7163  0019AE  1E52               	comf	??___fladd+1,f,c
  7164  0019B0  4A51               	infsnz	??___fladd,f,c
  7165  0019B2  2A52               	incf	??___fladd+1,f,c
  7166  0019B4  505A               	movf	___fladd@aexp,w,c
  7167  0019B6  6E53               	movwf	(??___fladd+2)& (0+255),c
  7168  0019B8  6A54               	clrf	(??___fladd+3)& (0+255),c
  7169  0019BA  5051               	movf	??___fladd,w,c
  7170  0019BC  2653               	addwf	??___fladd+2,f,c
  7171  0019BE  5052               	movf	??___fladd+1,w,c
  7172  0019C0  2254               	addwfc	??___fladd+3,f,c
  7173  0019C2  BE54               	btfsc	??___fladd+3,7,c
  7174  0019C4  D02C               	goto	l955
  7175  0019C6  5054               	movf	??___fladd+3,w,c
  7176  0019C8  E104               	bnz	u3150
  7177  0019CA  0E1A               	movlw	26
  7178  0019CC  5C53               	subwf	??___fladd+2,w,c
  7179  0019CE  A0D8               	btfss	status,0,c
  7180  0019D0  D026               	goto	l955
  7181  0019D2                     u3150:
  7182  0019D2  5049               	movf	___fladd@b,w,c
  7183  0019D4  104A               	iorwf	___fladd@b+1,w,c
  7184  0019D6  104B               	iorwf	___fladd@b+2,w,c
  7185  0019D8  104C               	iorwf	___fladd@b+3,w,c
  7186  0019DA  B4D8               	btfsc	status,2,c
  7187  0019DC  D002               	goto	u3160
  7188  0019DE  0E01               	movlw	1
  7189  0019E0  D001               	goto	u3170
  7190  0019E2                     u3160:
  7191  0019E2  0E00               	movlw	0
  7192  0019E4                     u3170:
  7193  0019E4  6E5C               	movwf	___fladd@grs,c
  7194  0019E6  0E00               	movlw	0
  7195  0019E8  6E49               	movwf	___fladd@b,c
  7196  0019EA  0E00               	movlw	0
  7197  0019EC  6E4A               	movwf	___fladd@b+1,c
  7198  0019EE  0E00               	movlw	0
  7199  0019F0  6E4B               	movwf	___fladd@b+2,c
  7200  0019F2  0E00               	movlw	0
  7201  0019F4  6E4C               	movwf	___fladd@b+3,c
  7202  0019F6  C05A  F05B         	movff	___fladd@aexp,___fladd@bexp
  7203  0019FA  D015               	goto	u3200
  7204  0019FC                     l956:
  7205  0019FC  A05C               	btfss	___fladd@grs,0,c
  7206  0019FE  D005               	goto	l957
  7207  001A00  90D8               	bcf	status,0,c
  7208  001A02  305C               	rrcf	___fladd@grs,w,c
  7209  001A04  0901               	iorlw	1
  7210  001A06  6E5C               	movwf	___fladd@grs,c
  7211  001A08  D002               	goto	l958
  7212  001A0A                     l957:
  7213  001A0A  90D8               	bcf	status,0,c
  7214  001A0C  325C               	rrcf	___fladd@grs,f,c
  7215  001A0E                     l958:
  7216  001A0E  B049               	btfsc	___fladd@b,0,c
  7217  001A10  8E5C               	bsf	___fladd@grs,7,c
  7218  001A12  344C               	rlcf	___fladd@b+3,w,c
  7219  001A14  324C               	rrcf	___fladd@b+3,f,c
  7220  001A16  324B               	rrcf	___fladd@b+2,f,c
  7221  001A18  324A               	rrcf	___fladd@b+1,f,c
  7222  001A1A  3249               	rrcf	___fladd@b,f,c
  7223  001A1C  2A5B               	incf	___fladd@bexp,f,c
  7224  001A1E                     l955:
  7225  001A1E  505A               	movf	___fladd@aexp,w,c
  7226  001A20  5C5B               	subwf	___fladd@bexp,w,c
  7227  001A22  A0D8               	btfss	status,0,c
  7228  001A24  D7EB               	goto	l956
  7229  001A26                     u3200:
  7230  001A26  BC59               	btfsc	___fladd@signs,6,c
  7231  001A28  D029               	goto	l961
  7232  001A2A  505B               	movf	___fladd@bexp,w,c
  7233  001A2C  A4D8               	btfss	status,2,c
  7234  001A2E  D009               	goto	l962
  7235  001A30  0E00               	movlw	0
  7236  001A32  6E49               	movwf	?___fladd,c
  7237  001A34  0E00               	movlw	0
  7238  001A36  6E4A               	movwf	?___fladd+1,c
  7239  001A38  0E00               	movlw	0
  7240  001A3A  6E4B               	movwf	?___fladd+2,c
  7241  001A3C  0E00               	movlw	0
  7242  001A3E  6E4C               	movwf	?___fladd+3,c
  7243  001A40  0012               	return	
  7244  001A42                     l962:
  7245  001A42  504D               	movf	___fladd@a,w,c
  7246  001A44  2649               	addwf	___fladd@b,f,c
  7247  001A46  504E               	movf	___fladd@a+1,w,c
  7248  001A48  224A               	addwfc	___fladd@b+1,f,c
  7249  001A4A  504F               	movf	___fladd@a+2,w,c
  7250  001A4C  224B               	addwfc	___fladd@b+2,f,c
  7251  001A4E  5050               	movf	___fladd@a+3,w,c
  7252  001A50  224C               	addwfc	___fladd@b+3,f,c
  7253  001A52  A04C               	btfss	___fladd@b+3,0,c
  7254  001A54  D083               	goto	u3330
  7255  001A56  A05C               	btfss	___fladd@grs,0,c
  7256  001A58  D006               	goto	l965
  7257  001A5A  90D8               	bcf	status,0,c
  7258  001A5C  325C               	rrcf	___fladd@grs,f,c
  7259  001A5E  505C               	movf	___fladd@grs,w,c
  7260  001A60  0901               	iorlw	1
  7261  001A62  6E5C               	movwf	___fladd@grs,c
  7262  001A64  D002               	goto	l966
  7263  001A66                     l965:
  7264  001A66  90D8               	bcf	status,0,c
  7265  001A68  325C               	rrcf	___fladd@grs,f,c
  7266  001A6A                     l966:
  7267  001A6A  B049               	btfsc	___fladd@b,0,c
  7268  001A6C  8E5C               	bsf	___fladd@grs,7,c
  7269  001A6E  344C               	rlcf	___fladd@b+3,w,c
  7270  001A70  324C               	rrcf	___fladd@b+3,f,c
  7271  001A72  324B               	rrcf	___fladd@b+2,f,c
  7272  001A74  324A               	rrcf	___fladd@b+1,f,c
  7273  001A76  3249               	rrcf	___fladd@b,f,c
  7274  001A78  2A5B               	incf	___fladd@bexp,f,c
  7275  001A7A  D070               	goto	u3330
  7276  001A7C                     l961:
  7277  001A7C  504D               	movf	___fladd@a,w,c
  7278  001A7E  5C49               	subwf	___fladd@b,w,c
  7279  001A80  504E               	movf	___fladd@a+1,w,c
  7280  001A82  584A               	subwfb	___fladd@b+1,w,c
  7281  001A84  504F               	movf	___fladd@a+2,w,c
  7282  001A86  584B               	subwfb	___fladd@b+2,w,c
  7283  001A88  504C               	movf	___fladd@b+3,w,c
  7284  001A8A  0A80               	xorlw	128
  7285  001A8C  6E51               	movwf	??___fladd& (0+255),c
  7286  001A8E  5050               	movf	___fladd@a+3,w,c
  7287  001A90  0A80               	xorlw	128
  7288  001A92  5851               	subwfb	??___fladd& (0+255),w,c
  7289  001A94  B0D8               	btfsc	status,0,c
  7290  001A96  D036               	goto	l969
  7291  001A98  C049  F051         	movff	___fladd@b,??___fladd
  7292  001A9C  C04A  F052         	movff	___fladd@b+1,??___fladd+1
  7293  001AA0  C04B  F053         	movff	___fladd@b+2,??___fladd+2
  7294  001AA4  C04C  F054         	movff	___fladd@b+3,??___fladd+3
  7295  001AA8  1E51               	comf	??___fladd,f,c
  7296  001AAA  1E52               	comf	??___fladd+1,f,c
  7297  001AAC  1E53               	comf	??___fladd+2,f,c
  7298  001AAE  1E54               	comf	??___fladd+3,f,c
  7299  001AB0  2A51               	incf	??___fladd,f,c
  7300  001AB2  0E00               	movlw	0
  7301  001AB4  2252               	addwfc	??___fladd+1,f,c
  7302  001AB6  2253               	addwfc	??___fladd+2,f,c
  7303  001AB8  2254               	addwfc	??___fladd+3,f,c
  7304  001ABA  504D               	movf	___fladd@a,w,c
  7305  001ABC  2451               	addwf	??___fladd,w,c
  7306  001ABE  6E55               	movwf	(??___fladd+4)& (0+255),c
  7307  001AC0  504E               	movf	___fladd@a+1,w,c
  7308  001AC2  2052               	addwfc	??___fladd+1,w,c
  7309  001AC4  6E56               	movwf	(??___fladd+5)& (0+255),c
  7310  001AC6  504F               	movf	___fladd@a+2,w,c
  7311  001AC8  2053               	addwfc	??___fladd+2,w,c
  7312  001ACA  6E57               	movwf	(??___fladd+6)& (0+255),c
  7313  001ACC  5050               	movf	___fladd@a+3,w,c
  7314  001ACE  2054               	addwfc	??___fladd+3,w,c
  7315  001AD0  6E58               	movwf	(??___fladd+7)& (0+255),c
  7316  001AD2  0EFF               	movlw	255
  7317  001AD4  2455               	addwf	??___fladd+4,w,c
  7318  001AD6  6E49               	movwf	___fladd@b,c
  7319  001AD8  0EFF               	movlw	255
  7320  001ADA  2056               	addwfc	??___fladd+5,w,c
  7321  001ADC  6E4A               	movwf	___fladd@b+1,c
  7322  001ADE  0EFF               	movlw	255
  7323  001AE0  2057               	addwfc	??___fladd+6,w,c
  7324  001AE2  6E4B               	movwf	___fladd@b+2,c
  7325  001AE4  0EFF               	movlw	255
  7326  001AE6  2058               	addwfc	??___fladd+7,w,c
  7327  001AE8  6E4C               	movwf	___fladd@b+3,c
  7328  001AEA  0E80               	movlw	128
  7329  001AEC  1A59               	xorwf	___fladd@signs,f,c
  7330  001AEE  6C5C               	negf	___fladd@grs,c
  7331  001AF0  505C               	movf	___fladd@grs,w,c
  7332  001AF2  A4D8               	btfss	status,2,c
  7333  001AF4  D00F               	goto	l971
  7334  001AF6  0E01               	movlw	1
  7335  001AF8  2649               	addwf	___fladd@b,f,c
  7336  001AFA  0E00               	movlw	0
  7337  001AFC  224A               	addwfc	___fladd@b+1,f,c
  7338  001AFE  224B               	addwfc	___fladd@b+2,f,c
  7339  001B00  224C               	addwfc	___fladd@b+3,f,c
  7340  001B02  D008               	goto	l971
  7341  001B04                     l969:
  7342  001B04  504D               	movf	___fladd@a,w,c
  7343  001B06  5E49               	subwf	___fladd@b,f,c
  7344  001B08  504E               	movf	___fladd@a+1,w,c
  7345  001B0A  5A4A               	subwfb	___fladd@b+1,f,c
  7346  001B0C  504F               	movf	___fladd@a+2,w,c
  7347  001B0E  5A4B               	subwfb	___fladd@b+2,f,c
  7348  001B10  5050               	movf	___fladd@a+3,w,c
  7349  001B12  5A4C               	subwfb	___fladd@b+3,f,c
  7350  001B14                     l971:
  7351  001B14  5049               	movf	___fladd@b,w,c
  7352  001B16  104A               	iorwf	___fladd@b+1,w,c
  7353  001B18  104B               	iorwf	___fladd@b+2,w,c
  7354  001B1A  104C               	iorwf	___fladd@b+3,w,c
  7355  001B1C  A4D8               	btfss	status,2,c
  7356  001B1E  D01C               	goto	l978
  7357  001B20  505C               	movf	___fladd@grs,w,c
  7358  001B22  A4D8               	btfss	status,2,c
  7359  001B24  D019               	goto	l978
  7360  001B26  0E00               	movlw	0
  7361  001B28  6E49               	movwf	?___fladd,c
  7362  001B2A  0E00               	movlw	0
  7363  001B2C  6E4A               	movwf	?___fladd+1,c
  7364  001B2E  0E00               	movlw	0
  7365  001B30  6E4B               	movwf	?___fladd+2,c
  7366  001B32  0E00               	movlw	0
  7367  001B34  6E4C               	movwf	?___fladd+3,c
  7368  001B36  0012               	return	
  7369  001B38  90D8               	bcf	status,0,c
  7370  001B3A  3649               	rlcf	___fladd@b,f,c
  7371  001B3C  364A               	rlcf	___fladd@b+1,f,c
  7372  001B3E  364B               	rlcf	___fladd@b+2,f,c
  7373  001B40  364C               	rlcf	___fladd@b+3,f,c
  7374  001B42  BE5C               	btfsc	___fladd@grs,7,c
  7375  001B44  8049               	bsf	___fladd@b,0,c
  7376  001B46  A05C               	btfss	___fladd@grs,0,c
  7377  001B48  D002               	goto	l976
  7378  001B4A  80D8               	bsf	status,0,c
  7379  001B4C  D001               	goto	L9
  7380  001B4E                     l976:
  7381  001B4E  90D8               	bcf	status,0,c
  7382  001B50                     L9:
  7383  001B50  365C               	rlcf	___fladd@grs,f,c
  7384  001B52  505B               	movf	___fladd@bexp,w,c
  7385  001B54  A4D8               	btfss	status,2,c
  7386  001B56  065B               	decf	___fladd@bexp,f,c
  7387  001B58                     l978:
  7388  001B58  AE4B               	btfss	___fladd@b+2,7,c
  7389  001B5A  D7EE               	goto	l974
  7390  001B5C                     u3330:
  7391  001B5C  0E00               	movlw	0
  7392  001B5E  6E5A               	movwf	___fladd@aexp,c
  7393  001B60  AE5C               	btfss	___fladd@grs,7,c
  7394  001B62  D00A               	goto	l983
  7395  001B64  C05C  F051         	movff	___fladd@grs,??___fladd
  7396  001B68  0E7F               	movlw	127
  7397  001B6A  1651               	andwf	??___fladd,f,c
  7398  001B6C  A4D8               	btfss	status,2,c
  7399  001B6E  D002               	goto	u3360
  7400  001B70  A049               	btfss	___fladd@b,0,c
  7401  001B72  D002               	goto	l983
  7402  001B74                     u3360:
  7403  001B74  0E01               	movlw	1
  7404  001B76  6E5A               	movwf	___fladd@aexp,c
  7405  001B78                     l983:
  7406  001B78  505A               	movf	___fladd@aexp,w,c
  7407  001B7A  B4D8               	btfsc	status,2,c
  7408  001B7C  D020               	goto	l986
  7409  001B7E  0E01               	movlw	1
  7410  001B80  2649               	addwf	___fladd@b,f,c
  7411  001B82  0E00               	movlw	0
  7412  001B84  224A               	addwfc	___fladd@b+1,f,c
  7413  001B86  224B               	addwfc	___fladd@b+2,f,c
  7414  001B88  224C               	addwfc	___fladd@b+3,f,c
  7415  001B8A  A04C               	btfss	___fladd@b+3,0,c
  7416  001B8C  D018               	goto	l986
  7417  001B8E  C049  F051         	movff	___fladd@b,??___fladd
  7418  001B92  C04A  F052         	movff	___fladd@b+1,??___fladd+1
  7419  001B96  C04B  F053         	movff	___fladd@b+2,??___fladd+2
  7420  001B9A  C04C  F054         	movff	___fladd@b+3,??___fladd+3
  7421  001B9E  3454               	rlcf	??___fladd+3,w,c
  7422  001BA0  3254               	rrcf	??___fladd+3,f,c
  7423  001BA2  3253               	rrcf	??___fladd+2,f,c
  7424  001BA4  3252               	rrcf	??___fladd+1,f,c
  7425  001BA6  3251               	rrcf	??___fladd,f,c
  7426  001BA8  C051  F049         	movff	??___fladd,___fladd@b
  7427  001BAC  C052  F04A         	movff	??___fladd+1,___fladd@b+1
  7428  001BB0  C053  F04B         	movff	??___fladd+2,___fladd@b+2
  7429  001BB4  C054  F04C         	movff	??___fladd+3,___fladd@b+3
  7430  001BB8  285B               	incf	___fladd@bexp,w,c
  7431  001BBA  A4D8               	btfss	status,2,c
  7432  001BBC  2A5B               	incf	___fladd@bexp,f,c
  7433  001BBE                     l986:
  7434  001BBE  285B               	incf	___fladd@bexp,w,c
  7435  001BC0  B4D8               	btfsc	status,2,c
  7436  001BC2  D003               	goto	u3410
  7437  001BC4  505B               	movf	___fladd@bexp,w,c
  7438  001BC6  A4D8               	btfss	status,2,c
  7439  001BC8  D00D               	goto	l990
  7440  001BCA                     u3410:
  7441  001BCA  0E00               	movlw	0
  7442  001BCC  6E49               	movwf	___fladd@b,c
  7443  001BCE  0E00               	movlw	0
  7444  001BD0  6E4A               	movwf	___fladd@b+1,c
  7445  001BD2  0E00               	movlw	0
  7446  001BD4  6E4B               	movwf	___fladd@b+2,c
  7447  001BD6  0E00               	movlw	0
  7448  001BD8  6E4C               	movwf	___fladd@b+3,c
  7449  001BDA  505B               	movf	___fladd@bexp,w,c
  7450  001BDC  A4D8               	btfss	status,2,c
  7451  001BDE  D002               	goto	l990
  7452  001BE0  0E00               	movlw	0
  7453  001BE2  6E59               	movwf	___fladd@signs,c
  7454  001BE4                     l990:
  7455  001BE4  A05B               	btfss	___fladd@bexp,0,c
  7456  001BE6  D002               	goto	l991
  7457  001BE8  8E4B               	bsf	___fladd@b+2,7,c
  7458  001BEA  D001               	goto	l992
  7459  001BEC                     l991:
  7460  001BEC  9E4B               	bcf	___fladd@b+2,7,c
  7461  001BEE                     l992:
  7462  001BEE  90D8               	bcf	status,0,c
  7463  001BF0  305B               	rrcf	___fladd@bexp,w,c
  7464  001BF2  6E4C               	movwf	___fladd@b+3,c
  7465  001BF4  BE59               	btfsc	___fladd@signs,7,c
  7466  001BF6  8E4C               	bsf	___fladd@b+3,7,c
  7467  001BF8  C049  F049         	movff	___fladd@b,?___fladd
  7468  001BFC  C04A  F04A         	movff	___fladd@b+1,?___fladd+1
  7469  001C00  C04B  F04B         	movff	___fladd@b+2,?___fladd+2
  7470  001C04  C04C  F04C         	movff	___fladd@b+3,?___fladd+3
  7471  001C08  0012               	return	
  7472  001C0A                     __end_of___fladd:
  7473                           	opt stack 0
  7474                           tblptru	equ	0xFF8
  7475                           tblptrh	equ	0xFF7
  7476                           tblptrl	equ	0xFF6
  7477                           tablat	equ	0xFF5
  7478                           prodh	equ	0xFF4
  7479                           prodl	equ	0xFF3
  7480                           postinc0	equ	0xFEE
  7481                           wreg	equ	0xFE8
  7482                           indf1	equ	0xFE7
  7483                           postdec1	equ	0xFE5
  7484                           fsr1h	equ	0xFE2
  7485                           fsr1l	equ	0xFE1
  7486                           indf2	equ	0xFDF
  7487                           postinc2	equ	0xFDE
  7488                           postdec2	equ	0xFDD
  7489                           fsr2h	equ	0xFDA
  7490                           fsr2l	equ	0xFD9
  7491                           status	equ	0xFD8
  7492                           
  7493 ;; *************** function ___flneg *****************
  7494 ;; Defined at:
  7495 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\flneg.c"
  7496 ;; Parameters:    Size  Location     Type
  7497 ;;  f1              4   20[COMRAM] unsigned char 
  7498 ;; Auto vars:     Size  Location     Type
  7499 ;;		None
  7500 ;; Return value:  Size  Location     Type
  7501 ;;                  4   20[COMRAM] unsigned char 
  7502 ;; Registers used:
  7503 ;;		wreg, status,2, status,0
  7504 ;; Tracked objects:
  7505 ;;		On entry : 0/0
  7506 ;;		On exit  : 0/0
  7507 ;;		Unchanged: 0/0
  7508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7509 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7510 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7512 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7513 ;;Total ram usage:        4 bytes
  7514 ;; Hardware stack levels used:    1
  7515 ;; Hardware stack levels required when called:    3
  7516 ;; This function calls:
  7517 ;;		Nothing
  7518 ;; This function is called by:
  7519 ;;		_sprintf
  7520 ;; This function uses a non-reentrant model
  7521 ;;
  7522                           
  7523                           	psect	text15
  7524  002FA6                     __ptext15:
  7525                           	opt stack 0
  7526  002FA6                     ___flneg:
  7527                           	opt stack 26
  7528                           
  7529                           ;incstack = 0
  7530  002FA6  5015               	movf	___flneg@f1,w,c
  7531  002FA8  1016               	iorwf	___flneg@f1+1,w,c
  7532  002FAA  1017               	iorwf	___flneg@f1+2,w,c
  7533  002FAC  1018               	iorwf	___flneg@f1+3,w,c
  7534  002FAE  B4D8               	btfsc	status,2,c
  7535  002FB0  D008               	goto	l695
  7536  002FB2  0E00               	movlw	0
  7537  002FB4  1A15               	xorwf	___flneg@f1,f,c
  7538  002FB6  0E00               	movlw	0
  7539  002FB8  1A16               	xorwf	___flneg@f1+1,f,c
  7540  002FBA  0E00               	movlw	0
  7541  002FBC  1A17               	xorwf	___flneg@f1+2,f,c
  7542  002FBE  0E80               	movlw	128
  7543  002FC0  1A18               	xorwf	___flneg@f1+3,f,c
  7544  002FC2                     l695:
  7545  002FC2  C015  F015         	movff	___flneg@f1,?___flneg
  7546  002FC6  C016  F016         	movff	___flneg@f1+1,?___flneg+1
  7547  002FCA  C017  F017         	movff	___flneg@f1+2,?___flneg+2
  7548  002FCE  C018  F018         	movff	___flneg@f1+3,?___flneg+3
  7549  002FD2  0012               	return	
  7550  002FD4                     __end_of___flneg:
  7551                           	opt stack 0
  7552                           tblptru	equ	0xFF8
  7553                           tblptrh	equ	0xFF7
  7554                           tblptrl	equ	0xFF6
  7555                           tablat	equ	0xFF5
  7556                           prodh	equ	0xFF4
  7557                           prodl	equ	0xFF3
  7558                           postinc0	equ	0xFEE
  7559                           wreg	equ	0xFE8
  7560                           indf1	equ	0xFE7
  7561                           postdec1	equ	0xFE5
  7562                           fsr1h	equ	0xFE2
  7563                           fsr1l	equ	0xFE1
  7564                           indf2	equ	0xFDF
  7565                           postinc2	equ	0xFDE
  7566                           postdec2	equ	0xFDD
  7567                           fsr2h	equ	0xFDA
  7568                           fsr2l	equ	0xFD9
  7569                           status	equ	0xFD8
  7570                           
  7571 ;; *************** function ___flge *****************
  7572 ;; Defined at:
  7573 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\flge.c"
  7574 ;; Parameters:    Size  Location     Type
  7575 ;;  ff1             4   20[COMRAM] unsigned char 
  7576 ;;  ff2             4   24[COMRAM] unsigned char 
  7577 ;; Auto vars:     Size  Location     Type
  7578 ;;		None
  7579 ;; Return value:  Size  Location     Type
  7580 ;;		None               void
  7581 ;; Registers used:
  7582 ;;		wreg, status,2, status,0
  7583 ;; Tracked objects:
  7584 ;;		On entry : 0/0
  7585 ;;		On exit  : 0/0
  7586 ;;		Unchanged: 0/0
  7587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7588 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7589 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7590 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7591 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7592 ;;Total ram usage:       12 bytes
  7593 ;; Hardware stack levels used:    1
  7594 ;; Hardware stack levels required when called:    3
  7595 ;; This function calls:
  7596 ;;		Nothing
  7597 ;; This function is called by:
  7598 ;;		_sprintf
  7599 ;; This function uses a non-reentrant model
  7600 ;;
  7601                           
  7602                           	psect	text16
  7603  002640                     __ptext16:
  7604                           	opt stack 0
  7605  002640                     ___flge:
  7606                           	opt stack 26
  7607                           
  7608                           ;incstack = 0
  7609  002640  0E00               	movlw	0
  7610  002642  1415               	andwf	___flge@ff1,w,c
  7611  002644  6E1D               	movwf	??___flge& (0+255),c
  7612  002646  0E00               	movlw	0
  7613  002648  1416               	andwf	___flge@ff1+1,w,c
  7614  00264A  6E1E               	movwf	(??___flge+1)& (0+255),c
  7615  00264C  0E80               	movlw	128
  7616  00264E  1417               	andwf	___flge@ff1+2,w,c
  7617  002650  6E1F               	movwf	(??___flge+2)& (0+255),c
  7618  002652  0E7F               	movlw	127
  7619  002654  1418               	andwf	___flge@ff1+3,w,c
  7620  002656  6E20               	movwf	(??___flge+3)& (0+255),c
  7621  002658  501D               	movf	??___flge,w,c
  7622  00265A  101E               	iorwf	??___flge+1,w,c
  7623  00265C  101F               	iorwf	??___flge+2,w,c
  7624  00265E  1020               	iorwf	??___flge+3,w,c
  7625  002660  A4D8               	btfss	status,2,c
  7626  002662  D008               	goto	l688
  7627  002664  0E00               	movlw	0
  7628  002666  6E15               	movwf	___flge@ff1,c
  7629  002668  0E00               	movlw	0
  7630  00266A  6E16               	movwf	___flge@ff1+1,c
  7631  00266C  0E00               	movlw	0
  7632  00266E  6E17               	movwf	___flge@ff1+2,c
  7633  002670  0E00               	movlw	0
  7634  002672  6E18               	movwf	___flge@ff1+3,c
  7635  002674                     l688:
  7636  002674  0E00               	movlw	0
  7637  002676  1419               	andwf	___flge@ff2,w,c
  7638  002678  6E1D               	movwf	??___flge& (0+255),c
  7639  00267A  0E00               	movlw	0
  7640  00267C  141A               	andwf	___flge@ff2+1,w,c
  7641  00267E  6E1E               	movwf	(??___flge+1)& (0+255),c
  7642  002680  0E80               	movlw	128
  7643  002682  141B               	andwf	___flge@ff2+2,w,c
  7644  002684  6E1F               	movwf	(??___flge+2)& (0+255),c
  7645  002686  0E7F               	movlw	127
  7646  002688  141C               	andwf	___flge@ff2+3,w,c
  7647  00268A  6E20               	movwf	(??___flge+3)& (0+255),c
  7648  00268C  501D               	movf	??___flge,w,c
  7649  00268E  101E               	iorwf	??___flge+1,w,c
  7650  002690  101F               	iorwf	??___flge+2,w,c
  7651  002692  1020               	iorwf	??___flge+3,w,c
  7652  002694  A4D8               	btfss	status,2,c
  7653  002696  D008               	goto	l689
  7654  002698  0E00               	movlw	0
  7655  00269A  6E19               	movwf	___flge@ff2,c
  7656  00269C  0E00               	movlw	0
  7657  00269E  6E1A               	movwf	___flge@ff2+1,c
  7658  0026A0  0E00               	movlw	0
  7659  0026A2  6E1B               	movwf	___flge@ff2+2,c
  7660  0026A4  0E00               	movlw	0
  7661  0026A6  6E1C               	movwf	___flge@ff2+3,c
  7662  0026A8                     l689:
  7663  0026A8  AE18               	btfss	___flge@ff1+3,7,c
  7664  0026AA  D01D               	goto	l690
  7665  0026AC  C015  F01D         	movff	___flge@ff1,??___flge
  7666  0026B0  C016  F01E         	movff	___flge@ff1+1,??___flge+1
  7667  0026B4  C017  F01F         	movff	___flge@ff1+2,??___flge+2
  7668  0026B8  C018  F020         	movff	___flge@ff1+3,??___flge+3
  7669  0026BC  1E1D               	comf	??___flge,f,c
  7670  0026BE  1E1E               	comf	??___flge+1,f,c
  7671  0026C0  1E1F               	comf	??___flge+2,f,c
  7672  0026C2  1E20               	comf	??___flge+3,f,c
  7673  0026C4  2A1D               	incf	??___flge,f,c
  7674  0026C6  0E00               	movlw	0
  7675  0026C8  221E               	addwfc	??___flge+1,f,c
  7676  0026CA  221F               	addwfc	??___flge+2,f,c
  7677  0026CC  2220               	addwfc	??___flge+3,f,c
  7678  0026CE  0E00               	movlw	0
  7679  0026D0  241D               	addwf	??___flge,w,c
  7680  0026D2  6E15               	movwf	___flge@ff1,c
  7681  0026D4  0E00               	movlw	0
  7682  0026D6  201E               	addwfc	??___flge+1,w,c
  7683  0026D8  6E16               	movwf	___flge@ff1+1,c
  7684  0026DA  0E00               	movlw	0
  7685  0026DC  201F               	addwfc	??___flge+2,w,c
  7686  0026DE  6E17               	movwf	___flge@ff1+2,c
  7687  0026E0  0E80               	movlw	128
  7688  0026E2  2020               	addwfc	??___flge+3,w,c
  7689  0026E4  6E18               	movwf	___flge@ff1+3,c
  7690  0026E6                     l690:
  7691  0026E6  AE1C               	btfss	___flge@ff2+3,7,c
  7692  0026E8  D01D               	goto	l691
  7693  0026EA  C019  F01D         	movff	___flge@ff2,??___flge
  7694  0026EE  C01A  F01E         	movff	___flge@ff2+1,??___flge+1
  7695  0026F2  C01B  F01F         	movff	___flge@ff2+2,??___flge+2
  7696  0026F6  C01C  F020         	movff	___flge@ff2+3,??___flge+3
  7697  0026FA  1E1D               	comf	??___flge,f,c
  7698  0026FC  1E1E               	comf	??___flge+1,f,c
  7699  0026FE  1E1F               	comf	??___flge+2,f,c
  7700  002700  1E20               	comf	??___flge+3,f,c
  7701  002702  2A1D               	incf	??___flge,f,c
  7702  002704  0E00               	movlw	0
  7703  002706  221E               	addwfc	??___flge+1,f,c
  7704  002708  221F               	addwfc	??___flge+2,f,c
  7705  00270A  2220               	addwfc	??___flge+3,f,c
  7706  00270C  0E00               	movlw	0
  7707  00270E  241D               	addwf	??___flge,w,c
  7708  002710  6E19               	movwf	___flge@ff2,c
  7709  002712  0E00               	movlw	0
  7710  002714  201E               	addwfc	??___flge+1,w,c
  7711  002716  6E1A               	movwf	___flge@ff2+1,c
  7712  002718  0E00               	movlw	0
  7713  00271A  201F               	addwfc	??___flge+2,w,c
  7714  00271C  6E1B               	movwf	___flge@ff2+2,c
  7715  00271E  0E80               	movlw	128
  7716  002720  2020               	addwfc	??___flge+3,w,c
  7717  002722  6E1C               	movwf	___flge@ff2+3,c
  7718  002724                     l691:
  7719  002724  0E00               	movlw	0
  7720  002726  1A15               	xorwf	___flge@ff1,f,c
  7721  002728  0E00               	movlw	0
  7722  00272A  1A16               	xorwf	___flge@ff1+1,f,c
  7723  00272C  0E00               	movlw	0
  7724  00272E  1A17               	xorwf	___flge@ff1+2,f,c
  7725  002730  0E80               	movlw	128
  7726  002732  1A18               	xorwf	___flge@ff1+3,f,c
  7727  002734  0E00               	movlw	0
  7728  002736  1A19               	xorwf	___flge@ff2,f,c
  7729  002738  0E00               	movlw	0
  7730  00273A  1A1A               	xorwf	___flge@ff2+1,f,c
  7731  00273C  0E00               	movlw	0
  7732  00273E  1A1B               	xorwf	___flge@ff2+2,f,c
  7733  002740  0E80               	movlw	128
  7734  002742  1A1C               	xorwf	___flge@ff2+3,f,c
  7735  002744  5019               	movf	___flge@ff2,w,c
  7736  002746  5C15               	subwf	___flge@ff1,w,c
  7737  002748  501A               	movf	___flge@ff2+1,w,c
  7738  00274A  5816               	subwfb	___flge@ff1+1,w,c
  7739  00274C  501B               	movf	___flge@ff2+2,w,c
  7740  00274E  5817               	subwfb	___flge@ff1+2,w,c
  7741  002750  501C               	movf	___flge@ff2+3,w,c
  7742  002752  5818               	subwfb	___flge@ff1+3,w,c
  7743  002754  B0D8               	btfsc	status,0,c
  7744  002756  D002               	goto	l3088
  7745  002758  90D8               	bcf	status,0,c
  7746  00275A  0012               	return	
  7747  00275C                     l3088:
  7748  00275C  80D8               	bsf	status,0,c
  7749  00275E  0012               	return	
  7750  002760                     __end_of___flge:
  7751                           	opt stack 0
  7752                           tblptru	equ	0xFF8
  7753                           tblptrh	equ	0xFF7
  7754                           tblptrl	equ	0xFF6
  7755                           tablat	equ	0xFF5
  7756                           prodh	equ	0xFF4
  7757                           prodl	equ	0xFF3
  7758                           postinc0	equ	0xFEE
  7759                           wreg	equ	0xFE8
  7760                           indf1	equ	0xFE7
  7761                           postdec1	equ	0xFE5
  7762                           fsr1h	equ	0xFE2
  7763                           fsr1l	equ	0xFE1
  7764                           indf2	equ	0xFDF
  7765                           postinc2	equ	0xFDE
  7766                           postdec2	equ	0xFDD
  7767                           fsr2h	equ	0xFDA
  7768                           fsr2l	equ	0xFD9
  7769                           status	equ	0xFD8
  7770                           
  7771 ;; *************** function _send_string_no_lib *****************
  7772 ;; Defined at:
  7773 ;;		line 169 in file "Main.c"
  7774 ;; Parameters:    Size  Location     Type
  7775 ;;  p               2   21[COMRAM] PTR unsigned char 
  7776 ;;		 -> main@Buffer(32), 
  7777 ;; Auto vars:     Size  Location     Type
  7778 ;;		None
  7779 ;; Return value:  Size  Location     Type
  7780 ;;                  1    wreg      void 
  7781 ;; Registers used:
  7782 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7783 ;; Tracked objects:
  7784 ;;		On entry : 0/0
  7785 ;;		On exit  : 0/0
  7786 ;;		Unchanged: 0/0
  7787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7788 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7789 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7791 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7792 ;;Total ram usage:        2 bytes
  7793 ;; Hardware stack levels used:    1
  7794 ;; Hardware stack levels required when called:    4
  7795 ;; This function calls:
  7796 ;;		_send_byte_no_lib
  7797 ;; This function is called by:
  7798 ;;		_main
  7799 ;; This function uses a non-reentrant model
  7800 ;;
  7801                           
  7802                           	psect	text17
  7803  003078                     __ptext17:
  7804                           	opt stack 0
  7805  003078                     _send_string_no_lib:
  7806                           	opt stack 26
  7807                           
  7808                           ;Main.c: 170: while (*p) {
  7809                           
  7810                           ;incstack = 0
  7811  003078  D009               	goto	l183
  7812  00307A                     
  7813                           ;Main.c: 171: send_byte_no_lib(*p);
  7814  00307A  C016  FFD9         	movff	send_string_no_lib@p,fsr2l
  7815  00307E  C017  FFDA         	movff	send_string_no_lib@p+1,fsr2h
  7816  003082  50DF               	movf	indf2,w,c
  7817  003084  EC8C  F018         	call	_send_byte_no_lib
  7818                           
  7819                           ;Main.c: 172: p++;
  7820  003088  4A16               	infsnz	send_string_no_lib@p,f,c
  7821  00308A  2A17               	incf	send_string_no_lib@p+1,f,c
  7822  00308C                     l183:
  7823  00308C  C016  FFD9         	movff	send_string_no_lib@p,fsr2l
  7824  003090  C017  FFDA         	movff	send_string_no_lib@p+1,fsr2h
  7825  003094  50DF               	movf	indf2,w,c
  7826  003096  B4D8               	btfsc	status,2,c
  7827  003098  0012               	return	
  7828  00309A  D7EF               	goto	l184
  7829  00309C                     __end_of_send_string_no_lib:
  7830                           	opt stack 0
  7831                           tblptru	equ	0xFF8
  7832                           tblptrh	equ	0xFF7
  7833                           tblptrl	equ	0xFF6
  7834                           tablat	equ	0xFF5
  7835                           prodh	equ	0xFF4
  7836                           prodl	equ	0xFF3
  7837                           postinc0	equ	0xFEE
  7838                           wreg	equ	0xFE8
  7839                           indf1	equ	0xFE7
  7840                           postdec1	equ	0xFE5
  7841                           fsr1h	equ	0xFE2
  7842                           fsr1l	equ	0xFE1
  7843                           indf2	equ	0xFDF
  7844                           postinc2	equ	0xFDE
  7845                           postdec2	equ	0xFDD
  7846                           fsr2h	equ	0xFDA
  7847                           fsr2l	equ	0xFD9
  7848                           status	equ	0xFD8
  7849                           
  7850 ;; *************** function _send_byte_no_lib *****************
  7851 ;; Defined at:
  7852 ;;		line 191 in file "Main.c"
  7853 ;; Parameters:    Size  Location     Type
  7854 ;;  c               1    wreg     unsigned char 
  7855 ;; Auto vars:     Size  Location     Type
  7856 ;;  c               1   20[COMRAM] unsigned char 
  7857 ;; Return value:  Size  Location     Type
  7858 ;;                  1    wreg      void 
  7859 ;; Registers used:
  7860 ;;		wreg
  7861 ;; Tracked objects:
  7862 ;;		On entry : 0/0
  7863 ;;		On exit  : 0/0
  7864 ;;		Unchanged: 0/0
  7865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7867 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7869 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7870 ;;Total ram usage:        1 bytes
  7871 ;; Hardware stack levels used:    1
  7872 ;; Hardware stack levels required when called:    3
  7873 ;; This function calls:
  7874 ;;		Nothing
  7875 ;; This function is called by:
  7876 ;;		_send_string_no_lib
  7877 ;; This function uses a non-reentrant model
  7878 ;;
  7879                           
  7880                           	psect	text18
  7881  003118                     __ptext18:
  7882                           	opt stack 0
  7883  003118                     _send_byte_no_lib:
  7884                           	opt stack 26
  7885                           
  7886                           ;incstack = 0
  7887                           ;send_byte_no_lib@c stored from wreg
  7888  003118  6E15               	movwf	send_byte_no_lib@c,c
  7889                           
  7890                           ;Main.c: 192: while (!TXSTAbits.TRMT) asm(" clrwdt");
  7891  00311A  D001               	goto	l200
  7892  00311C                     l201:
  7893  00311C  0004               	clrwdt		;# 
  7894  00311E                     l200:
  7895  00311E  A2AC               	btfss	4012,1,c	;volatile
  7896  003120  D7FD               	goto	l201
  7897                           
  7898                           ;Main.c: 193: TXREG = c;
  7899  003122  C015  FFAD         	movff	send_byte_no_lib@c,4013	;volatile
  7900  003126  0012               	return		;funcret
  7901  003128                     __end_of_send_byte_no_lib:
  7902                           	opt stack 0
  7903                           tblptru	equ	0xFF8
  7904                           tblptrh	equ	0xFF7
  7905                           tblptrl	equ	0xFF6
  7906                           tablat	equ	0xFF5
  7907                           prodh	equ	0xFF4
  7908                           prodl	equ	0xFF3
  7909                           postinc0	equ	0xFEE
  7910                           wreg	equ	0xFE8
  7911                           indf1	equ	0xFE7
  7912                           postdec1	equ	0xFE5
  7913                           fsr1h	equ	0xFE2
  7914                           fsr1l	equ	0xFE1
  7915                           indf2	equ	0xFDF
  7916                           postinc2	equ	0xFDE
  7917                           postdec2	equ	0xFDD
  7918                           fsr2h	equ	0xFDA
  7919                           fsr2l	equ	0xFD9
  7920                           status	equ	0xFD8
  7921                           
  7922 ;; *************** function _read_byte_no_lib *****************
  7923 ;; Defined at:
  7924 ;;		line 185 in file "Main.c"
  7925 ;; Parameters:    Size  Location     Type
  7926 ;;		None
  7927 ;; Auto vars:     Size  Location     Type
  7928 ;;  c               1   20[COMRAM] unsigned char 
  7929 ;; Return value:  Size  Location     Type
  7930 ;;                  1    wreg      unsigned char 
  7931 ;; Registers used:
  7932 ;;		wreg, status,2
  7933 ;; Tracked objects:
  7934 ;;		On entry : 0/0
  7935 ;;		On exit  : 0/0
  7936 ;;		Unchanged: 0/0
  7937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7939 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7941 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7942 ;;Total ram usage:        1 bytes
  7943 ;; Hardware stack levels used:    1
  7944 ;; Hardware stack levels required when called:    3
  7945 ;; This function calls:
  7946 ;;		Nothing
  7947 ;; This function is called by:
  7948 ;;		_main
  7949 ;; This function uses a non-reentrant model
  7950 ;;
  7951                           
  7952                           	psect	text19
  7953  003148                     __ptext19:
  7954                           	opt stack 0
  7955  003148                     _read_byte_no_lib:
  7956                           	opt stack 27
  7957                           
  7958                           ;Main.c: 186: unsigned char c;
  7959                           ;Main.c: 187: c = RCREG;
  7960                           
  7961                           ;incstack = 0
  7962  003148  CFAE F015          	movff	4014,read_byte_no_lib@c	;volatile
  7963                           
  7964                           ;Main.c: 188: return c;
  7965  00314C  5015               	movf	read_byte_no_lib@c,w,c
  7966  00314E  0012               	return	
  7967  003150                     __end_of_read_byte_no_lib:
  7968                           	opt stack 0
  7969                           tblptru	equ	0xFF8
  7970                           tblptrh	equ	0xFF7
  7971                           tblptrl	equ	0xFF6
  7972                           tablat	equ	0xFF5
  7973                           prodh	equ	0xFF4
  7974                           prodl	equ	0xFF3
  7975                           postinc0	equ	0xFEE
  7976                           wreg	equ	0xFE8
  7977                           indf1	equ	0xFE7
  7978                           postdec1	equ	0xFE5
  7979                           fsr1h	equ	0xFE2
  7980                           fsr1l	equ	0xFE1
  7981                           indf2	equ	0xFDF
  7982                           postinc2	equ	0xFDE
  7983                           postdec2	equ	0xFDD
  7984                           fsr2h	equ	0xFDA
  7985                           fsr2l	equ	0xFD9
  7986                           status	equ	0xFD8
  7987                           
  7988 ;; *************** function _read_adc_voltage *****************
  7989 ;; Defined at:
  7990 ;;		line 211 in file "Main.c"
  7991 ;; Parameters:    Size  Location     Type
  7992 ;;  channel         1    wreg     unsigned char 
  7993 ;; Auto vars:     Size  Location     Type
  7994 ;;  channel         1   75[COMRAM] unsigned char 
  7995 ;;  voltage         4   69[COMRAM] float 
  7996 ;;  raw_value       2   73[COMRAM] int 
  7997 ;; Return value:  Size  Location     Type
  7998 ;;                  4   65[COMRAM] float 
  7999 ;; Registers used:
  8000 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8001 ;; Tracked objects:
  8002 ;;		On entry : 0/0
  8003 ;;		On exit  : 0/0
  8004 ;;		Unchanged: 0/0
  8005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8006 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8007 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8008 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8009 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8010 ;;Total ram usage:       11 bytes
  8011 ;; Hardware stack levels used:    1
  8012 ;; Hardware stack levels required when called:    4
  8013 ;; This function calls:
  8014 ;;		___fldiv
  8015 ;;		___wmul
  8016 ;;		___xxtofl
  8017 ;;		_read_adc_raw_no_lib
  8018 ;; This function is called by:
  8019 ;;		_main
  8020 ;; This function uses a non-reentrant model
  8021 ;;
  8022                           
  8023                           	psect	text20
  8024  002ADC                     __ptext20:
  8025                           	opt stack 0
  8026  002ADC                     _read_adc_voltage:
  8027                           	opt stack 26
  8028                           
  8029                           ;incstack = 0
  8030                           ;read_adc_voltage@channel stored from wreg
  8031  002ADC  6E4C               	movwf	read_adc_voltage@channel,c
  8032                           
  8033                           ;Main.c: 212: int raw_value;
  8034                           ;Main.c: 213: float voltage;
  8035                           ;Main.c: 214: raw_value = read_adc_raw_no_lib(channel);
  8036  002ADE  504C               	movf	read_adc_voltage@channel,w,c
  8037  002AE0  EC82  F017         	call	_read_adc_raw_no_lib
  8038  002AE4  C015  F04A         	movff	?_read_adc_raw_no_lib,read_adc_voltage@raw_value
  8039  002AE8  C016  F04B         	movff	?_read_adc_raw_no_lib+1,read_adc_voltage@raw_value+1
  8040                           
  8041                           ;Main.c: 215: voltage = (raw_value * 5) / 1023.0;
  8042  002AEC  C04A  F015         	movff	read_adc_voltage@raw_value,___wmul@multiplier
  8043  002AF0  C04B  F016         	movff	read_adc_voltage@raw_value+1,___wmul@multiplier+1
  8044  002AF4  0E00               	movlw	0
  8045  002AF6  6E18               	movwf	___wmul@multiplicand+1,c
  8046  002AF8  0E05               	movlw	5
  8047  002AFA  6E17               	movwf	___wmul@multiplicand,c
  8048  002AFC  EC16  F018         	call	___wmul	;wreg free
  8049  002B00  C015  F01B         	movff	?___wmul,___xxtofl@val
  8050  002B04  C016  F01C         	movff	?___wmul+1,___xxtofl@val+1
  8051  002B08  0E00               	movlw	0
  8052  002B0A  BE1C               	btfsc	___xxtofl@val+1,7,c
  8053  002B0C  0EFF               	movlw	-1
  8054  002B0E  6E1D               	movwf	___xxtofl@val+2,c
  8055  002B10  6E1E               	movwf	___xxtofl@val+3,c
  8056  002B12  0E01               	movlw	1
  8057  002B14  ECB6  F010         	call	___xxtofl
  8058  002B18  C01B  F029         	movff	?___xxtofl,___fldiv@b
  8059  002B1C  C01C  F02A         	movff	?___xxtofl+1,___fldiv@b+1
  8060  002B20  C01D  F02B         	movff	?___xxtofl+2,___fldiv@b+2
  8061  002B24  C01E  F02C         	movff	?___xxtofl+3,___fldiv@b+3
  8062  002B28  0E00               	movlw	0
  8063  002B2A  6E2D               	movwf	___fldiv@a,c
  8064  002B2C  0EC0               	movlw	192
  8065  002B2E  6E2E               	movwf	___fldiv@a+1,c
  8066  002B30  0E7F               	movlw	127
  8067  002B32  6E2F               	movwf	___fldiv@a+2,c
  8068  002B34  0E44               	movlw	68
  8069  002B36  6E30               	movwf	___fldiv@a+3,c
  8070  002B38  EC05  F00E         	call	___fldiv	;wreg free
  8071  002B3C  C029  F046         	movff	?___fldiv,read_adc_voltage@voltage
  8072  002B40  C02A  F047         	movff	?___fldiv+1,read_adc_voltage@voltage+1
  8073  002B44  C02B  F048         	movff	?___fldiv+2,read_adc_voltage@voltage+2
  8074  002B48  C02C  F049         	movff	?___fldiv+3,read_adc_voltage@voltage+3
  8075                           
  8076                           ;Main.c: 216: return voltage;
  8077  002B4C  C046  F042         	movff	read_adc_voltage@voltage,?_read_adc_voltage
  8078  002B50  C047  F043         	movff	read_adc_voltage@voltage+1,?_read_adc_voltage+1
  8079  002B54  C048  F044         	movff	read_adc_voltage@voltage+2,?_read_adc_voltage+2
  8080  002B58  C049  F045         	movff	read_adc_voltage@voltage+3,?_read_adc_voltage+3
  8081  002B5C  0012               	return	
  8082  002B5E                     __end_of_read_adc_voltage:
  8083                           	opt stack 0
  8084                           tblptru	equ	0xFF8
  8085                           tblptrh	equ	0xFF7
  8086                           tblptrl	equ	0xFF6
  8087                           tablat	equ	0xFF5
  8088                           prodh	equ	0xFF4
  8089                           prodl	equ	0xFF3
  8090                           postinc0	equ	0xFEE
  8091                           wreg	equ	0xFE8
  8092                           indf1	equ	0xFE7
  8093                           postdec1	equ	0xFE5
  8094                           fsr1h	equ	0xFE2
  8095                           fsr1l	equ	0xFE1
  8096                           indf2	equ	0xFDF
  8097                           postinc2	equ	0xFDE
  8098                           postdec2	equ	0xFDD
  8099                           fsr2h	equ	0xFDA
  8100                           fsr2l	equ	0xFD9
  8101                           status	equ	0xFD8
  8102                           
  8103 ;; *************** function _read_adc_raw_no_lib *****************
  8104 ;; Defined at:
  8105 ;;		line 202 in file "Main.c"
  8106 ;; Parameters:    Size  Location     Type
  8107 ;;  channel         1    wreg     unsigned char 
  8108 ;; Auto vars:     Size  Location     Type
  8109 ;;  channel         1   26[COMRAM] unsigned char 
  8110 ;;  raw_value       2   24[COMRAM] int 
  8111 ;; Return value:  Size  Location     Type
  8112 ;;                  2   20[COMRAM] int 
  8113 ;; Registers used:
  8114 ;;		wreg, status,2, status,0
  8115 ;; Tracked objects:
  8116 ;;		On entry : 0/0
  8117 ;;		On exit  : 0/0
  8118 ;;		Unchanged: 0/0
  8119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8120 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8121 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8122 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8123 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8124 ;;Total ram usage:        7 bytes
  8125 ;; Hardware stack levels used:    1
  8126 ;; Hardware stack levels required when called:    3
  8127 ;; This function calls:
  8128 ;;		Nothing
  8129 ;; This function is called by:
  8130 ;;		_read_adc_voltage
  8131 ;; This function uses a non-reentrant model
  8132 ;;
  8133                           
  8134                           	psect	text21
  8135  002F04                     __ptext21:
  8136                           	opt stack 0
  8137  002F04                     _read_adc_raw_no_lib:
  8138                           	opt stack 26
  8139                           
  8140                           ;incstack = 0
  8141                           ;read_adc_raw_no_lib@channel stored from wreg
  8142  002F04  6E1B               	movwf	read_adc_raw_no_lib@channel,c
  8143                           
  8144                           ;Main.c: 203: int raw_value;
  8145                           ;Main.c: 204: ADCON0bits.CHS = channel;
  8146  002F06  C01B  F017         	movff	read_adc_raw_no_lib@channel,??_read_adc_raw_no_lib
  8147  002F0A  4617               	rlncf	??_read_adc_raw_no_lib,f,c
  8148  002F0C  4617               	rlncf	??_read_adc_raw_no_lib,f,c
  8149  002F0E  50C2               	movf	4034,w,c	;volatile
  8150  002F10  1817               	xorwf	??_read_adc_raw_no_lib,w,c
  8151  002F12  0BC3               	andlw	-61
  8152  002F14  1817               	xorwf	??_read_adc_raw_no_lib,w,c
  8153  002F16  6EC2               	movwf	4034,c	;volatile
  8154                           
  8155                           ;Main.c: 205: ADCON0bits.GO = 1;
  8156  002F18  82C2               	bsf	4034,1,c	;volatile
  8157  002F1A  B2C2               	btfsc	4034,1,c	;volatile
  8158  002F1C  D7FE               	goto	l210
  8159                           
  8160                           ;Main.c: 207: raw_value = ADRESH << 8 | ADRESL;
  8161  002F1E  50C3               	movf	4035,w,c	;volatile
  8162  002F20  CFC4 F017          	movff	4036,??_read_adc_raw_no_lib	;volatile
  8163  002F24  6A18               	clrf	(??_read_adc_raw_no_lib+1)& (0+255),c
  8164  002F26  C017  F018         	movff	??_read_adc_raw_no_lib,??_read_adc_raw_no_lib+1
  8165  002F2A  6A17               	clrf	??_read_adc_raw_no_lib,c
  8166  002F2C  1017               	iorwf	??_read_adc_raw_no_lib,w,c
  8167  002F2E  6E19               	movwf	read_adc_raw_no_lib@raw_value,c
  8168  002F30  5018               	movf	??_read_adc_raw_no_lib+1,w,c
  8169  002F32  6E1A               	movwf	read_adc_raw_no_lib@raw_value+1,c
  8170                           
  8171                           ;Main.c: 208: return raw_value;
  8172  002F34  C019  F015         	movff	read_adc_raw_no_lib@raw_value,?_read_adc_raw_no_lib
  8173  002F38  C01A  F016         	movff	read_adc_raw_no_lib@raw_value+1,?_read_adc_raw_no_lib+1
  8174  002F3C  0012               	return	
  8175  002F3E                     __end_of_read_adc_raw_no_lib:
  8176                           	opt stack 0
  8177                           tblptru	equ	0xFF8
  8178                           tblptrh	equ	0xFF7
  8179                           tblptrl	equ	0xFF6
  8180                           tablat	equ	0xFF5
  8181                           prodh	equ	0xFF4
  8182                           prodl	equ	0xFF3
  8183                           postinc0	equ	0xFEE
  8184                           wreg	equ	0xFE8
  8185                           indf1	equ	0xFE7
  8186                           postdec1	equ	0xFE5
  8187                           fsr1h	equ	0xFE2
  8188                           fsr1l	equ	0xFE1
  8189                           indf2	equ	0xFDF
  8190                           postinc2	equ	0xFDE
  8191                           postdec2	equ	0xFDD
  8192                           fsr2h	equ	0xFDA
  8193                           fsr2l	equ	0xFD9
  8194                           status	equ	0xFD8
  8195                           
  8196 ;; *************** function ___xxtofl *****************
  8197 ;; Defined at:
  8198 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\xxtofl.c"
  8199 ;; Parameters:    Size  Location     Type
  8200 ;;  sign            1    wreg     unsigned char 
  8201 ;;  val             4   26[COMRAM] long 
  8202 ;; Auto vars:     Size  Location     Type
  8203 ;;  sign            1   34[COMRAM] unsigned char 
  8204 ;;  arg             4   36[COMRAM] unsigned long 
  8205 ;;  exp             1   35[COMRAM] unsigned char 
  8206 ;; Return value:  Size  Location     Type
  8207 ;;                  4   26[COMRAM] unsigned char 
  8208 ;; Registers used:
  8209 ;;		wreg, status,2, status,0
  8210 ;; Tracked objects:
  8211 ;;		On entry : 0/0
  8212 ;;		On exit  : 0/0
  8213 ;;		Unchanged: 0/0
  8214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8215 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8216 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8217 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8218 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8219 ;;Total ram usage:       14 bytes
  8220 ;; Hardware stack levels used:    1
  8221 ;; Hardware stack levels required when called:    3
  8222 ;; This function calls:
  8223 ;;		Nothing
  8224 ;; This function is called by:
  8225 ;;		_read_adc_voltage
  8226 ;;		_sprintf
  8227 ;; This function uses a non-reentrant model
  8228 ;;
  8229                           
  8230                           	psect	text22
  8231  00216C                     __ptext22:
  8232                           	opt stack 0
  8233  00216C                     ___xxtofl:
  8234                           	opt stack 26
  8235                           
  8236                           ;incstack = 0
  8237                           ;___xxtofl@sign stored from wreg
  8238  00216C  6E23               	movwf	___xxtofl@sign,c
  8239  00216E  5023               	movf	___xxtofl@sign,w,c
  8240  002170  A4D8               	btfss	status,2,c
  8241  002172  AE1E               	btfss	___xxtofl@val+3,7,c
  8242  002174  D01A               	goto	l1062
  8243  002176  C01B  F01F         	movff	___xxtofl@val,??___xxtofl
  8244  00217A  C01C  F020         	movff	___xxtofl@val+1,??___xxtofl+1
  8245  00217E  C01D  F021         	movff	___xxtofl@val+2,??___xxtofl+2
  8246  002182  C01E  F022         	movff	___xxtofl@val+3,??___xxtofl+3
  8247  002186  1E1F               	comf	??___xxtofl,f,c
  8248  002188  1E20               	comf	??___xxtofl+1,f,c
  8249  00218A  1E21               	comf	??___xxtofl+2,f,c
  8250  00218C  1E22               	comf	??___xxtofl+3,f,c
  8251  00218E  2A1F               	incf	??___xxtofl,f,c
  8252  002190  0E00               	movlw	0
  8253  002192  2220               	addwfc	??___xxtofl+1,f,c
  8254  002194  2221               	addwfc	??___xxtofl+2,f,c
  8255  002196  2222               	addwfc	??___xxtofl+3,f,c
  8256  002198  C01F  F025         	movff	??___xxtofl,___xxtofl@arg
  8257  00219C  C020  F026         	movff	??___xxtofl+1,___xxtofl@arg+1
  8258  0021A0  C021  F027         	movff	??___xxtofl+2,___xxtofl@arg+2
  8259  0021A4  C022  F028         	movff	??___xxtofl+3,___xxtofl@arg+3
  8260  0021A8  D008               	goto	l1063
  8261  0021AA                     l1062:
  8262  0021AA  C01B  F025         	movff	___xxtofl@val,___xxtofl@arg
  8263  0021AE  C01C  F026         	movff	___xxtofl@val+1,___xxtofl@arg+1
  8264  0021B2  C01D  F027         	movff	___xxtofl@val+2,___xxtofl@arg+2
  8265  0021B6  C01E  F028         	movff	___xxtofl@val+3,___xxtofl@arg+3
  8266  0021BA                     l1063:
  8267  0021BA  501B               	movf	___xxtofl@val,w,c
  8268  0021BC  101C               	iorwf	___xxtofl@val+1,w,c
  8269  0021BE  101D               	iorwf	___xxtofl@val+2,w,c
  8270  0021C0  101E               	iorwf	___xxtofl@val+3,w,c
  8271  0021C2  A4D8               	btfss	status,2,c
  8272  0021C4  D009               	goto	l1064
  8273  0021C6  0E00               	movlw	0
  8274  0021C8  6E1B               	movwf	?___xxtofl,c
  8275  0021CA  0E00               	movlw	0
  8276  0021CC  6E1C               	movwf	?___xxtofl+1,c
  8277  0021CE  0E00               	movlw	0
  8278  0021D0  6E1D               	movwf	?___xxtofl+2,c
  8279  0021D2  0E00               	movlw	0
  8280  0021D4  6E1E               	movwf	?___xxtofl+3,c
  8281  0021D6  0012               	return	
  8282  0021D8                     l1064:
  8283  0021D8  0E96               	movlw	150
  8284  0021DA  6E24               	movwf	___xxtofl@exp,c
  8285  0021DC  D006               	goto	l1066
  8286  0021DE  2A24               	incf	___xxtofl@exp,f,c
  8287  0021E0  90D8               	bcf	status,0,c
  8288  0021E2  3228               	rrcf	___xxtofl@arg+3,f,c
  8289  0021E4  3227               	rrcf	___xxtofl@arg+2,f,c
  8290  0021E6  3226               	rrcf	___xxtofl@arg+1,f,c
  8291  0021E8  3225               	rrcf	___xxtofl@arg,f,c
  8292  0021EA                     l1066:
  8293  0021EA  0E00               	movlw	0
  8294  0021EC  1425               	andwf	___xxtofl@arg,w,c
  8295  0021EE  6E1F               	movwf	??___xxtofl& (0+255),c
  8296  0021F0  0E00               	movlw	0
  8297  0021F2  1426               	andwf	___xxtofl@arg+1,w,c
  8298  0021F4  6E20               	movwf	(??___xxtofl+1)& (0+255),c
  8299  0021F6  0E00               	movlw	0
  8300  0021F8  1427               	andwf	___xxtofl@arg+2,w,c
  8301  0021FA  6E21               	movwf	(??___xxtofl+2)& (0+255),c
  8302  0021FC  0EFE               	movlw	254
  8303  0021FE  1428               	andwf	___xxtofl@arg+3,w,c
  8304  002200  6E22               	movwf	(??___xxtofl+3)& (0+255),c
  8305  002202  501F               	movf	??___xxtofl,w,c
  8306  002204  1020               	iorwf	??___xxtofl+1,w,c
  8307  002206  1021               	iorwf	??___xxtofl+2,w,c
  8308  002208  1022               	iorwf	??___xxtofl+3,w,c
  8309  00220A  B4D8               	btfsc	status,2,c
  8310  00220C  D00D               	goto	l1069
  8311  00220E  D7E7               	goto	l1067
  8312  002210  2A24               	incf	___xxtofl@exp,f,c
  8313  002212  0E01               	movlw	1
  8314  002214  2625               	addwf	___xxtofl@arg,f,c
  8315  002216  0E00               	movlw	0
  8316  002218  2226               	addwfc	___xxtofl@arg+1,f,c
  8317  00221A  2227               	addwfc	___xxtofl@arg+2,f,c
  8318  00221C  2228               	addwfc	___xxtofl@arg+3,f,c
  8319  00221E  90D8               	bcf	status,0,c
  8320  002220  3228               	rrcf	___xxtofl@arg+3,f,c
  8321  002222  3227               	rrcf	___xxtofl@arg+2,f,c
  8322  002224  3226               	rrcf	___xxtofl@arg+1,f,c
  8323  002226  3225               	rrcf	___xxtofl@arg,f,c
  8324  002228                     l1069:
  8325  002228  0E00               	movlw	0
  8326  00222A  1425               	andwf	___xxtofl@arg,w,c
  8327  00222C  6E1F               	movwf	??___xxtofl& (0+255),c
  8328  00222E  0E00               	movlw	0
  8329  002230  1426               	andwf	___xxtofl@arg+1,w,c
  8330  002232  6E20               	movwf	(??___xxtofl+1)& (0+255),c
  8331  002234  0E00               	movlw	0
  8332  002236  1427               	andwf	___xxtofl@arg+2,w,c
  8333  002238  6E21               	movwf	(??___xxtofl+2)& (0+255),c
  8334  00223A  0EFF               	movlw	255
  8335  00223C  1428               	andwf	___xxtofl@arg+3,w,c
  8336  00223E  6E22               	movwf	(??___xxtofl+3)& (0+255),c
  8337  002240  501F               	movf	??___xxtofl,w,c
  8338  002242  1020               	iorwf	??___xxtofl+1,w,c
  8339  002244  1021               	iorwf	??___xxtofl+2,w,c
  8340  002246  1022               	iorwf	??___xxtofl+3,w,c
  8341  002248  B4D8               	btfsc	status,2,c
  8342  00224A  D007               	goto	l1072
  8343  00224C  D7E1               	goto	l1070
  8344  00224E  0624               	decf	___xxtofl@exp,f,c
  8345  002250  90D8               	bcf	status,0,c
  8346  002252  3625               	rlcf	___xxtofl@arg,f,c
  8347  002254  3626               	rlcf	___xxtofl@arg+1,f,c
  8348  002256  3627               	rlcf	___xxtofl@arg+2,f,c
  8349  002258  3628               	rlcf	___xxtofl@arg+3,f,c
  8350  00225A                     l1072:
  8351  00225A  BE27               	btfsc	___xxtofl@arg+2,7,c
  8352  00225C  D003               	goto	u4510
  8353  00225E  0E02               	movlw	2
  8354  002260  6024               	cpfslt	___xxtofl@exp,c
  8355  002262  D7F5               	goto	l1073
  8356  002264                     u4510:
  8357  002264  B024               	btfsc	___xxtofl@exp,0,c
  8358  002266  D008               	goto	l1077
  8359  002268  0EFF               	movlw	255
  8360  00226A  1625               	andwf	___xxtofl@arg,f,c
  8361  00226C  0EFF               	movlw	255
  8362  00226E  1626               	andwf	___xxtofl@arg+1,f,c
  8363  002270  0E7F               	movlw	127
  8364  002272  1627               	andwf	___xxtofl@arg+2,f,c
  8365  002274  0EFF               	movlw	255
  8366  002276  1628               	andwf	___xxtofl@arg+3,f,c
  8367  002278                     l1077:
  8368  002278  90D8               	bcf	status,0,c
  8369  00227A  3224               	rrcf	___xxtofl@exp,f,c
  8370  00227C  C024  F01F         	movff	___xxtofl@exp,??___xxtofl
  8371  002280  6A20               	clrf	(??___xxtofl+1)& (0+255),c
  8372  002282  6A21               	clrf	(??___xxtofl+2)& (0+255),c
  8373  002284  6A22               	clrf	(??___xxtofl+3)& (0+255),c
  8374  002286  C01F  F022         	movff	??___xxtofl,??___xxtofl+3
  8375  00228A  6A21               	clrf	??___xxtofl+2,c
  8376  00228C  6A20               	clrf	??___xxtofl+1,c
  8377  00228E  6A1F               	clrf	??___xxtofl,c
  8378  002290  501F               	movf	??___xxtofl,w,c
  8379  002292  1225               	iorwf	___xxtofl@arg,f,c
  8380  002294  5020               	movf	??___xxtofl+1,w,c
  8381  002296  1226               	iorwf	___xxtofl@arg+1,f,c
  8382  002298  5021               	movf	??___xxtofl+2,w,c
  8383  00229A  1227               	iorwf	___xxtofl@arg+2,f,c
  8384  00229C  5022               	movf	??___xxtofl+3,w,c
  8385  00229E  1228               	iorwf	___xxtofl@arg+3,f,c
  8386  0022A0  5023               	movf	___xxtofl@sign,w,c
  8387  0022A2  A4D8               	btfss	status,2,c
  8388  0022A4  AE1E               	btfss	___xxtofl@val+3,7,c
  8389  0022A6  D001               	goto	l1078
  8390  0022A8  8E28               	bsf	___xxtofl@arg+3,7,c
  8391  0022AA                     l1078:
  8392  0022AA  C025  F01B         	movff	___xxtofl@arg,?___xxtofl
  8393  0022AE  C026  F01C         	movff	___xxtofl@arg+1,?___xxtofl+1
  8394  0022B2  C027  F01D         	movff	___xxtofl@arg+2,?___xxtofl+2
  8395  0022B6  C028  F01E         	movff	___xxtofl@arg+3,?___xxtofl+3
  8396  0022BA  0012               	return	
  8397  0022BC                     __end_of___xxtofl:
  8398                           	opt stack 0
  8399                           tblptru	equ	0xFF8
  8400                           tblptrh	equ	0xFF7
  8401                           tblptrl	equ	0xFF6
  8402                           tablat	equ	0xFF5
  8403                           prodh	equ	0xFF4
  8404                           prodl	equ	0xFF3
  8405                           postinc0	equ	0xFEE
  8406                           wreg	equ	0xFE8
  8407                           indf1	equ	0xFE7
  8408                           postdec1	equ	0xFE5
  8409                           fsr1h	equ	0xFE2
  8410                           fsr1l	equ	0xFE1
  8411                           indf2	equ	0xFDF
  8412                           postinc2	equ	0xFDE
  8413                           postdec2	equ	0xFDD
  8414                           fsr2h	equ	0xFDA
  8415                           fsr2l	equ	0xFD9
  8416                           status	equ	0xFD8
  8417                           
  8418 ;; *************** function ___wmul *****************
  8419 ;; Defined at:
  8420 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  8421 ;; Parameters:    Size  Location     Type
  8422 ;;  multiplier      2   20[COMRAM] unsigned int 
  8423 ;;  multiplicand    2   22[COMRAM] unsigned int 
  8424 ;; Auto vars:     Size  Location     Type
  8425 ;;  product         2   24[COMRAM] unsigned int 
  8426 ;; Return value:  Size  Location     Type
  8427 ;;                  2   20[COMRAM] unsigned int 
  8428 ;; Registers used:
  8429 ;;		wreg, status,2, status,0, prodl, prodh
  8430 ;; Tracked objects:
  8431 ;;		On entry : 0/0
  8432 ;;		On exit  : 0/0
  8433 ;;		Unchanged: 0/0
  8434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8435 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8436 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8438 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8439 ;;Total ram usage:        6 bytes
  8440 ;; Hardware stack levels used:    1
  8441 ;; Hardware stack levels required when called:    3
  8442 ;; This function calls:
  8443 ;;		Nothing
  8444 ;; This function is called by:
  8445 ;;		_read_adc_voltage
  8446 ;;		_main
  8447 ;;		_sprintf
  8448 ;; This function uses a non-reentrant model
  8449 ;;
  8450                           
  8451                           	psect	text23
  8452  00302C                     __ptext23:
  8453                           	opt stack 0
  8454  00302C                     ___wmul:
  8455                           	opt stack 26
  8456                           
  8457                           ;incstack = 0
  8458  00302C  5015               	movf	___wmul@multiplier,w,c
  8459  00302E  0217               	mulwf	___wmul@multiplicand,c
  8460  003030  CFF3 F019          	movff	prodl,___wmul@product
  8461  003034  CFF4 F01A          	movff	prodh,___wmul@product+1
  8462  003038  5015               	movf	___wmul@multiplier,w,c
  8463  00303A  0218               	mulwf	___wmul@multiplicand+1,c
  8464  00303C  50F3               	movf	prodl,w,c
  8465  00303E  261A               	addwf	___wmul@product+1,f,c
  8466  003040  5016               	movf	___wmul@multiplier+1,w,c
  8467  003042  0217               	mulwf	___wmul@multiplicand,c
  8468  003044  50F3               	movf	prodl,w,c
  8469  003046  261A               	addwf	___wmul@product+1,f,c
  8470  003048  C019  F015         	movff	___wmul@product,?___wmul
  8471  00304C  C01A  F016         	movff	___wmul@product+1,?___wmul+1
  8472  003050  0012               	return	
  8473  003052                     __end_of___wmul:
  8474                           	opt stack 0
  8475                           tblptru	equ	0xFF8
  8476                           tblptrh	equ	0xFF7
  8477                           tblptrl	equ	0xFF6
  8478                           tablat	equ	0xFF5
  8479                           prodh	equ	0xFF4
  8480                           prodl	equ	0xFF3
  8481                           postinc0	equ	0xFEE
  8482                           wreg	equ	0xFE8
  8483                           indf1	equ	0xFE7
  8484                           postdec1	equ	0xFE5
  8485                           fsr1h	equ	0xFE2
  8486                           fsr1l	equ	0xFE1
  8487                           indf2	equ	0xFDF
  8488                           postinc2	equ	0xFDE
  8489                           postdec2	equ	0xFDD
  8490                           fsr2h	equ	0xFDA
  8491                           fsr2l	equ	0xFD9
  8492                           status	equ	0xFD8
  8493                           
  8494 ;; *************** function ___fldiv *****************
  8495 ;; Defined at:
  8496 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcdiv.c"
  8497 ;; Parameters:    Size  Location     Type
  8498 ;;  b               4   40[COMRAM] unsigned int 
  8499 ;;  a               4   44[COMRAM] unsigned int 
  8500 ;; Auto vars:     Size  Location     Type
  8501 ;;  grs             4   59[COMRAM] unsigned long 
  8502 ;;  rem             4   53[COMRAM] unsigned long 
  8503 ;;  new_exp         2   57[COMRAM] int 
  8504 ;;  aexp            1   64[COMRAM] unsigned char 
  8505 ;;  bexp            1   63[COMRAM] unsigned char 
  8506 ;;  sign            1   52[COMRAM] unsigned char 
  8507 ;; Return value:  Size  Location     Type
  8508 ;;                  4   40[COMRAM] unsigned char 
  8509 ;; Registers used:
  8510 ;;		wreg, status,2, status,0
  8511 ;; Tracked objects:
  8512 ;;		On entry : 0/0
  8513 ;;		On exit  : 0/0
  8514 ;;		Unchanged: 0/0
  8515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8516 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8517 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8518 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8519 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8520 ;;Total ram usage:       25 bytes
  8521 ;; Hardware stack levels used:    1
  8522 ;; Hardware stack levels required when called:    3
  8523 ;; This function calls:
  8524 ;;		Nothing
  8525 ;; This function is called by:
  8526 ;;		_read_adc_voltage
  8527 ;; This function uses a non-reentrant model
  8528 ;;
  8529                           
  8530                           	psect	text24
  8531  001C0A                     __ptext24:
  8532                           	opt stack 0
  8533  001C0A                     ___fldiv:
  8534                           	opt stack 26
  8535                           
  8536                           ;incstack = 0
  8537  001C0A  502C               	movf	___fldiv@b+3,w,c
  8538  001C0C  0B80               	andlw	128
  8539  001C0E  6E35               	movwf	___fldiv@sign,c
  8540  001C10  502C               	movf	___fldiv@b+3,w,c
  8541  001C12  242C               	addwf	___fldiv@b+3,w,c
  8542  001C14  6E40               	movwf	___fldiv@bexp,c
  8543  001C16  BE2B               	btfsc	___fldiv@b+2,7,c
  8544  001C18  8040               	bsf	___fldiv@bexp,0,c
  8545  001C1A  5040               	movf	___fldiv@bexp,w,c
  8546  001C1C  B4D8               	btfsc	status,2,c
  8547  001C1E  D00D               	goto	l1000
  8548  001C20  2840               	incf	___fldiv@bexp,w,c
  8549  001C22  A4D8               	btfss	status,2,c
  8550  001C24  D008               	goto	l1001
  8551  001C26  0E00               	movlw	0
  8552  001C28  6E29               	movwf	___fldiv@b,c
  8553  001C2A  0E00               	movlw	0
  8554  001C2C  6E2A               	movwf	___fldiv@b+1,c
  8555  001C2E  0E00               	movlw	0
  8556  001C30  6E2B               	movwf	___fldiv@b+2,c
  8557  001C32  0E00               	movlw	0
  8558  001C34  6E2C               	movwf	___fldiv@b+3,c
  8559  001C36                     l1001:
  8560  001C36  8E2B               	bsf	___fldiv@b+2,7,c
  8561  001C38  D006               	goto	L10
  8562  001C3A                     l1000:
  8563  001C3A  0E00               	movlw	0
  8564  001C3C  6E29               	movwf	___fldiv@b,c
  8565  001C3E  0E00               	movlw	0
  8566  001C40  6E2A               	movwf	___fldiv@b+1,c
  8567  001C42  0E00               	movlw	0
  8568  001C44  6E2B               	movwf	___fldiv@b+2,c
  8569  001C46                     L10:
  8570  001C46  0E00               	movlw	0
  8571  001C48  6E2C               	movwf	___fldiv@b+3,c
  8572  001C4A  5030               	movf	___fldiv@a+3,w,c
  8573  001C4C  0B80               	andlw	128
  8574  001C4E  1A35               	xorwf	___fldiv@sign,f,c
  8575  001C50  5030               	movf	___fldiv@a+3,w,c
  8576  001C52  2430               	addwf	___fldiv@a+3,w,c
  8577  001C54  6E41               	movwf	___fldiv@aexp,c
  8578  001C56  BE2F               	btfsc	___fldiv@a+2,7,c
  8579  001C58  8041               	bsf	___fldiv@aexp,0,c
  8580  001C5A  5041               	movf	___fldiv@aexp,w,c
  8581  001C5C  B4D8               	btfsc	status,2,c
  8582  001C5E  D00D               	goto	l1004
  8583  001C60  2841               	incf	___fldiv@aexp,w,c
  8584  001C62  A4D8               	btfss	status,2,c
  8585  001C64  D008               	goto	l1005
  8586  001C66  0E00               	movlw	0
  8587  001C68  6E2D               	movwf	___fldiv@a,c
  8588  001C6A  0E00               	movlw	0
  8589  001C6C  6E2E               	movwf	___fldiv@a+1,c
  8590  001C6E  0E00               	movlw	0
  8591  001C70  6E2F               	movwf	___fldiv@a+2,c
  8592  001C72  0E00               	movlw	0
  8593  001C74  6E30               	movwf	___fldiv@a+3,c
  8594  001C76                     l1005:
  8595  001C76  8E2F               	bsf	___fldiv@a+2,7,c
  8596  001C78  D006               	goto	L11
  8597  001C7A                     l1004:
  8598  001C7A  0E00               	movlw	0
  8599  001C7C  6E2D               	movwf	___fldiv@a,c
  8600  001C7E  0E00               	movlw	0
  8601  001C80  6E2E               	movwf	___fldiv@a+1,c
  8602  001C82  0E00               	movlw	0
  8603  001C84  6E2F               	movwf	___fldiv@a+2,c
  8604  001C86                     L11:
  8605  001C86  0E00               	movlw	0
  8606  001C88  6E30               	movwf	___fldiv@a+3,c
  8607  001C8A  502D               	movf	___fldiv@a,w,c
  8608  001C8C  102E               	iorwf	___fldiv@a+1,w,c
  8609  001C8E  102F               	iorwf	___fldiv@a+2,w,c
  8610  001C90  1030               	iorwf	___fldiv@a+3,w,c
  8611  001C92  A4D8               	btfss	status,2,c
  8612  001C94  D015               	goto	l1007
  8613  001C96  0E00               	movlw	0
  8614  001C98  6E29               	movwf	___fldiv@b,c
  8615  001C9A  0E00               	movlw	0
  8616  001C9C  6E2A               	movwf	___fldiv@b+1,c
  8617  001C9E  0E00               	movlw	0
  8618  001CA0  6E2B               	movwf	___fldiv@b+2,c
  8619  001CA2  0E00               	movlw	0
  8620  001CA4  6E2C               	movwf	___fldiv@b+3,c
  8621  001CA6  0E80               	movlw	128
  8622  001CA8  122B               	iorwf	___fldiv@b+2,f,c
  8623  001CAA  0E7F               	movlw	127
  8624  001CAC  122C               	iorwf	___fldiv@b+3,f,c
  8625  001CAE  C029  F029         	movff	___fldiv@b,?___fldiv
  8626  001CB2  C02A  F02A         	movff	___fldiv@b+1,?___fldiv+1
  8627  001CB6  C02B  F02B         	movff	___fldiv@b+2,?___fldiv+2
  8628  001CBA  C02C  F02C         	movff	___fldiv@b+3,?___fldiv+3
  8629  001CBE  0012               	return	
  8630  001CC0                     l1007:
  8631  001CC0  5040               	movf	___fldiv@bexp,w,c
  8632  001CC2  A4D8               	btfss	status,2,c
  8633  001CC4  D011               	goto	l1009
  8634  001CC6  0E00               	movlw	0
  8635  001CC8  6E29               	movwf	___fldiv@b,c
  8636  001CCA  0E00               	movlw	0
  8637  001CCC  6E2A               	movwf	___fldiv@b+1,c
  8638  001CCE  0E00               	movlw	0
  8639  001CD0  6E2B               	movwf	___fldiv@b+2,c
  8640  001CD2  0E00               	movlw	0
  8641  001CD4  6E2C               	movwf	___fldiv@b+3,c
  8642  001CD6  C029  F029         	movff	___fldiv@b,?___fldiv
  8643  001CDA  C02A  F02A         	movff	___fldiv@b+1,?___fldiv+1
  8644  001CDE  C02B  F02B         	movff	___fldiv@b+2,?___fldiv+2
  8645  001CE2  C02C  F02C         	movff	___fldiv@b+3,?___fldiv+3
  8646  001CE6  0012               	return	
  8647  001CE8                     l1009:
  8648  001CE8  5041               	movf	___fldiv@aexp,w,c
  8649  001CEA  6E31               	movwf	??___fldiv& (0+255),c
  8650  001CEC  6A32               	clrf	(??___fldiv+1)& (0+255),c
  8651  001CEE  1E31               	comf	??___fldiv,f,c
  8652  001CF0  1E32               	comf	??___fldiv+1,f,c
  8653  001CF2  4A31               	infsnz	??___fldiv,f,c
  8654  001CF4  2A32               	incf	??___fldiv+1,f,c
  8655  001CF6  5040               	movf	___fldiv@bexp,w,c
  8656  001CF8  6E33               	movwf	(??___fldiv+2)& (0+255),c
  8657  001CFA  6A34               	clrf	(??___fldiv+3)& (0+255),c
  8658  001CFC  5031               	movf	??___fldiv,w,c
  8659  001CFE  2633               	addwf	??___fldiv+2,f,c
  8660  001D00  5032               	movf	??___fldiv+1,w,c
  8661  001D02  2234               	addwfc	??___fldiv+3,f,c
  8662  001D04  0E7F               	movlw	127
  8663  001D06  2433               	addwf	??___fldiv+2,w,c
  8664  001D08  6E3A               	movwf	___fldiv@new_exp,c
  8665  001D0A  0E00               	movlw	0
  8666  001D0C  2034               	addwfc	??___fldiv+3,w,c
  8667  001D0E  6E3B               	movwf	___fldiv@new_exp+1,c
  8668  001D10  C029  F036         	movff	___fldiv@b,___fldiv@rem
  8669  001D14  C02A  F037         	movff	___fldiv@b+1,___fldiv@rem+1
  8670  001D18  C02B  F038         	movff	___fldiv@b+2,___fldiv@rem+2
  8671  001D1C  C02C  F039         	movff	___fldiv@b+3,___fldiv@rem+3
  8672  001D20  0E00               	movlw	0
  8673  001D22  6E29               	movwf	___fldiv@b,c
  8674  001D24  0E00               	movlw	0
  8675  001D26  6E2A               	movwf	___fldiv@b+1,c
  8676  001D28  0E00               	movlw	0
  8677  001D2A  6E2B               	movwf	___fldiv@b+2,c
  8678  001D2C  0E00               	movlw	0
  8679  001D2E  6E2C               	movwf	___fldiv@b+3,c
  8680  001D30  0E00               	movlw	0
  8681  001D32  6E3C               	movwf	___fldiv@grs,c
  8682  001D34  0E00               	movlw	0
  8683  001D36  6E3D               	movwf	___fldiv@grs+1,c
  8684  001D38  0E00               	movlw	0
  8685  001D3A  6E3E               	movwf	___fldiv@grs+2,c
  8686  001D3C  0E00               	movlw	0
  8687  001D3E  6E3F               	movwf	___fldiv@grs+3,c
  8688  001D40  0E00               	movlw	0
  8689  001D42  6E41               	movwf	___fldiv@aexp,c
  8690  001D44  D028               	goto	l1010
  8691  001D46  5041               	movf	___fldiv@aexp,w,c
  8692  001D48  B4D8               	btfsc	status,2,c
  8693  001D4A  D011               	goto	l1012
  8694  001D4C  90D8               	bcf	status,0,c
  8695  001D4E  3636               	rlcf	___fldiv@rem,f,c
  8696  001D50  3637               	rlcf	___fldiv@rem+1,f,c
  8697  001D52  3638               	rlcf	___fldiv@rem+2,f,c
  8698  001D54  3639               	rlcf	___fldiv@rem+3,f,c
  8699  001D56  90D8               	bcf	status,0,c
  8700  001D58  3629               	rlcf	___fldiv@b,f,c
  8701  001D5A  362A               	rlcf	___fldiv@b+1,f,c
  8702  001D5C  362B               	rlcf	___fldiv@b+2,f,c
  8703  001D5E  362C               	rlcf	___fldiv@b+3,f,c
  8704  001D60  BE3F               	btfsc	___fldiv@grs+3,7,c
  8705  001D62  8029               	bsf	___fldiv@b,0,c
  8706  001D64  90D8               	bcf	status,0,c
  8707  001D66  363C               	rlcf	___fldiv@grs,f,c
  8708  001D68  363D               	rlcf	___fldiv@grs+1,f,c
  8709  001D6A  363E               	rlcf	___fldiv@grs+2,f,c
  8710  001D6C  363F               	rlcf	___fldiv@grs+3,f,c
  8711  001D6E                     l1012:
  8712  001D6E  502D               	movf	___fldiv@a,w,c
  8713  001D70  5C36               	subwf	___fldiv@rem,w,c
  8714  001D72  502E               	movf	___fldiv@a+1,w,c
  8715  001D74  5837               	subwfb	___fldiv@rem+1,w,c
  8716  001D76  502F               	movf	___fldiv@a+2,w,c
  8717  001D78  5838               	subwfb	___fldiv@rem+2,w,c
  8718  001D7A  5030               	movf	___fldiv@a+3,w,c
  8719  001D7C  5839               	subwfb	___fldiv@rem+3,w,c
  8720  001D7E  A0D8               	btfss	status,0,c
  8721  001D80  D009               	goto	l1014
  8722  001D82  8C3F               	bsf	___fldiv@grs+3,6,c
  8723  001D84  502D               	movf	___fldiv@a,w,c
  8724  001D86  5E36               	subwf	___fldiv@rem,f,c
  8725  001D88  502E               	movf	___fldiv@a+1,w,c
  8726  001D8A  5A37               	subwfb	___fldiv@rem+1,f,c
  8727  001D8C  502F               	movf	___fldiv@a+2,w,c
  8728  001D8E  5A38               	subwfb	___fldiv@rem+2,f,c
  8729  001D90  5030               	movf	___fldiv@a+3,w,c
  8730  001D92  5A39               	subwfb	___fldiv@rem+3,f,c
  8731  001D94                     l1014:
  8732  001D94  2A41               	incf	___fldiv@aexp,f,c
  8733  001D96                     l1010:
  8734  001D96  0E19               	movlw	25
  8735  001D98  6441               	cpfsgt	___fldiv@aexp,c
  8736  001D9A  D7D5               	goto	l1011
  8737  001D9C  5036               	movf	___fldiv@rem,w,c
  8738  001D9E  1037               	iorwf	___fldiv@rem+1,w,c
  8739  001DA0  1038               	iorwf	___fldiv@rem+2,w,c
  8740  001DA2  1039               	iorwf	___fldiv@rem+3,w,c
  8741  001DA4  B4D8               	btfsc	status,2,c
  8742  001DA6  D011               	goto	l1017
  8743  001DA8  803C               	bsf	___fldiv@grs,0,c
  8744  001DAA  D00F               	goto	l1017
  8745  001DAC  90D8               	bcf	status,0,c
  8746  001DAE  3629               	rlcf	___fldiv@b,f,c
  8747  001DB0  362A               	rlcf	___fldiv@b+1,f,c
  8748  001DB2  362B               	rlcf	___fldiv@b+2,f,c
  8749  001DB4  362C               	rlcf	___fldiv@b+3,f,c
  8750  001DB6  BE3F               	btfsc	___fldiv@grs+3,7,c
  8751  001DB8  8029               	bsf	___fldiv@b,0,c
  8752  001DBA  90D8               	bcf	status,0,c
  8753  001DBC  363C               	rlcf	___fldiv@grs,f,c
  8754  001DBE  363D               	rlcf	___fldiv@grs+1,f,c
  8755  001DC0  363E               	rlcf	___fldiv@grs+2,f,c
  8756  001DC2  363F               	rlcf	___fldiv@grs+3,f,c
  8757  001DC4  063A               	decf	___fldiv@new_exp,f,c
  8758  001DC6  A0D8               	btfss	status,0,c
  8759  001DC8  063B               	decf	___fldiv@new_exp+1,f,c
  8760  001DCA                     l1017:
  8761  001DCA  AE2B               	btfss	___fldiv@b+2,7,c
  8762  001DCC  D7EF               	goto	l1018
  8763  001DCE  0E00               	movlw	0
  8764  001DD0  6E41               	movwf	___fldiv@aexp,c
  8765  001DD2  AE3F               	btfss	___fldiv@grs+3,7,c
  8766  001DD4  D016               	goto	l1024
  8767  001DD6  0EFF               	movlw	255
  8768  001DD8  143C               	andwf	___fldiv@grs,w,c
  8769  001DDA  6E31               	movwf	??___fldiv& (0+255),c
  8770  001DDC  0EFF               	movlw	255
  8771  001DDE  143D               	andwf	___fldiv@grs+1,w,c
  8772  001DE0  6E32               	movwf	(??___fldiv+1)& (0+255),c
  8773  001DE2  0EFF               	movlw	255
  8774  001DE4  143E               	andwf	___fldiv@grs+2,w,c
  8775  001DE6  6E33               	movwf	(??___fldiv+2)& (0+255),c
  8776  001DE8  0E7F               	movlw	127
  8777  001DEA  143F               	andwf	___fldiv@grs+3,w,c
  8778  001DEC  6E34               	movwf	(??___fldiv+3)& (0+255),c
  8779  001DEE  5031               	movf	??___fldiv,w,c
  8780  001DF0  1032               	iorwf	??___fldiv+1,w,c
  8781  001DF2  1033               	iorwf	??___fldiv+2,w,c
  8782  001DF4  1034               	iorwf	??___fldiv+3,w,c
  8783  001DF6  A4D8               	btfss	status,2,c
  8784  001DF8  D002               	goto	u4200
  8785  001DFA  A029               	btfss	___fldiv@b,0,c
  8786  001DFC  D002               	goto	l1024
  8787  001DFE                     u4200:
  8788  001DFE  0E01               	movlw	1
  8789  001E00  6E41               	movwf	___fldiv@aexp,c
  8790  001E02                     l1024:
  8791  001E02  5041               	movf	___fldiv@aexp,w,c
  8792  001E04  B4D8               	btfsc	status,2,c
  8793  001E06  D01F               	goto	l1026
  8794  001E08  0E01               	movlw	1
  8795  001E0A  2629               	addwf	___fldiv@b,f,c
  8796  001E0C  0E00               	movlw	0
  8797  001E0E  222A               	addwfc	___fldiv@b+1,f,c
  8798  001E10  222B               	addwfc	___fldiv@b+2,f,c
  8799  001E12  222C               	addwfc	___fldiv@b+3,f,c
  8800  001E14  A02C               	btfss	___fldiv@b+3,0,c
  8801  001E16  D017               	goto	l1026
  8802  001E18  C029  F031         	movff	___fldiv@b,??___fldiv
  8803  001E1C  C02A  F032         	movff	___fldiv@b+1,??___fldiv+1
  8804  001E20  C02B  F033         	movff	___fldiv@b+2,??___fldiv+2
  8805  001E24  C02C  F034         	movff	___fldiv@b+3,??___fldiv+3
  8806  001E28  3434               	rlcf	??___fldiv+3,w,c
  8807  001E2A  3234               	rrcf	??___fldiv+3,f,c
  8808  001E2C  3233               	rrcf	??___fldiv+2,f,c
  8809  001E2E  3232               	rrcf	??___fldiv+1,f,c
  8810  001E30  3231               	rrcf	??___fldiv,f,c
  8811  001E32  C031  F029         	movff	??___fldiv,___fldiv@b
  8812  001E36  C032  F02A         	movff	??___fldiv+1,___fldiv@b+1
  8813  001E3A  C033  F02B         	movff	??___fldiv+2,___fldiv@b+2
  8814  001E3E  C034  F02C         	movff	??___fldiv+3,___fldiv@b+3
  8815  001E42  4A3A               	infsnz	___fldiv@new_exp,f,c
  8816  001E44  2A3B               	incf	___fldiv@new_exp+1,f,c
  8817  001E46                     l1026:
  8818  001E46  BE3B               	btfsc	___fldiv@new_exp+1,7,c
  8819  001E48  D010               	goto	l1027
  8820  001E4A  503B               	movf	___fldiv@new_exp+1,w,c
  8821  001E4C  E103               	bnz	u4230
  8822  001E4E  283A               	incf	___fldiv@new_exp,w,c
  8823  001E50  A0D8               	btfss	status,0,c
  8824  001E52  D00B               	goto	l1027
  8825  001E54                     u4230:
  8826  001E54  0E00               	movlw	0
  8827  001E56  6E3B               	movwf	___fldiv@new_exp+1,c
  8828  001E58  683A               	setf	___fldiv@new_exp,c
  8829  001E5A  0E00               	movlw	0
  8830  001E5C  6E29               	movwf	___fldiv@b,c
  8831  001E5E  0E00               	movlw	0
  8832  001E60  6E2A               	movwf	___fldiv@b+1,c
  8833  001E62  0E00               	movlw	0
  8834  001E64  6E2B               	movwf	___fldiv@b+2,c
  8835  001E66  0E00               	movlw	0
  8836  001E68  6E2C               	movwf	___fldiv@b+3,c
  8837  001E6A                     l1027:
  8838  001E6A  BE3B               	btfsc	___fldiv@new_exp+1,7,c
  8839  001E6C  D005               	goto	u4240
  8840  001E6E  503B               	movf	___fldiv@new_exp+1,w,c
  8841  001E70  E111               	bnz	l3910
  8842  001E72  043A               	decf	___fldiv@new_exp,w,c
  8843  001E74  B0D8               	btfsc	status,0,c
  8844  001E76  D00E               	goto	l1028
  8845  001E78                     u4240:
  8846  001E78  0E00               	movlw	0
  8847  001E7A  6E3B               	movwf	___fldiv@new_exp+1,c
  8848  001E7C  0E00               	movlw	0
  8849  001E7E  6E3A               	movwf	___fldiv@new_exp,c
  8850  001E80  0E00               	movlw	0
  8851  001E82  6E29               	movwf	___fldiv@b,c
  8852  001E84  0E00               	movlw	0
  8853  001E86  6E2A               	movwf	___fldiv@b+1,c
  8854  001E88  0E00               	movlw	0
  8855  001E8A  6E2B               	movwf	___fldiv@b+2,c
  8856  001E8C  0E00               	movlw	0
  8857  001E8E  6E2C               	movwf	___fldiv@b+3,c
  8858  001E90  0E00               	movlw	0
  8859  001E92  6E35               	movwf	___fldiv@sign,c
  8860  001E94                     l1028:
  8861  001E94                     l3910:
  8862  001E94  C03A  F040         	movff	___fldiv@new_exp,___fldiv@bexp
  8863  001E98  A040               	btfss	___fldiv@bexp,0,c
  8864  001E9A  D002               	goto	l1029
  8865  001E9C  8E2B               	bsf	___fldiv@b+2,7,c
  8866  001E9E  D001               	goto	l1030
  8867  001EA0                     l1029:
  8868  001EA0  9E2B               	bcf	___fldiv@b+2,7,c
  8869  001EA2                     l1030:
  8870  001EA2  90D8               	bcf	status,0,c
  8871  001EA4  3040               	rrcf	___fldiv@bexp,w,c
  8872  001EA6  6E2C               	movwf	___fldiv@b+3,c
  8873  001EA8  5035               	movf	___fldiv@sign,w,c
  8874  001EAA  122C               	iorwf	___fldiv@b+3,f,c
  8875  001EAC  C029  F029         	movff	___fldiv@b,?___fldiv
  8876  001EB0  C02A  F02A         	movff	___fldiv@b+1,?___fldiv+1
  8877  001EB4  C02B  F02B         	movff	___fldiv@b+2,?___fldiv+2
  8878  001EB8  C02C  F02C         	movff	___fldiv@b+3,?___fldiv+3
  8879  001EBC  0012               	return	
  8880  001EBE                     __end_of___fldiv:
  8881                           	opt stack 0
  8882                           tblptru	equ	0xFF8
  8883                           tblptrh	equ	0xFF7
  8884                           tblptrl	equ	0xFF6
  8885                           tablat	equ	0xFF5
  8886                           prodh	equ	0xFF4
  8887                           prodl	equ	0xFF3
  8888                           postinc0	equ	0xFEE
  8889                           wreg	equ	0xFE8
  8890                           indf1	equ	0xFE7
  8891                           postdec1	equ	0xFE5
  8892                           fsr1h	equ	0xFE2
  8893                           fsr1l	equ	0xFE1
  8894                           indf2	equ	0xFDF
  8895                           postinc2	equ	0xFDE
  8896                           postdec2	equ	0xFDD
  8897                           fsr2h	equ	0xFDA
  8898                           fsr2l	equ	0xFD9
  8899                           status	equ	0xFD8
  8900                           
  8901 ;; *************** function _lcd_puts *****************
  8902 ;; Defined at:
  8903 ;;		line 289 in file "Main.c"
  8904 ;; Parameters:    Size  Location     Type
  8905 ;;  s               2   34[COMRAM] PTR unsigned char 
  8906 ;;		 -> main@Buffer(32), 
  8907 ;; Auto vars:     Size  Location     Type
  8908 ;;		None
  8909 ;; Return value:  Size  Location     Type
  8910 ;;                  1    wreg      void 
  8911 ;; Registers used:
  8912 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8913 ;; Tracked objects:
  8914 ;;		On entry : 0/0
  8915 ;;		On exit  : 0/0
  8916 ;;		Unchanged: 0/0
  8917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8918 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8919 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8921 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8922 ;;Total ram usage:        2 bytes
  8923 ;; Hardware stack levels used:    1
  8924 ;; Hardware stack levels required when called:    8
  8925 ;; This function calls:
  8926 ;;		_lcd_putc
  8927 ;; This function is called by:
  8928 ;;		_main
  8929 ;; This function uses a non-reentrant model
  8930 ;;
  8931                           
  8932                           	psect	text25
  8933  00309C                     __ptext25:
  8934                           	opt stack 0
  8935  00309C                     _lcd_puts:
  8936                           	opt stack 22
  8937                           
  8938                           ;Main.c: 290: while (*s) {
  8939                           
  8940                           ;incstack = 0
  8941  00309C  D009               	goto	l257
  8942  00309E                     
  8943                           ;Main.c: 291: lcd_putc(*s);
  8944  00309E  C023  FFD9         	movff	lcd_puts@s,fsr2l
  8945  0030A2  C024  FFDA         	movff	lcd_puts@s+1,fsr2h
  8946  0030A6  50DF               	movf	indf2,w,c
  8947  0030A8  ECC6  F016         	call	_lcd_putc
  8948                           
  8949                           ;Main.c: 292: s++;
  8950  0030AC  4A23               	infsnz	lcd_puts@s,f,c
  8951  0030AE  2A24               	incf	lcd_puts@s+1,f,c
  8952  0030B0                     l257:
  8953  0030B0  C023  FFD9         	movff	lcd_puts@s,fsr2l
  8954  0030B4  C024  FFDA         	movff	lcd_puts@s+1,fsr2h
  8955  0030B8  50DF               	movf	indf2,w,c
  8956  0030BA  B4D8               	btfsc	status,2,c
  8957  0030BC  0012               	return	
  8958  0030BE  D7EF               	goto	l258
  8959  0030C0                     __end_of_lcd_puts:
  8960                           	opt stack 0
  8961                           tblptru	equ	0xFF8
  8962                           tblptrh	equ	0xFF7
  8963                           tblptrl	equ	0xFF6
  8964                           tablat	equ	0xFF5
  8965                           prodh	equ	0xFF4
  8966                           prodl	equ	0xFF3
  8967                           postinc0	equ	0xFEE
  8968                           wreg	equ	0xFE8
  8969                           indf1	equ	0xFE7
  8970                           postdec1	equ	0xFE5
  8971                           fsr1h	equ	0xFE2
  8972                           fsr1l	equ	0xFE1
  8973                           indf2	equ	0xFDF
  8974                           postinc2	equ	0xFDE
  8975                           postdec2	equ	0xFDD
  8976                           fsr2h	equ	0xFDA
  8977                           fsr2l	equ	0xFD9
  8978                           status	equ	0xFD8
  8979                           
  8980 ;; *************** function _lcd_putc *****************
  8981 ;; Defined at:
  8982 ;;		line 275 in file "Main.c"
  8983 ;; Parameters:    Size  Location     Type
  8984 ;;  c               1    wreg     unsigned char 
  8985 ;; Auto vars:     Size  Location     Type
  8986 ;;  c               1   33[COMRAM] unsigned char 
  8987 ;; Return value:  Size  Location     Type
  8988 ;;                  1    wreg      void 
  8989 ;; Registers used:
  8990 ;;		wreg, status,2, status,0, cstack
  8991 ;; Tracked objects:
  8992 ;;		On entry : 0/0
  8993 ;;		On exit  : 0/0
  8994 ;;		Unchanged: 0/0
  8995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8997 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8999 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9000 ;;Total ram usage:        1 bytes
  9001 ;; Hardware stack levels used:    1
  9002 ;; Hardware stack levels required when called:    7
  9003 ;; This function calls:
  9004 ;;		_delay_ms
  9005 ;;		_lcd_gotoxy
  9006 ;;		_lcd_send_byte
  9007 ;; This function is called by:
  9008 ;;		_lcd_puts
  9009 ;;		_main
  9010 ;; This function uses a non-reentrant model
  9011 ;;
  9012                           
  9013                           	psect	text26
  9014  002D8C                     __ptext26:
  9015                           	opt stack 0
  9016  002D8C                     _lcd_putc:
  9017                           	opt stack 22
  9018                           
  9019                           ;incstack = 0
  9020                           ;lcd_putc@c stored from wreg
  9021  002D8C  6E22               	movwf	lcd_putc@c,c
  9022                           
  9023                           ;Main.c: 276: switch (c) {
  9024  002D8E  D01E               	goto	l248
  9025  002D90  0E01               	movlw	1
  9026  002D92  6E1D               	movwf	lcd_send_byte@n,c
  9027  002D94  0E00               	movlw	0
  9028  002D96  EC1A  F017         	call	_lcd_send_byte
  9029                           
  9030                           ;Main.c: 278: delay_ms(2);
  9031  002D9A  0E00               	movlw	0
  9032  002D9C  6E16               	movwf	delay_ms@n+1,c
  9033  002D9E  0E02               	movlw	2
  9034  002DA0  6E15               	movwf	delay_ms@n,c
  9035  002DA2  EC29  F018         	call	_delay_ms	;wreg free
  9036                           
  9037                           ;Main.c: 279: break;
  9038  002DA6  0012               	return	
  9039  002DA8  0E02               	movlw	2
  9040  002DAA  6E1F               	movwf	lcd_gotoxy@y,c
  9041  002DAC  0E01               	movlw	1
  9042  002DAE  EC61  F017         	call	_lcd_gotoxy
  9043                           
  9044                           ;Main.c: 281: break;
  9045  002DB2  0012               	return	
  9046  002DB4  0E10               	movlw	16
  9047  002DB6  6E1D               	movwf	lcd_send_byte@n,c
  9048  002DB8  0E00               	movlw	0
  9049  002DBA  EC1A  F017         	call	_lcd_send_byte
  9050                           
  9051                           ;Main.c: 283: break;
  9052  002DBE  0012               	return	
  9053  002DC0  C022  F01D         	movff	lcd_putc@c,lcd_send_byte@n
  9054  002DC4  0E01               	movlw	1
  9055  002DC6  EC1A  F017         	call	_lcd_send_byte
  9056                           
  9057                           ;Main.c: 286: }
  9058                           
  9059                           ;Main.c: 285: break;
  9060  002DCA  0012               	return	
  9061  002DCC                     l248:
  9062  002DCC  5022               	movf	lcd_putc@c,w,c
  9063                           
  9064                           ; Switch size 1, requested type "space"
  9065                           ; Number of cases is 3, Range of values is 8 to 12
  9066                           ; switch strategies available:
  9067                           ; Name         Instructions Cycles
  9068                           ; simple_byte           10     6 (average)
  9069                           ;	Chosen strategy is simple_byte
  9070  002DCE  0A08               	xorlw	8	; case 8
  9071  002DD0  B4D8               	btfsc	status,2,c
  9072  002DD2  D7F0               	goto	l252
  9073  002DD4  0A02               	xorlw	2	; case 10
  9074  002DD6  B4D8               	btfsc	status,2,c
  9075  002DD8  D7E7               	goto	l251
  9076  002DDA  0A06               	xorlw	6	; case 12
  9077  002DDC  B4D8               	btfsc	status,2,c
  9078  002DDE  D7D8               	goto	l249
  9079  002DE0  D7EF               	goto	l253
  9080  002DE2                     __end_of_lcd_putc:
  9081                           	opt stack 0
  9082                           tblptru	equ	0xFF8
  9083                           tblptrh	equ	0xFF7
  9084                           tblptrl	equ	0xFF6
  9085                           tablat	equ	0xFF5
  9086                           prodh	equ	0xFF4
  9087                           prodl	equ	0xFF3
  9088                           postinc0	equ	0xFEE
  9089                           wreg	equ	0xFE8
  9090                           indf1	equ	0xFE7
  9091                           postdec1	equ	0xFE5
  9092                           fsr1h	equ	0xFE2
  9093                           fsr1l	equ	0xFE1
  9094                           indf2	equ	0xFDF
  9095                           postinc2	equ	0xFDE
  9096                           postdec2	equ	0xFDD
  9097                           fsr2h	equ	0xFDA
  9098                           fsr2l	equ	0xFD9
  9099                           status	equ	0xFD8
  9100                           
  9101 ;; *************** function _lcd_gotoxy *****************
  9102 ;; Defined at:
  9103 ;;		line 258 in file "Main.c"
  9104 ;; Parameters:    Size  Location     Type
  9105 ;;  x               1    wreg     unsigned char 
  9106 ;;  y               1   30[COMRAM] unsigned char 
  9107 ;; Auto vars:     Size  Location     Type
  9108 ;;  x               1   31[COMRAM] unsigned char 
  9109 ;;  address         1   32[COMRAM] unsigned char 
  9110 ;; Return value:  Size  Location     Type
  9111 ;;                  1    wreg      void 
  9112 ;; Registers used:
  9113 ;;		wreg, status,2, status,0, cstack
  9114 ;; Tracked objects:
  9115 ;;		On entry : 0/0
  9116 ;;		On exit  : 0/0
  9117 ;;		Unchanged: 0/0
  9118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9119 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9120 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9121 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9122 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9123 ;;Total ram usage:        3 bytes
  9124 ;; Hardware stack levels used:    1
  9125 ;; Hardware stack levels required when called:    6
  9126 ;; This function calls:
  9127 ;;		_lcd_send_byte
  9128 ;; This function is called by:
  9129 ;;		_lcd_putc
  9130 ;;		_main
  9131 ;; This function uses a non-reentrant model
  9132 ;;
  9133                           
  9134                           	psect	text27
  9135  002EC2                     __ptext27:
  9136                           	opt stack 0
  9137  002EC2                     _lcd_gotoxy:
  9138                           	opt stack 22
  9139                           
  9140                           ;incstack = 0
  9141                           ;lcd_gotoxy@x stored from wreg
  9142  002EC2  6E20               	movwf	lcd_gotoxy@x,c
  9143                           
  9144                           ;Main.c: 259: unsigned char address;
  9145                           ;Main.c: 261: switch (y) {
  9146  002EC4  D009               	goto	l239
  9147  002EC6  0E80               	movlw	128
  9148  002EC8  D005               	goto	L14
  9149  002ECA  0EC0               	movlw	192
  9150  002ECC  D003               	goto	L14
  9151  002ECE  0E90               	movlw	144
  9152  002ED0  D001               	goto	L14
  9153  002ED2  0ED0               	movlw	208
  9154  002ED4                     L14:
  9155  002ED4  6E21               	movwf	lcd_gotoxy@address,c
  9156                           
  9157                           ;Main.c: 270: }
  9158                           
  9159                           ;Main.c: 269: break;
  9160  002ED6  D00D               	goto	l241
  9161  002ED8                     l239:
  9162  002ED8  501F               	movf	lcd_gotoxy@y,w,c
  9163                           
  9164                           ; Switch size 1, requested type "space"
  9165                           ; Number of cases is 4, Range of values is 1 to 4
  9166                           ; switch strategies available:
  9167                           ; Name         Instructions Cycles
  9168                           ; simple_byte           13     7 (average)
  9169                           ;	Chosen strategy is simple_byte
  9170  002EDA  0A01               	xorlw	1	; case 1
  9171  002EDC  B4D8               	btfsc	status,2,c
  9172  002EDE  D7F3               	goto	l240
  9173  002EE0  0A03               	xorlw	3	; case 2
  9174  002EE2  B4D8               	btfsc	status,2,c
  9175  002EE4  D7F2               	goto	l242
  9176  002EE6  0A01               	xorlw	1	; case 3
  9177  002EE8  B4D8               	btfsc	status,2,c
  9178  002EEA  D7F1               	goto	l243
  9179  002EEC  0A07               	xorlw	7	; case 4
  9180  002EEE  B4D8               	btfsc	status,2,c
  9181  002EF0  D7F0               	goto	l244
  9182  002EF2                     l241:
  9183                           
  9184                           ;Main.c: 271: address += x - 1;
  9185  002EF2  0420               	decf	lcd_gotoxy@x,w,c
  9186  002EF4  2621               	addwf	lcd_gotoxy@address,f,c
  9187                           
  9188                           ;Main.c: 272: lcd_send_byte(0, (unsigned char) (0x80 | address));
  9189  002EF6  5021               	movf	lcd_gotoxy@address,w,c
  9190  002EF8  0980               	iorlw	128
  9191  002EFA  6E1D               	movwf	lcd_send_byte@n,c
  9192  002EFC  0E00               	movlw	0
  9193  002EFE  EC1A  F017         	call	_lcd_send_byte
  9194  002F02  0012               	return		;funcret
  9195  002F04                     __end_of_lcd_gotoxy:
  9196                           	opt stack 0
  9197                           tblptru	equ	0xFF8
  9198                           tblptrh	equ	0xFF7
  9199                           tblptrl	equ	0xFF6
  9200                           tablat	equ	0xFF5
  9201                           prodh	equ	0xFF4
  9202                           prodl	equ	0xFF3
  9203                           postinc0	equ	0xFEE
  9204                           wreg	equ	0xFE8
  9205                           indf1	equ	0xFE7
  9206                           postdec1	equ	0xFE5
  9207                           fsr1h	equ	0xFE2
  9208                           fsr1l	equ	0xFE1
  9209                           indf2	equ	0xFDF
  9210                           postinc2	equ	0xFDE
  9211                           postdec2	equ	0xFDD
  9212                           fsr2h	equ	0xFDA
  9213                           fsr2l	equ	0xFD9
  9214                           status	equ	0xFD8
  9215                           
  9216 ;; *************** function _lcd_init *****************
  9217 ;; Defined at:
  9218 ;;		line 243 in file "Main.c"
  9219 ;; Parameters:    Size  Location     Type
  9220 ;;		None
  9221 ;; Auto vars:     Size  Location     Type
  9222 ;;  i               1   30[COMRAM] unsigned char 
  9223 ;; Return value:  Size  Location     Type
  9224 ;;                  1    wreg      void 
  9225 ;; Registers used:
  9226 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9227 ;; Tracked objects:
  9228 ;;		On entry : 0/0
  9229 ;;		On exit  : 0/0
  9230 ;;		Unchanged: 0/0
  9231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9233 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9234 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9235 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9236 ;;Total ram usage:        1 bytes
  9237 ;; Hardware stack levels used:    1
  9238 ;; Hardware stack levels required when called:    6
  9239 ;; This function calls:
  9240 ;;		_delay_ms
  9241 ;;		_lcd_send_byte
  9242 ;;		_lcd_send_nibble
  9243 ;; This function is called by:
  9244 ;;		_main
  9245 ;; This function uses a non-reentrant model
  9246 ;;
  9247                           
  9248                           	psect	text28
  9249  002D2A                     __ptext28:
  9250                           	opt stack 0
  9251  002D2A                     _lcd_init:
  9252                           	opt stack 24
  9253                           
  9254                           ;Main.c: 244: unsigned char i;
  9255                           ;Main.c: 245: PORTEbits.RE2 = 0;
  9256                           
  9257                           ;incstack = 0
  9258  002D2A  9484               	bcf	3972,2,c	;volatile
  9259                           
  9260                           ;Main.c: 246: PORTEbits.RE1 = 0;
  9261  002D2C  9284               	bcf	3972,1,c	;volatile
  9262                           
  9263                           ;Main.c: 248: delay_ms(25);
  9264  002D2E  0E00               	movlw	0
  9265  002D30  6E16               	movwf	delay_ms@n+1,c
  9266  002D32  0E19               	movlw	25
  9267  002D34  6E15               	movwf	delay_ms@n,c
  9268  002D36  EC29  F018         	call	_delay_ms	;wreg free
  9269                           
  9270                           ;Main.c: 249: for (i = 1; i <= 3; ++i) {
  9271  002D3A  0E01               	movlw	1
  9272  002D3C  6E1F               	movwf	lcd_init@i,c
  9273  002D3E                     l4328:
  9274  002D3E  0E03               	movlw	3
  9275  002D40  641F               	cpfsgt	lcd_init@i,c
  9276  002D42  D001               	goto	l232
  9277  002D44  D00B               	goto	u5040
  9278  002D46                     l232:
  9279                           
  9280                           ;Main.c: 250: lcd_send_nibble(3);
  9281  002D46  0E03               	movlw	3
  9282  002D48  EC60  F018         	call	_lcd_send_nibble
  9283                           
  9284                           ;Main.c: 251: delay_ms(6);
  9285  002D4C  0E00               	movlw	0
  9286  002D4E  6E16               	movwf	delay_ms@n+1,c
  9287  002D50  0E06               	movlw	6
  9288  002D52  6E15               	movwf	delay_ms@n,c
  9289  002D54  EC29  F018         	call	_delay_ms	;wreg free
  9290  002D58  2A1F               	incf	lcd_init@i,f,c
  9291  002D5A  D7F1               	goto	l4328
  9292  002D5C                     u5040:
  9293                           
  9294                           ;Main.c: 252: }
  9295                           ;Main.c: 254: lcd_send_nibble(2);
  9296  002D5C  0E02               	movlw	2
  9297  002D5E  EC60  F018         	call	_lcd_send_nibble
  9298                           
  9299                           ;Main.c: 255: for (i = 0; i <= 3; ++i) lcd_send_byte(0, LCD_INIT_STRING[i]);
  9300  002D62  0E00               	movlw	0
  9301  002D64  6E1F               	movwf	lcd_init@i,c
  9302  002D66                     l4342:
  9303  002D66  0E03               	movlw	3
  9304  002D68  641F               	cpfsgt	lcd_init@i,c
  9305  002D6A  D001               	goto	l234
  9306  002D6C  0012               	return	
  9307  002D6E                     l234:
  9308  002D6E  501F               	movf	lcd_init@i,w,c
  9309  002D70  0D01               	mullw	1
  9310  002D72  0E65               	movlw	low _LCD_INIT_STRING
  9311  002D74  24F3               	addwf	prodl,w,c
  9312  002D76  6ED9               	movwf	fsr2l,c
  9313  002D78  0E00               	movlw	high _LCD_INIT_STRING
  9314  002D7A  20F4               	addwfc	prodh,w,c
  9315  002D7C  6EDA               	movwf	fsr2h,c
  9316  002D7E  50DF               	movf	indf2,w,c
  9317  002D80  6E1D               	movwf	lcd_send_byte@n,c
  9318  002D82  0E00               	movlw	0
  9319  002D84  EC1A  F017         	call	_lcd_send_byte
  9320  002D88  2A1F               	incf	lcd_init@i,f,c
  9321  002D8A  D7ED               	goto	l4342
  9322  002D8C                     __end_of_lcd_init:
  9323                           	opt stack 0
  9324                           tblptru	equ	0xFF8
  9325                           tblptrh	equ	0xFF7
  9326                           tblptrl	equ	0xFF6
  9327                           tablat	equ	0xFF5
  9328                           prodh	equ	0xFF4
  9329                           prodl	equ	0xFF3
  9330                           postinc0	equ	0xFEE
  9331                           wreg	equ	0xFE8
  9332                           indf1	equ	0xFE7
  9333                           postdec1	equ	0xFE5
  9334                           fsr1h	equ	0xFE2
  9335                           fsr1l	equ	0xFE1
  9336                           indf2	equ	0xFDF
  9337                           postinc2	equ	0xFDE
  9338                           postdec2	equ	0xFDD
  9339                           fsr2h	equ	0xFDA
  9340                           fsr2l	equ	0xFD9
  9341                           status	equ	0xFD8
  9342                           
  9343 ;; *************** function _lcd_send_byte *****************
  9344 ;; Defined at:
  9345 ;;		line 232 in file "Main.c"
  9346 ;; Parameters:    Size  Location     Type
  9347 ;;  cm_data         1    wreg     unsigned char 
  9348 ;;  n               1   28[COMRAM] unsigned char 
  9349 ;; Auto vars:     Size  Location     Type
  9350 ;;  cm_data         1   29[COMRAM] unsigned char 
  9351 ;; Return value:  Size  Location     Type
  9352 ;;                  1    wreg      void 
  9353 ;; Registers used:
  9354 ;;		wreg, status,2, status,0, cstack
  9355 ;; Tracked objects:
  9356 ;;		On entry : 0/0
  9357 ;;		On exit  : 0/0
  9358 ;;		Unchanged: 0/0
  9359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9360 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9361 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9363 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9364 ;;Total ram usage:        2 bytes
  9365 ;; Hardware stack levels used:    1
  9366 ;; Hardware stack levels required when called:    5
  9367 ;; This function calls:
  9368 ;;		_delay_cycles
  9369 ;;		_delay_ms
  9370 ;;		_lcd_send_nibble
  9371 ;; This function is called by:
  9372 ;;		_lcd_init
  9373 ;;		_lcd_gotoxy
  9374 ;;		_lcd_putc
  9375 ;; This function uses a non-reentrant model
  9376 ;;
  9377                           
  9378                           	psect	text29
  9379  002E34                     __ptext29:
  9380                           	opt stack 0
  9381  002E34                     _lcd_send_byte:
  9382                           	opt stack 23
  9383                           
  9384                           ;incstack = 0
  9385                           ;lcd_send_byte@cm_data stored from wreg
  9386  002E34  6E1E               	movwf	lcd_send_byte@cm_data,c
  9387                           
  9388                           ;Main.c: 233: PORTEbits.RE2 = cm_data;
  9389  002E36  B01E               	btfsc	lcd_send_byte@cm_data,0,c
  9390  002E38  D002               	bra	u3045
  9391  002E3A  9484               	bcf	3972,2,c	;volatile
  9392  002E3C  D001               	bra	u3046
  9393  002E3E                     u3045:
  9394  002E3E  8484               	bsf	3972,2,c	;volatile
  9395  002E40                     u3046:
  9396                           
  9397                           ;Main.c: 234: delay_cycles(1);
  9398  002E40  0E01               	movlw	1
  9399  002E42  ECEA  F017         	call	_delay_cycles
  9400                           
  9401                           ;Main.c: 235: delay_cycles(1);
  9402  002E46  0E01               	movlw	1
  9403  002E48  ECEA  F017         	call	_delay_cycles
  9404                           
  9405                           ;Main.c: 236: PORTEbits.RE1 = 0;
  9406  002E4C  9284               	bcf	3972,1,c	;volatile
  9407                           
  9408                           ;Main.c: 237: lcd_send_nibble(n >> 4);
  9409  002E4E  381D               	swapf	lcd_send_byte@n,w,c
  9410  002E50  0B0F               	andlw	15
  9411  002E52  EC60  F018         	call	_lcd_send_nibble
  9412                           
  9413                           ;Main.c: 238: lcd_send_nibble(n & 0x0f);
  9414  002E56  501D               	movf	lcd_send_byte@n,w,c
  9415  002E58  0B0F               	andlw	15
  9416  002E5A  EC60  F018         	call	_lcd_send_nibble
  9417                           
  9418                           ;Main.c: 239: if (cm_data) _delaywdt((unsigned long)((200)*(4000000UL/4000000.0)));
  9419  002E5E  501E               	movf	lcd_send_byte@cm_data,w,c
  9420  002E60  B4D8               	btfsc	status,2,c
  9421  002E62  D005               	goto	l227
  9422  002E64  0E32               	movlw	50
  9423  002E66                     u6907:
  9424  002E66  0004               	clrwdt	
  9425  002E68  2EE8               	decfsz	wreg,f,c
  9426  002E6A  D7FD               	bra	u6907
  9427  002E6C  0012               	return	
  9428  002E6E                     l227:
  9429                           
  9430                           ;Main.c: 240: else delay_ms(2);
  9431  002E6E  0E00               	movlw	0
  9432  002E70  6E16               	movwf	delay_ms@n+1,c
  9433  002E72  0E02               	movlw	2
  9434  002E74  6E15               	movwf	delay_ms@n,c
  9435  002E76  EC29  F018         	call	_delay_ms	;wreg free
  9436  002E7A  0012               	return	
  9437  002E7C                     __end_of_lcd_send_byte:
  9438                           	opt stack 0
  9439                           tblptru	equ	0xFF8
  9440                           tblptrh	equ	0xFF7
  9441                           tblptrl	equ	0xFF6
  9442                           tablat	equ	0xFF5
  9443                           prodh	equ	0xFF4
  9444                           prodl	equ	0xFF3
  9445                           postinc0	equ	0xFEE
  9446                           wreg	equ	0xFE8
  9447                           indf1	equ	0xFE7
  9448                           postdec1	equ	0xFE5
  9449                           fsr1h	equ	0xFE2
  9450                           fsr1l	equ	0xFE1
  9451                           indf2	equ	0xFDF
  9452                           postinc2	equ	0xFDE
  9453                           postdec2	equ	0xFDD
  9454                           fsr2h	equ	0xFDA
  9455                           fsr2l	equ	0xFD9
  9456                           status	equ	0xFD8
  9457                           
  9458 ;; *************** function _lcd_send_nibble *****************
  9459 ;; Defined at:
  9460 ;;		line 224 in file "Main.c"
  9461 ;; Parameters:    Size  Location     Type
  9462 ;;  n               1    wreg     unsigned char 
  9463 ;; Auto vars:     Size  Location     Type
  9464 ;;  n               1   27[COMRAM] unsigned char 
  9465 ;; Return value:  Size  Location     Type
  9466 ;;                  1    wreg      void 
  9467 ;; Registers used:
  9468 ;;		wreg, status,2, status,0, cstack
  9469 ;; Tracked objects:
  9470 ;;		On entry : 0/0
  9471 ;;		On exit  : 0/0
  9472 ;;		Unchanged: 0/0
  9473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9474 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9475 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9476 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9477 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9478 ;;Total ram usage:        2 bytes
  9479 ;; Hardware stack levels used:    1
  9480 ;; Hardware stack levels required when called:    4
  9481 ;; This function calls:
  9482 ;;		_delay_cycles
  9483 ;; This function is called by:
  9484 ;;		_lcd_send_byte
  9485 ;;		_lcd_init
  9486 ;; This function uses a non-reentrant model
  9487 ;;
  9488                           
  9489                           	psect	text30
  9490  0030C0                     __ptext30:
  9491                           	opt stack 0
  9492  0030C0                     _lcd_send_nibble:
  9493                           	opt stack 23
  9494                           
  9495                           ;incstack = 0
  9496                           ;lcd_send_nibble@n stored from wreg
  9497  0030C0  6E1C               	movwf	lcd_send_nibble@n,c
  9498                           
  9499                           ;Main.c: 225: lcd.data = n;
  9500  0030C2  C01C  F01B         	movff	lcd_send_nibble@n,??_lcd_send_nibble
  9501  0030C6  3A1B               	swapf	??_lcd_send_nibble,f,c
  9502  0030C8  5083               	movf	3971,w,c
  9503  0030CA  181B               	xorwf	??_lcd_send_nibble,w,c
  9504  0030CC  0B0F               	andlw	-241
  9505  0030CE  181B               	xorwf	??_lcd_send_nibble,w,c
  9506  0030D0  6E83               	movwf	3971,c
  9507                           
  9508                           ;Main.c: 226: delay_cycles(1);
  9509  0030D2  0E01               	movlw	1
  9510  0030D4  ECEA  F017         	call	_delay_cycles
  9511                           
  9512                           ;Main.c: 227: PORTEbits.RE1 = 1;
  9513  0030D8  8284               	bsf	3972,1,c	;volatile
  9514                           
  9515                           ;Main.c: 228: _delaywdt((unsigned long)((2)*(4000000UL/4000000.0)));
  9516  0030DA  0004               	clrwdt	
  9517  0030DC  F000               	nop		;2 cycle nop
  9518                           
  9519                           ;Main.c: 229: PORTEbits.RE1 = 0;
  9520  0030DE  9284               	bcf	3972,1,c	;volatile
  9521  0030E0  0012               	return		;funcret
  9522  0030E2                     __end_of_lcd_send_nibble:
  9523                           	opt stack 0
  9524                           tblptru	equ	0xFF8
  9525                           tblptrh	equ	0xFF7
  9526                           tblptrl	equ	0xFF6
  9527                           tablat	equ	0xFF5
  9528                           prodh	equ	0xFF4
  9529                           prodl	equ	0xFF3
  9530                           postinc0	equ	0xFEE
  9531                           wreg	equ	0xFE8
  9532                           indf1	equ	0xFE7
  9533                           postdec1	equ	0xFE5
  9534                           fsr1h	equ	0xFE2
  9535                           fsr1l	equ	0xFE1
  9536                           indf2	equ	0xFDF
  9537                           postinc2	equ	0xFDE
  9538                           postdec2	equ	0xFDD
  9539                           fsr2h	equ	0xFDA
  9540                           fsr2l	equ	0xFD9
  9541                           status	equ	0xFD8
  9542                           
  9543 ;; *************** function _delay_cycles *****************
  9544 ;; Defined at:
  9545 ;;		line 219 in file "Main.c"
  9546 ;; Parameters:    Size  Location     Type
  9547 ;;  n               1    wreg     unsigned char 
  9548 ;; Auto vars:     Size  Location     Type
  9549 ;;  n               1   23[COMRAM] unsigned char 
  9550 ;;  x               2   24[COMRAM] int 
  9551 ;; Return value:  Size  Location     Type
  9552 ;;                  1    wreg      void 
  9553 ;; Registers used:
  9554 ;;		wreg, status,2, status,0
  9555 ;; Tracked objects:
  9556 ;;		On entry : 0/0
  9557 ;;		On exit  : 0/0
  9558 ;;		Unchanged: 0/0
  9559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9560 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9561 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9562 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9563 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9564 ;;Total ram usage:        6 bytes
  9565 ;; Hardware stack levels used:    1
  9566 ;; Hardware stack levels required when called:    3
  9567 ;; This function calls:
  9568 ;;		Nothing
  9569 ;; This function is called by:
  9570 ;;		_lcd_send_nibble
  9571 ;;		_lcd_send_byte
  9572 ;; This function uses a non-reentrant model
  9573 ;;
  9574                           
  9575                           	psect	text31
  9576  002FD4                     __ptext31:
  9577                           	opt stack 0
  9578  002FD4                     _delay_cycles:
  9579                           	opt stack 23
  9580                           
  9581                           ;incstack = 0
  9582                           ;delay_cycles@n stored from wreg
  9583  002FD4  6E18               	movwf	delay_cycles@n,c
  9584                           
  9585                           ;Main.c: 220: int x;
  9586                           ;Main.c: 221: for (x = 0; x <= n; x++) asm(" clrwdt");
  9587  002FD6  0E00               	movlw	0
  9588  002FD8  6E1A               	movwf	delay_cycles@x+1,c
  9589  002FDA  0E00               	movlw	0
  9590  002FDC  6E19               	movwf	delay_cycles@x,c
  9591  002FDE  D003               	goto	l218
  9592  002FE0                     l219:
  9593  002FE0  0004               	clrwdt		;# 
  9594  002FE2  4A19               	infsnz	delay_cycles@x,f,c
  9595  002FE4  2A1A               	incf	delay_cycles@x+1,f,c
  9596  002FE6                     l218:
  9597  002FE6  5018               	movf	delay_cycles@n,w,c
  9598  002FE8  6E15               	movwf	??_delay_cycles& (0+255),c
  9599  002FEA  6A16               	clrf	(??_delay_cycles+1)& (0+255),c
  9600  002FEC  5019               	movf	delay_cycles@x,w,c
  9601  002FEE  5C15               	subwf	??_delay_cycles,w,c
  9602  002FF0  5016               	movf	??_delay_cycles+1,w,c
  9603  002FF2  0A80               	xorlw	128
  9604  002FF4  6E17               	movwf	(??_delay_cycles+2)& (0+255),c
  9605  002FF6  501A               	movf	delay_cycles@x+1,w,c
  9606  002FF8  0A80               	xorlw	128
  9607  002FFA  5817               	subwfb	(??_delay_cycles+2)& (0+255),w,c
  9608  002FFC  A0D8               	btfss	status,0,c
  9609  002FFE  0012               	return	
  9610  003000  D7EF               	goto	l219
  9611  003002                     __end_of_delay_cycles:
  9612                           	opt stack 0
  9613                           tblptru	equ	0xFF8
  9614                           tblptrh	equ	0xFF7
  9615                           tblptrl	equ	0xFF6
  9616                           tablat	equ	0xFF5
  9617                           prodh	equ	0xFF4
  9618                           prodl	equ	0xFF3
  9619                           postinc0	equ	0xFEE
  9620                           wreg	equ	0xFE8
  9621                           indf1	equ	0xFE7
  9622                           postdec1	equ	0xFE5
  9623                           fsr1h	equ	0xFE2
  9624                           fsr1l	equ	0xFE1
  9625                           indf2	equ	0xFDF
  9626                           postinc2	equ	0xFDE
  9627                           postdec2	equ	0xFDD
  9628                           fsr2h	equ	0xFDA
  9629                           fsr2l	equ	0xFD9
  9630                           status	equ	0xFD8
  9631                           
  9632 ;; *************** function _delay_ms *****************
  9633 ;; Defined at:
  9634 ;;		line 164 in file "Main.c"
  9635 ;; Parameters:    Size  Location     Type
  9636 ;;  n               2   20[COMRAM] unsigned int 
  9637 ;; Auto vars:     Size  Location     Type
  9638 ;;  i               2   22[COMRAM] int 
  9639 ;; Return value:  Size  Location     Type
  9640 ;;                  1    wreg      void 
  9641 ;; Registers used:
  9642 ;;		wreg, status,2, status,0
  9643 ;; Tracked objects:
  9644 ;;		On entry : 0/0
  9645 ;;		On exit  : 0/0
  9646 ;;		Unchanged: 0/0
  9647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9648 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9649 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9650 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9651 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9652 ;;Total ram usage:        4 bytes
  9653 ;; Hardware stack levels used:    1
  9654 ;; Hardware stack levels required when called:    3
  9655 ;; This function calls:
  9656 ;;		Nothing
  9657 ;; This function is called by:
  9658 ;;		_lcd_send_byte
  9659 ;;		_lcd_init
  9660 ;;		_lcd_putc
  9661 ;;		_main
  9662 ;; This function uses a non-reentrant model
  9663 ;;
  9664                           
  9665                           	psect	text32
  9666  003052                     __ptext32:
  9667                           	opt stack 0
  9668  003052                     _delay_ms:
  9669                           	opt stack 24
  9670                           
  9671                           ;Main.c: 165: int i;
  9672                           ;Main.c: 166: for (i=0; i < n; i++) _delaywdt((unsigned long)((1)*(4000000UL/4000.0))) ;
  9673                           
  9674                           ;incstack = 0
  9675  003052  0E00               	movlw	0
  9676  003054  6E18               	movwf	delay_ms@i+1,c
  9677  003056  0E00               	movlw	0
  9678  003058  6E17               	movwf	delay_ms@i,c
  9679  00305A  D007               	goto	l177
  9680  00305C  0EC8               	movlw	200
  9681  00305E                     u6917:
  9682  00305E  0004               	clrwdt	
  9683  003060  0004               	clrwdt	
  9684  003062  2EE8               	decfsz	wreg,f,c
  9685  003064  D7FC               	bra	u6917
  9686  003066  4A17               	infsnz	delay_ms@i,f,c
  9687  003068  2A18               	incf	delay_ms@i+1,f,c
  9688  00306A                     l177:
  9689  00306A  5015               	movf	delay_ms@n,w,c
  9690  00306C  5C17               	subwf	delay_ms@i,w,c
  9691  00306E  5016               	movf	delay_ms@n+1,w,c
  9692  003070  5818               	subwfb	delay_ms@i+1,w,c
  9693  003072  B0D8               	btfsc	status,0,c
  9694  003074  0012               	return	
  9695  003076  D7F2               	goto	l178
  9696  003078                     __end_of_delay_ms:
  9697                           	opt stack 0
  9698                           tblptru	equ	0xFF8
  9699                           tblptrh	equ	0xFF7
  9700                           tblptrl	equ	0xFF6
  9701                           tablat	equ	0xFF5
  9702                           prodh	equ	0xFF4
  9703                           prodl	equ	0xFF3
  9704                           postinc0	equ	0xFEE
  9705                           wreg	equ	0xFE8
  9706                           indf1	equ	0xFE7
  9707                           postdec1	equ	0xFE5
  9708                           fsr1h	equ	0xFE2
  9709                           fsr1l	equ	0xFE1
  9710                           indf2	equ	0xFDF
  9711                           postinc2	equ	0xFDE
  9712                           postdec2	equ	0xFDD
  9713                           fsr2h	equ	0xFDA
  9714                           fsr2l	equ	0xFD9
  9715                           status	equ	0xFD8
  9716                           
  9717 ;; *************** function _is_byte_available *****************
  9718 ;; Defined at:
  9719 ;;		line 176 in file "Main.c"
  9720 ;; Parameters:    Size  Location     Type
  9721 ;;		None
  9722 ;; Auto vars:     Size  Location     Type
  9723 ;;		None
  9724 ;; Return value:  Size  Location     Type
  9725 ;;                  1    wreg      unsigned char 
  9726 ;; Registers used:
  9727 ;;		wreg
  9728 ;; Tracked objects:
  9729 ;;		On entry : 0/0
  9730 ;;		On exit  : 0/0
  9731 ;;		Unchanged: 0/0
  9732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9734 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9736 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9737 ;;Total ram usage:        0 bytes
  9738 ;; Hardware stack levels used:    1
  9739 ;; Hardware stack levels required when called:    3
  9740 ;; This function calls:
  9741 ;;		Nothing
  9742 ;; This function is called by:
  9743 ;;		_main
  9744 ;; This function uses a non-reentrant model
  9745 ;;
  9746                           
  9747                           	psect	text33
  9748  003100                     __ptext33:
  9749                           	opt stack 0
  9750  003100                     _is_byte_available:
  9751                           	opt stack 27
  9752                           
  9753                           ;Main.c: 177: if (RCSTAbits.FERR || RCSTAbits.OERR) {
  9754                           
  9755                           ;incstack = 0
  9756  003100  B4AB               	btfsc	4011,2,c	;volatile
  9757  003102  D002               	goto	u5010
  9758  003104  A2AB               	btfss	4011,1,c	;volatile
  9759  003106  D002               	goto	l189
  9760  003108                     u5010:
  9761                           
  9762                           ;Main.c: 178: RCSTAbits.CREN = 0;
  9763  003108  98AB               	bcf	4011,4,c	;volatile
  9764                           
  9765                           ;Main.c: 179: RCSTAbits.CREN = 1;
  9766  00310A  88AB               	bsf	4011,4,c	;volatile
  9767  00310C                     l189:
  9768                           
  9769                           ;Main.c: 180: }
  9770                           ;Main.c: 181: if (PIR1bits.RCIF) return 1;
  9771  00310C  AA9E               	btfss	3998,5,c	;volatile
  9772  00310E  D002               	goto	l192
  9773  003110  0E01               	movlw	1
  9774  003112  0012               	return	
  9775  003114                     l192:
  9776                           
  9777                           ;Main.c: 182: else return 0;
  9778  003114  0E00               	movlw	0
  9779  003116  0012               	return	
  9780  003118                     __end_of_is_byte_available:
  9781                           	opt stack 0
  9782                           tblptru	equ	0xFF8
  9783                           tblptrh	equ	0xFF7
  9784                           tblptrl	equ	0xFF6
  9785                           tablat	equ	0xFF5
  9786                           prodh	equ	0xFF4
  9787                           prodl	equ	0xFF3
  9788                           postinc0	equ	0xFEE
  9789                           wreg	equ	0xFE8
  9790                           indf1	equ	0xFE7
  9791                           postdec1	equ	0xFE5
  9792                           fsr1h	equ	0xFE2
  9793                           fsr1l	equ	0xFE1
  9794                           indf2	equ	0xFDF
  9795                           postinc2	equ	0xFDE
  9796                           postdec2	equ	0xFDD
  9797                           fsr2h	equ	0xFDA
  9798                           fsr2l	equ	0xFD9
  9799                           status	equ	0xFD8
  9800                           
  9801 ;; *************** function _isValidChar *****************
  9802 ;; Defined at:
  9803 ;;		line 154 in file "Main.c"
  9804 ;; Parameters:    Size  Location     Type
  9805 ;;  command         2   20[COMRAM] PTR unsigned char 
  9806 ;;		 -> main@command(9), 
  9807 ;;  c               1   22[COMRAM] unsigned char 
  9808 ;;  i               2   23[COMRAM] int 
  9809 ;; Auto vars:     Size  Location     Type
  9810 ;;		None
  9811 ;; Return value:  Size  Location     Type
  9812 ;;		None               void
  9813 ;; Registers used:
  9814 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9815 ;; Tracked objects:
  9816 ;;		On entry : 0/0
  9817 ;;		On exit  : 0/0
  9818 ;;		Unchanged: 0/0
  9819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9820 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9821 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9822 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9823 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9824 ;;Total ram usage:       14 bytes
  9825 ;; Hardware stack levels used:    1
  9826 ;; Hardware stack levels required when called:    3
  9827 ;; This function calls:
  9828 ;;		Nothing
  9829 ;; This function is called by:
  9830 ;;		_main
  9831 ;; This function uses a non-reentrant model
  9832 ;;
  9833                           
  9834                           	psect	text34
  9835  0023EE                     __ptext34:
  9836                           	opt stack 0
  9837  0023EE                     _isValidChar:
  9838                           	opt stack 27
  9839                           
  9840                           ;Main.c: 155: if (i == 0) return (c == 'w' || c == 'W');
  9841                           
  9842                           ;incstack = 0
  9843  0023EE  5018               	movf	isValidChar@i,w,c
  9844  0023F0  1019               	iorwf	isValidChar@i+1,w,c
  9845  0023F2  A4D8               	btfss	status,2,c
  9846  0023F4  D010               	goto	l140
  9847  0023F6  0E01               	movlw	1
  9848  0023F8  6E1D               	movwf	_isValidChar$895,c
  9849  0023FA  0E77               	movlw	119
  9850  0023FC  1817               	xorwf	isValidChar@c,w,c
  9851  0023FE  B4D8               	btfsc	status,2,c
  9852  002400  D006               	goto	l142
  9853  002402  0E57               	movlw	87
  9854  002404  1817               	xorwf	isValidChar@c,w,c
  9855  002406  B4D8               	btfsc	status,2,c
  9856  002408  D002               	goto	l142
  9857  00240A  0E00               	movlw	0
  9858  00240C  6E1D               	movwf	_isValidChar$895,c
  9859  00240E                     l142:
  9860  00240E  C01D  F01A         	movff	_isValidChar$895,??_isValidChar
  9861  002412  301A               	rrcf	??_isValidChar,w,c
  9862  002414  0012               	return	
  9863  002416                     l140:
  9864                           
  9865                           ;Main.c: 156: else if (i == 1) return (c >= '0' && c <= '2');
  9866  002416  0418               	decf	isValidChar@i,w,c
  9867  002418  1019               	iorwf	isValidChar@i+1,w,c
  9868  00241A  A4D8               	btfss	status,2,c
  9869  00241C  D00E               	goto	l145
  9870  00241E  0E00               	movlw	0
  9871  002420  6E1E               	movwf	_isValidChar$896,c
  9872  002422  0E2F               	movlw	47
  9873  002424  6417               	cpfsgt	isValidChar@c,c
  9874  002426  D005               	goto	l147
  9875  002428  0E33               	movlw	51
  9876  00242A  6017               	cpfslt	isValidChar@c,c
  9877  00242C  D002               	goto	l147
  9878  00242E  0E01               	movlw	1
  9879  002430  6E1E               	movwf	_isValidChar$896,c
  9880  002432                     l147:
  9881  002432  C01E  F01A         	movff	_isValidChar$896,??_isValidChar
  9882  002436  301A               	rrcf	??_isValidChar,w,c
  9883  002438  0012               	return	
  9884  00243A                     l145:
  9885                           
  9886                           ;Main.c: 157: else if (i == 2) return (command[1] == '2' ? (c >= '0' && c <= '4') : (c >
      +                          = '0' && c <= '9'));
  9887  00243A  0E02               	movlw	2
  9888  00243C  1818               	xorwf	isValidChar@i,w,c
  9889  00243E  1019               	iorwf	isValidChar@i+1,w,c
  9890  002440  A4D8               	btfss	status,2,c
  9891  002442  D026               	goto	l149
  9892  002444  EE20 F001          	lfsr	2,1
  9893  002448  5015               	movf	isValidChar@command,w,c
  9894  00244A  26D9               	addwf	fsr2l,f,c
  9895  00244C  5016               	movf	isValidChar@command+1,w,c
  9896  00244E  22DA               	addwfc	fsr2h,f,c
  9897  002450  0E32               	movlw	50
  9898  002452  18DE               	xorwf	postinc2,w,c
  9899  002454  B4D8               	btfsc	status,2,c
  9900  002456  D00D               	goto	l151
  9901  002458  0E00               	movlw	0
  9902  00245A  6E1F               	movwf	_isValidChar$898,c
  9903  00245C  0E2F               	movlw	47
  9904  00245E  6417               	cpfsgt	isValidChar@c,c
  9905  002460  D005               	goto	l155
  9906  002462  0E3A               	movlw	58
  9907  002464  6017               	cpfslt	isValidChar@c,c
  9908  002466  D002               	goto	l155
  9909  002468  0E01               	movlw	1
  9910  00246A  6E1F               	movwf	_isValidChar$898,c
  9911  00246C                     l155:
  9912  00246C  C01F  F01B         	movff	_isValidChar$898,_isValidChar$897
  9913  002470  D00C               	goto	L15
  9914  002472                     l151:
  9915  002472  0E00               	movlw	0
  9916  002474  6E20               	movwf	_isValidChar$899,c
  9917  002476  0E2F               	movlw	47
  9918  002478  6417               	cpfsgt	isValidChar@c,c
  9919  00247A  D005               	goto	l157
  9920  00247C  0E35               	movlw	53
  9921  00247E  6017               	cpfslt	isValidChar@c,c
  9922  002480  D002               	goto	l157
  9923  002482  0E01               	movlw	1
  9924  002484  6E20               	movwf	_isValidChar$899,c
  9925  002486                     l157:
  9926  002486  C020  F01B         	movff	_isValidChar$899,_isValidChar$897
  9927  00248A                     L15:
  9928  00248A  6A1C               	clrf	_isValidChar$897+1,c
  9929  00248C  301B               	rrcf	_isValidChar$897,w,c
  9930  00248E  0012               	return	
  9931  002490                     l149:
  9932                           
  9933                           ;Main.c: 158: else if (i == 5 || i == 8) return (c >= '0' && c <= '9');
  9934  002490  0E05               	movlw	5
  9935  002492  1818               	xorwf	isValidChar@i,w,c
  9936  002494  1019               	iorwf	isValidChar@i+1,w,c
  9937  002496  B4D8               	btfsc	status,2,c
  9938  002498  D005               	goto	u4890
  9939  00249A  0E08               	movlw	8
  9940  00249C  1818               	xorwf	isValidChar@i,w,c
  9941  00249E  1019               	iorwf	isValidChar@i+1,w,c
  9942  0024A0  A4D8               	btfss	status,2,c
  9943  0024A2  D00E               	goto	l159
  9944  0024A4                     u4890:
  9945  0024A4  0E00               	movlw	0
  9946  0024A6  6E21               	movwf	_isValidChar$900,c
  9947  0024A8  0E2F               	movlw	47
  9948  0024AA  6417               	cpfsgt	isValidChar@c,c
  9949  0024AC  D005               	goto	l163
  9950  0024AE  0E3A               	movlw	58
  9951  0024B0  6017               	cpfslt	isValidChar@c,c
  9952  0024B2  D002               	goto	l163
  9953  0024B4  0E01               	movlw	1
  9954  0024B6  6E21               	movwf	_isValidChar$900,c
  9955  0024B8                     l163:
  9956  0024B8  C021  F01A         	movff	_isValidChar$900,??_isValidChar
  9957  0024BC  301A               	rrcf	??_isValidChar,w,c
  9958  0024BE  0012               	return	
  9959  0024C0                     l159:
  9960                           
  9961                           ;Main.c: 159: else if (i == 3 || i == 6) return c == ':';
  9962  0024C0  0E03               	movlw	3
  9963  0024C2  1818               	xorwf	isValidChar@i,w,c
  9964  0024C4  1019               	iorwf	isValidChar@i+1,w,c
  9965  0024C6  B4D8               	btfsc	status,2,c
  9966  0024C8  D005               	goto	u4930
  9967  0024CA  0E06               	movlw	6
  9968  0024CC  1818               	xorwf	isValidChar@i,w,c
  9969  0024CE  1019               	iorwf	isValidChar@i+1,w,c
  9970  0024D0  A4D8               	btfss	status,2,c
  9971  0024D2  D008               	goto	l165
  9972  0024D4                     u4930:
  9973  0024D4  0E3A               	movlw	58
  9974  0024D6  1817               	xorwf	isValidChar@c,w,c
  9975  0024D8  B4D8               	btfsc	status,2,c
  9976  0024DA  D002               	goto	l3092
  9977  0024DC  90D8               	bcf	status,0,c
  9978  0024DE  0012               	return	
  9979  0024E0                     l3092:
  9980  0024E0  80D8               	bsf	status,0,c
  9981  0024E2  0012               	return	
  9982  0024E4                     l165:
  9983                           
  9984                           ;Main.c: 160: else if (i == 4 || i == 7) return (c >= '0' && c <= '5');
  9985  0024E4  0E04               	movlw	4
  9986  0024E6  1818               	xorwf	isValidChar@i,w,c
  9987  0024E8  1019               	iorwf	isValidChar@i+1,w,c
  9988  0024EA  B4D8               	btfsc	status,2,c
  9989  0024EC  D005               	goto	u4960
  9990  0024EE  0E07               	movlw	7
  9991  0024F0  1818               	xorwf	isValidChar@i,w,c
  9992  0024F2  1019               	iorwf	isValidChar@i+1,w,c
  9993  0024F4  A4D8               	btfss	status,2,c
  9994  0024F6  D00E               	goto	l169
  9995  0024F8                     u4960:
  9996  0024F8  0E00               	movlw	0
  9997  0024FA  6E22               	movwf	_isValidChar$901,c
  9998  0024FC  0E2F               	movlw	47
  9999  0024FE  6417               	cpfsgt	isValidChar@c,c
 10000  002500  D005               	goto	l173
 10001  002502  0E36               	movlw	54
 10002  002504  6017               	cpfslt	isValidChar@c,c
 10003  002506  D002               	goto	l173
 10004  002508  0E01               	movlw	1
 10005  00250A  6E22               	movwf	_isValidChar$901,c
 10006  00250C                     l173:
 10007  00250C  C022  F01A         	movff	_isValidChar$901,??_isValidChar
 10008  002510  301A               	rrcf	??_isValidChar,w,c
 10009  002512  0012               	return	
 10010  002514                     l169:
 10011                           
 10012                           ;Main.c: 161: else return 0;
 10013  002514  90D8               	bcf	status,0,c
 10014  002516  0012               	return	
 10015  002518                     __end_of_isValidChar:
 10016                           	opt stack 0
 10017                           tblptru	equ	0xFF8
 10018                           tblptrh	equ	0xFF7
 10019                           tblptrl	equ	0xFF6
 10020                           tablat	equ	0xFF5
 10021                           prodh	equ	0xFF4
 10022                           prodl	equ	0xFF3
 10023                           postinc0	equ	0xFEE
 10024                           wreg	equ	0xFE8
 10025                           indf1	equ	0xFE7
 10026                           postdec1	equ	0xFE5
 10027                           fsr1h	equ	0xFE2
 10028                           fsr1l	equ	0xFE1
 10029                           indf2	equ	0xFDF
 10030                           postinc2	equ	0xFDE
 10031                           postdec2	equ	0xFDD
 10032                           fsr2h	equ	0xFDA
 10033                           fsr2l	equ	0xFD9
 10034                           status	equ	0xFD8
 10035                           
 10036 ;; *************** function _init_adc_no_lib *****************
 10037 ;; Defined at:
 10038 ;;		line 196 in file "Main.c"
 10039 ;; Parameters:    Size  Location     Type
 10040 ;;		None
 10041 ;; Auto vars:     Size  Location     Type
 10042 ;;		None
 10043 ;; Return value:  Size  Location     Type
 10044 ;;                  1    wreg      void 
 10045 ;; Registers used:
 10046 ;;		wreg, status,2
 10047 ;; Tracked objects:
 10048 ;;		On entry : 0/0
 10049 ;;		On exit  : 0/0
 10050 ;;		Unchanged: 0/0
 10051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10053 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10055 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10056 ;;Total ram usage:        0 bytes
 10057 ;; Hardware stack levels used:    1
 10058 ;; Hardware stack levels required when called:    3
 10059 ;; This function calls:
 10060 ;;		Nothing
 10061 ;; This function is called by:
 10062 ;;		_main
 10063 ;; This function uses a non-reentrant model
 10064 ;;
 10065                           
 10066                           	psect	text35
 10067  003128                     __ptext35:
 10068                           	opt stack 0
 10069  003128                     _init_adc_no_lib:
 10070                           	opt stack 27
 10071                           
 10072                           ;Main.c: 197: ADCON0 = 0;
 10073                           
 10074                           ;incstack = 0
 10075  003128  0E00               	movlw	0
 10076  00312A  6EC2               	movwf	4034,c	;volatile
 10077                           
 10078                           ;Main.c: 198: ADCON0bits.ADON = 1;
 10079  00312C  80C2               	bsf	4034,0,c	;volatile
 10080                           
 10081                           ;Main.c: 199: ADCON2 = 0b10001001;
 10082  00312E  0E89               	movlw	137
 10083  003130  6EC0               	movwf	4032,c	;volatile
 10084  003132  0012               	return		;funcret
 10085  003134                     __end_of_init_adc_no_lib:
 10086                           	opt stack 0
 10087                           tblptru	equ	0xFF8
 10088                           tblptrh	equ	0xFF7
 10089                           tblptrl	equ	0xFF6
 10090                           tablat	equ	0xFF5
 10091                           prodh	equ	0xFF4
 10092                           prodl	equ	0xFF3
 10093                           postinc0	equ	0xFEE
 10094                           wreg	equ	0xFE8
 10095                           indf1	equ	0xFE7
 10096                           postdec1	equ	0xFE5
 10097                           fsr1h	equ	0xFE2
 10098                           fsr1l	equ	0xFE1
 10099                           indf2	equ	0xFDF
 10100                           postinc2	equ	0xFDE
 10101                           postdec2	equ	0xFDD
 10102                           fsr2h	equ	0xFDA
 10103                           fsr2l	equ	0xFD9
 10104                           status	equ	0xFD8
 10105                           
 10106 ;; *************** function _init *****************
 10107 ;; Defined at:
 10108 ;;		line 308 in file "Main.c"
 10109 ;; Parameters:    Size  Location     Type
 10110 ;;		None
 10111 ;; Auto vars:     Size  Location     Type
 10112 ;;  dummy           1   20[COMRAM] unsigned char 
 10113 ;; Return value:  Size  Location     Type
 10114 ;;                  1    wreg      void 
 10115 ;; Registers used:
 10116 ;;		wreg, status,2, cstack
 10117 ;; Tracked objects:
 10118 ;;		On entry : 0/0
 10119 ;;		On exit  : 0/0
 10120 ;;		Unchanged: 0/0
 10121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10123 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10124 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10125 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10126 ;;Total ram usage:        1 bytes
 10127 ;; Hardware stack levels used:    1
 10128 ;; Hardware stack levels required when called:    4
 10129 ;; This function calls:
 10130 ;;		_restartTimer0
 10131 ;; This function is called by:
 10132 ;;		_main
 10133 ;; This function uses a non-reentrant model
 10134 ;;
 10135                           
 10136                           	psect	text36
 10137  002922                     __ptext36:
 10138                           	opt stack 0
 10139  002922                     _init:
 10140                           	opt stack 26
 10141                           
 10142                           ;Main.c: 311: ADCON0 = 0x00;
 10143                           
 10144                           ;incstack = 0
 10145  002922  0E00               	movlw	0
 10146  002924  6EC2               	movwf	4034,c	;volatile
 10147                           
 10148                           ;Main.c: 312: ADCON1 = 0x0C;
 10149  002926  0E0C               	movlw	12
 10150  002928  6EC1               	movwf	4033,c	;volatile
 10151                           
 10152                           ;Main.c: 313: TRISA = 0xFF;
 10153  00292A  6892               	setf	3986,c	;volatile
 10154                           
 10155                           ;Main.c: 314: TRISB = 0xFF;
 10156  00292C  6893               	setf	3987,c	;volatile
 10157                           
 10158                           ;Main.c: 315: TRISC = 0x80;
 10159  00292E  0E80               	movlw	128
 10160  002930  6E94               	movwf	3988,c	;volatile
 10161                           
 10162                           ;Main.c: 316: TRISD = 0x00;
 10163  002932  0E00               	movlw	0
 10164  002934  6E95               	movwf	3989,c	;volatile
 10165                           
 10166                           ;Main.c: 317: TRISE = 0x00;
 10167  002936  0E00               	movlw	0
 10168  002938  6E96               	movwf	3990,c	;volatile
 10169                           
 10170                           ;Main.c: 318: PORTD = 0 ;
 10171  00293A  0E00               	movlw	0
 10172  00293C  6E83               	movwf	3971,c	;volatile
 10173                           
 10174                           ;Main.c: 319: PIE1 = 0 ;
 10175  00293E  0E00               	movlw	0
 10176  002940  6E9D               	movwf	3997,c	;volatile
 10177                           
 10178                           ;Main.c: 322: unsigned char dummy;
 10179                           ;Main.c: 323: dummy = RCREG;
 10180  002942  CFAE F015          	movff	4014,init@dummy	;volatile
 10181                           
 10182                           ;Main.c: 325: BAUDCONbits.BRG16 = 0;
 10183  002946  96B8               	bcf	4024,3,c	;volatile
 10184                           
 10185                           ;Main.c: 326: TXSTA = 0;
 10186  002948  0E00               	movlw	0
 10187  00294A  6EAC               	movwf	4012,c	;volatile
 10188                           
 10189                           ;Main.c: 327: SPBRG = 25;
 10190  00294C  0E19               	movlw	25
 10191  00294E  6EAF               	movwf	4015,c	;volatile
 10192                           
 10193                           ;Main.c: 328: TXSTAbits.BRGH = 1;
 10194  002950  84AC               	bsf	4012,2,c	;volatile
 10195                           
 10196                           ;Main.c: 329: TXSTAbits.TXEN = 1;
 10197  002952  8AAC               	bsf	4012,5,c	;volatile
 10198                           
 10199                           ;Main.c: 330: RCSTA = 0;
 10200  002954  0E00               	movlw	0
 10201  002956  6EAB               	movwf	4011,c	;volatile
 10202                           
 10203                           ;Main.c: 331: RCSTAbits.CREN = 1;
 10204  002958  88AB               	bsf	4011,4,c	;volatile
 10205                           
 10206                           ;Main.c: 332: RCSTAbits.SPEN = 1;
 10207  00295A  8EAB               	bsf	4011,7,c	;volatile
 10208                           
 10209                           ;Main.c: 334: T0CON = 0;
 10210  00295C  0E00               	movlw	0
 10211  00295E  6ED5               	movwf	4053,c	;volatile
 10212                           
 10213                           ;Main.c: 335: T0CONbits.T0PS0 = 1;
 10214  002960  80D5               	bsf	4053,0,c	;volatile
 10215                           
 10216                           ;Main.c: 336: T0CONbits.T0PS1 = 1;
 10217  002962  82D5               	bsf	4053,1,c	;volatile
 10218                           
 10219                           ;Main.c: 337: T0CONbits.T0PS2 = 0;
 10220  002964  94D5               	bcf	4053,2,c	;volatile
 10221                           
 10222                           ;Main.c: 338: T0CONbits.TMR0ON = 1;
 10223  002966  8ED5               	bsf	4053,7,c	;volatile
 10224                           
 10225                           ;Main.c: 339: restartTimer0();
 10226  002968  EC9A  F018         	call	_restartTimer0	;wreg free
 10227                           
 10228                           ;Main.c: 341: T1CONbits.TMR1CS = 1;
 10229  00296C  82CD               	bsf	4045,1,c	;volatile
 10230                           
 10231                           ;Main.c: 342: T1CONbits.TMR1ON = 1;
 10232  00296E  80CD               	bsf	4045,0,c	;volatile
 10233                           
 10234                           ;Main.c: 343: T1CONbits.T1CKPS1 = 0;
 10235  002970  9ACD               	bcf	4045,5,c	;volatile
 10236                           
 10237                           ;Main.c: 344: T1CONbits.T1CKPS0 = 0;
 10238  002972  98CD               	bcf	4045,4,c	;volatile
 10239                           
 10240                           ;Main.c: 346: TMR1H = 0;
 10241  002974  0E00               	movlw	0
 10242  002976  6ECF               	movwf	4047,c	;volatile
 10243                           
 10244                           ;Main.c: 347: TMR1L = 0;
 10245  002978  0E00               	movlw	0
 10246  00297A  6ECE               	movwf	4046,c	;volatile
 10247                           
 10248                           ;Main.c: 348: INTCONbits.GIEH = 1;
 10249  00297C  8EF2               	bsf	intcon,7,c	;volatile
 10250                           
 10251                           ;Main.c: 349: INTCONbits.GIEL = 1;
 10252  00297E  8CF2               	bsf	intcon,6,c	;volatile
 10253                           
 10254                           ;Main.c: 350: INTCONbits.T0IE = 1;
 10255  002980  8AF2               	bsf	intcon,5,c	;volatile
 10256                           
 10257                           ;Main.c: 351: INTCON2 = 0;
 10258  002982  0E00               	movlw	0
 10259  002984  6EF1               	movwf	intcon2,c	;volatile
 10260                           
 10261                           ;Main.c: 352: INTCON3 = 0;
 10262  002986  0E00               	movlw	0
 10263  002988  6EF0               	movwf	intcon3,c	;volatile
 10264                           
 10265                           ;Main.c: 353: INTCON2bits.INTEDG0 = 1;
 10266  00298A  8CF1               	bsf	intcon2,6,c	;volatile
 10267                           
 10268                           ;Main.c: 354: INTCON2bits.INTEDG1 = 1;
 10269  00298C  8AF1               	bsf	intcon2,5,c	;volatile
 10270                           
 10271                           ;Main.c: 355: INTCON3bits.INT1IE = 1;
 10272  00298E  86F0               	bsf	intcon3,3,c	;volatile
 10273                           
 10274                           ;Main.c: 357: TRISCbits.RC0 = 1;
 10275  002990  8094               	bsf	3988,0,c	;volatile
 10276                           
 10277                           ;Main.c: 358: PORTCbits.RC2 = 0;
 10278  002992  9482               	bcf	3970,2,c	;volatile
 10279                           
 10280                           ;Main.c: 359: PORTCbits.RC5 = 0;
 10281  002994  9A82               	bcf	3970,5,c	;volatile
 10282                           
 10283                           ;Main.c: 361: seconds = 0;
 10284  002996  0E00               	movlw	0
 10285  002998  0100               	movlb	0	; () banked
 10286  00299A  6FF5               	movwf	(_seconds+1)& (0+255),b
 10287  00299C  0E00               	movlw	0
 10288  00299E  6FF4               	movwf	_seconds& (0+255),b
 10289                           
 10290                           ; BSR set to: 0
 10291                           ;Main.c: 362: minutes = 0;
 10292  0029A0  0E00               	movlw	0
 10293  0029A2  6FF3               	movwf	(_minutes+1)& (0+255),b
 10294  0029A4  0E00               	movlw	0
 10295  0029A6  6FF2               	movwf	_minutes& (0+255),b
 10296                           
 10297                           ; BSR set to: 0
 10298                           ;Main.c: 363: hours = 0;
 10299  0029A8  0E00               	movlw	0
 10300  0029AA  6FF1               	movwf	(_hours+1)& (0+255),b
 10301  0029AC  0E00               	movlw	0
 10302  0029AE  6FF0               	movwf	_hours& (0+255),b
 10303                           
 10304                           ; BSR set to: 0
 10305                           ;Main.c: 364: clkMode = 1;
 10306  0029B0  0E00               	movlw	0
 10307  0029B2  6FF7               	movwf	(_clkMode+1)& (0+255),b
 10308  0029B4  0E01               	movlw	1
 10309  0029B6  6FF6               	movwf	_clkMode& (0+255),b
 10310                           
 10311                           ; BSR set to: 0
 10312                           ;Main.c: 365: stpMode = 0;
 10313  0029B8  0E00               	movlw	0
 10314  0029BA  6FEF               	movwf	(_stpMode+1)& (0+255),b
 10315  0029BC  0E00               	movlw	0
 10316  0029BE  6FEE               	movwf	_stpMode& (0+255),b
 10317                           
 10318                           ; BSR set to: 0
 10319                           ;Main.c: 366: initial = 1;
 10320  0029C0  0E00               	movlw	0
 10321  0029C2  6E6A               	movwf	_initial+1,c
 10322  0029C4  0E01               	movlw	1
 10323  0029C6  6E69               	movwf	_initial,c
 10324                           
 10325                           ; BSR set to: 0
 10326                           ;Main.c: 368: RCONbits.IPEN = 0;
 10327  0029C8  9ED0               	bcf	4048,7,c	;volatile
 10328                           
 10329                           ; BSR set to: 0
 10330                           ;Main.c: 369: INTCONbits.TMR0IE = 1;
 10331  0029CA  8AF2               	bsf	intcon,5,c	;volatile
 10332                           
 10333                           ; BSR set to: 0
 10334                           ;Main.c: 370: T0CONbits.TMR0ON = 1;
 10335  0029CC  8ED5               	bsf	4053,7,c	;volatile
 10336                           
 10337                           ; BSR set to: 0
 10338                           ;Main.c: 371: INTCONbits.INT0IE = 1;
 10339  0029CE  88F2               	bsf	intcon,4,c	;volatile
 10340                           
 10341                           ; BSR set to: 0
 10342                           ;Main.c: 373: restartTimer0();
 10343  0029D0  EC9A  F018         	call	_restartTimer0	;wreg free
 10344  0029D4  0012               	return		;funcret
 10345  0029D6                     __end_of_init:
 10346                           	opt stack 0
 10347                           tblptru	equ	0xFF8
 10348                           tblptrh	equ	0xFF7
 10349                           tblptrl	equ	0xFF6
 10350                           tablat	equ	0xFF5
 10351                           prodh	equ	0xFF4
 10352                           prodl	equ	0xFF3
 10353                           intcon	equ	0xFF2
 10354                           intcon2	equ	0xFF1
 10355                           intcon3	equ	0xFF0
 10356                           postinc0	equ	0xFEE
 10357                           wreg	equ	0xFE8
 10358                           indf1	equ	0xFE7
 10359                           postdec1	equ	0xFE5
 10360                           fsr1h	equ	0xFE2
 10361                           fsr1l	equ	0xFE1
 10362                           indf2	equ	0xFDF
 10363                           postinc2	equ	0xFDE
 10364                           postdec2	equ	0xFDD
 10365                           fsr2h	equ	0xFDA
 10366                           fsr2l	equ	0xFD9
 10367                           status	equ	0xFD8
 10368                           
 10369 ;; *************** function _restartTimer0 *****************
 10370 ;; Defined at:
 10371 ;;		line 108 in file "Main.c"
 10372 ;; Parameters:    Size  Location     Type
 10373 ;;		None
 10374 ;; Auto vars:     Size  Location     Type
 10375 ;;		None
 10376 ;; Return value:  Size  Location     Type
 10377 ;;                  1    wreg      void 
 10378 ;; Registers used:
 10379 ;;		wreg, status,2
 10380 ;; Tracked objects:
 10381 ;;		On entry : 0/0
 10382 ;;		On exit  : 0/0
 10383 ;;		Unchanged: 0/0
 10384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10386 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10388 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10389 ;;Total ram usage:        0 bytes
 10390 ;; Hardware stack levels used:    1
 10391 ;; Hardware stack levels required when called:    3
 10392 ;; This function calls:
 10393 ;;		Nothing
 10394 ;; This function is called by:
 10395 ;;		_init
 10396 ;; This function uses a non-reentrant model
 10397 ;;
 10398                           
 10399                           	psect	text37
 10400  003134                     __ptext37:
 10401                           	opt stack 0
 10402  003134                     _restartTimer0:
 10403                           	opt stack 26
 10404                           
 10405                           ;Main.c: 109: TMR0H = (unsigned char)((3036 >> 8) & 0x00FF);
 10406                           
 10407                           ;incstack = 0
 10408  003134  0E0B               	movlw	11
 10409  003136  6ED7               	movwf	4055,c	;volatile
 10410                           
 10411                           ;Main.c: 110: TMR0L = (unsigned char)(3036 & 0x00FF );
 10412  003138  0EDC               	movlw	220
 10413  00313A  6ED6               	movwf	4054,c	;volatile
 10414  00313C  0012               	return		;funcret
 10415  00313E                     __end_of_restartTimer0:
 10416                           	opt stack 0
 10417                           tblptru	equ	0xFF8
 10418                           tblptrh	equ	0xFF7
 10419                           tblptrl	equ	0xFF6
 10420                           tablat	equ	0xFF5
 10421                           prodh	equ	0xFF4
 10422                           prodl	equ	0xFF3
 10423                           intcon	equ	0xFF2
 10424                           intcon2	equ	0xFF1
 10425                           intcon3	equ	0xFF0
 10426                           postinc0	equ	0xFEE
 10427                           wreg	equ	0xFE8
 10428                           indf1	equ	0xFE7
 10429                           postdec1	equ	0xFE5
 10430                           fsr1h	equ	0xFE2
 10431                           fsr1l	equ	0xFE1
 10432                           indf2	equ	0xFDF
 10433                           postinc2	equ	0xFDE
 10434                           postdec2	equ	0xFDD
 10435                           fsr2h	equ	0xFDA
 10436                           fsr2l	equ	0xFD9
 10437                           status	equ	0xFD8
 10438                           
 10439 ;; *************** function _incrementClock *****************
 10440 ;; Defined at:
 10441 ;;		line 138 in file "Main.c"
 10442 ;; Parameters:    Size  Location     Type
 10443 ;;		None
 10444 ;; Auto vars:     Size  Location     Type
 10445 ;;		None
 10446 ;; Return value:  Size  Location     Type
 10447 ;;                  1    wreg      void 
 10448 ;; Registers used:
 10449 ;;		wreg, status,2, status,0
 10450 ;; Tracked objects:
 10451 ;;		On entry : 0/0
 10452 ;;		On exit  : 0/0
 10453 ;;		Unchanged: 0/0
 10454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10456 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10458 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10459 ;;Total ram usage:        0 bytes
 10460 ;; Hardware stack levels used:    1
 10461 ;; Hardware stack levels required when called:    3
 10462 ;; This function calls:
 10463 ;;		Nothing
 10464 ;; This function is called by:
 10465 ;;		_main
 10466 ;; This function uses a non-reentrant model
 10467 ;;
 10468                           
 10469                           	psect	text38
 10470  002BDA                     __ptext38:
 10471                           	opt stack 0
 10472  002BDA                     _incrementClock:
 10473                           	opt stack 27
 10474                           
 10475                           ;Main.c: 139: if (initial == 0 && clkMode == 1) {
 10476                           
 10477                           ;incstack = 0
 10478  002BDA  5069               	movf	_initial,w,c
 10479  002BDC  106A               	iorwf	_initial+1,w,c
 10480  002BDE  A4D8               	btfss	status,2,c
 10481  002BE0  0012               	return	
 10482  002BE2  0100               	movlb	0	; () banked
 10483  002BE4  05F6               	decf	_clkMode& (0+255),w,b
 10484  002BE6  11F7               	iorwf	(_clkMode+1)& (0+255),w,b
 10485  002BE8  A4D8               	btfss	status,2,c
 10486  002BEA  0012               	return	
 10487                           
 10488                           ; BSR set to: 0
 10489                           ;Main.c: 140: if (stpMode == 0 && ++seconds >= 60) seconds=0;
 10490  002BEC  51EE               	movf	_stpMode& (0+255),w,b
 10491  002BEE  11EF               	iorwf	(_stpMode+1)& (0+255),w,b
 10492  002BF0  A4D8               	btfss	status,2,c
 10493  002BF2  D00D               	goto	l123
 10494                           
 10495                           ; BSR set to: 0
 10496  002BF4  4BF4               	infsnz	_seconds& (0+255),f,b
 10497  002BF6  2BF5               	incf	(_seconds+1)& (0+255),f,b
 10498  002BF8  51F5               	movf	(_seconds+1)& (0+255),w,b
 10499  002BFA  E104               	bnz	u4630
 10500  002BFC  0E3C               	movlw	60
 10501  002BFE  5DF4               	subwf	_seconds& (0+255),w,b
 10502  002C00  A0D8               	btfss	status,0,c
 10503  002C02  D005               	goto	l123
 10504  002C04                     u4630:
 10505                           
 10506                           ; BSR set to: 0
 10507  002C04  0E00               	movlw	0
 10508  002C06  6FF5               	movwf	(_seconds+1)& (0+255),b
 10509  002C08  0E00               	movlw	0
 10510  002C0A  6FF4               	movwf	_seconds& (0+255),b
 10511  002C0C  0012               	return	
 10512  002C0E                     l123:
 10513                           
 10514                           ; BSR set to: 0
 10515                           ;Main.c: 141: else if(stpMode == 1 && ++minutes >= 60) minutes=0;
 10516                           
 10517                           ; BSR set to: 0
 10518  002C0E  05EE               	decf	_stpMode& (0+255),w,b
 10519  002C10  11EF               	iorwf	(_stpMode+1)& (0+255),w,b
 10520  002C12  A4D8               	btfss	status,2,c
 10521  002C14  D00D               	goto	l125
 10522                           
 10523                           ; BSR set to: 0
 10524  002C16  4BF2               	infsnz	_minutes& (0+255),f,b
 10525  002C18  2BF3               	incf	(_minutes+1)& (0+255),f,b
 10526  002C1A  51F3               	movf	(_minutes+1)& (0+255),w,b
 10527  002C1C  E104               	bnz	u4650
 10528  002C1E  0E3C               	movlw	60
 10529  002C20  5DF2               	subwf	_minutes& (0+255),w,b
 10530  002C22  A0D8               	btfss	status,0,c
 10531  002C24  D005               	goto	l125
 10532  002C26                     u4650:
 10533                           
 10534                           ; BSR set to: 0
 10535  002C26  0E00               	movlw	0
 10536  002C28  6FF3               	movwf	(_minutes+1)& (0+255),b
 10537  002C2A  0E00               	movlw	0
 10538  002C2C  6FF2               	movwf	_minutes& (0+255),b
 10539  002C2E  0012               	return	
 10540  002C30                     l125:
 10541                           
 10542                           ; BSR set to: 0
 10543                           ;Main.c: 142: else if(stpMode == 2 && ++hours >= 24) hours=0;
 10544                           
 10545                           ; BSR set to: 0
 10546  002C30  0E02               	movlw	2
 10547  002C32  19EE               	xorwf	_stpMode& (0+255),w,b
 10548  002C34  11EF               	iorwf	(_stpMode+1)& (0+255),w,b
 10549  002C36  A4D8               	btfss	status,2,c
 10550  002C38  0012               	return	
 10551                           
 10552                           ; BSR set to: 0
 10553  002C3A  4BF0               	infsnz	_hours& (0+255),f,b
 10554  002C3C  2BF1               	incf	(_hours+1)& (0+255),f,b
 10555  002C3E  51F1               	movf	(_hours+1)& (0+255),w,b
 10556  002C40  E104               	bnz	u4670
 10557  002C42  0E18               	movlw	24
 10558  002C44  5DF0               	subwf	_hours& (0+255),w,b
 10559  002C46  A0D8               	btfss	status,0,c
 10560  002C48  0012               	return	
 10561  002C4A                     u4670:
 10562                           
 10563                           ; BSR set to: 0
 10564  002C4A  0E00               	movlw	0
 10565  002C4C  6FF1               	movwf	(_hours+1)& (0+255),b
 10566  002C4E  0E00               	movlw	0
 10567  002C50  6FF0               	movwf	_hours& (0+255),b
 10568                           
 10569                           ; BSR set to: 0
 10570                           
 10571                           ; BSR set to: 0
 10572                           
 10573                           ; BSR set to: 0
 10574  002C52  0012               	return	
 10575  002C54                     __end_of_incrementClock:
 10576                           	opt stack 0
 10577                           tblptru	equ	0xFF8
 10578                           tblptrh	equ	0xFF7
 10579                           tblptrl	equ	0xFF6
 10580                           tablat	equ	0xFF5
 10581                           prodh	equ	0xFF4
 10582                           prodl	equ	0xFF3
 10583                           intcon	equ	0xFF2
 10584                           intcon2	equ	0xFF1
 10585                           intcon3	equ	0xFF0
 10586                           postinc0	equ	0xFEE
 10587                           wreg	equ	0xFE8
 10588                           indf1	equ	0xFE7
 10589                           postdec1	equ	0xFE5
 10590                           fsr1h	equ	0xFE2
 10591                           fsr1l	equ	0xFE1
 10592                           indf2	equ	0xFDF
 10593                           postinc2	equ	0xFDE
 10594                           postdec2	equ	0xFDD
 10595                           fsr2h	equ	0xFDA
 10596                           fsr2l	equ	0xFD9
 10597                           status	equ	0xFD8
 10598                           
 10599 ;; *************** function _decrementClock *****************
 10600 ;; Defined at:
 10601 ;;		line 146 in file "Main.c"
 10602 ;; Parameters:    Size  Location     Type
 10603 ;;		None
 10604 ;; Auto vars:     Size  Location     Type
 10605 ;;		None
 10606 ;; Return value:  Size  Location     Type
 10607 ;;                  1    wreg      void 
 10608 ;; Registers used:
 10609 ;;		wreg, status,2, status,0
 10610 ;; Tracked objects:
 10611 ;;		On entry : 0/0
 10612 ;;		On exit  : 0/0
 10613 ;;		Unchanged: 0/0
 10614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10616 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10617 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10618 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10619 ;;Total ram usage:        0 bytes
 10620 ;; Hardware stack levels used:    1
 10621 ;; Hardware stack levels required when called:    3
 10622 ;; This function calls:
 10623 ;;		Nothing
 10624 ;; This function is called by:
 10625 ;;		_main
 10626 ;; This function uses a non-reentrant model
 10627 ;;
 10628                           
 10629                           	psect	text39
 10630  002B5E                     __ptext39:
 10631                           	opt stack 0
 10632  002B5E                     _decrementClock:
 10633                           	opt stack 27
 10634                           
 10635                           ;Main.c: 147: if (initial == 0 && clkMode == 1) {
 10636                           
 10637                           ;incstack = 0
 10638  002B5E  5069               	movf	_initial,w,c
 10639  002B60  106A               	iorwf	_initial+1,w,c
 10640  002B62  A4D8               	btfss	status,2,c
 10641  002B64  0012               	return	
 10642  002B66  0100               	movlb	0	; () banked
 10643  002B68  05F6               	decf	_clkMode& (0+255),w,b
 10644  002B6A  11F7               	iorwf	(_clkMode+1)& (0+255),w,b
 10645  002B6C  A4D8               	btfss	status,2,c
 10646  002B6E  0012               	return	
 10647                           
 10648                           ; BSR set to: 0
 10649                           ;Main.c: 148: if (stpMode == 0 && --seconds == -1) seconds=59;
 10650  002B70  51EE               	movf	_stpMode& (0+255),w,b
 10651  002B72  11EF               	iorwf	(_stpMode+1)& (0+255),w,b
 10652  002B74  A4D8               	btfss	status,2,c
 10653  002B76  D00D               	goto	l132
 10654                           
 10655                           ; BSR set to: 0
 10656  002B78  07F4               	decf	_seconds& (0+255),f,b
 10657  002B7A  A0D8               	btfss	status,0,c
 10658  002B7C  07F5               	decf	(_seconds+1)& (0+255),f,b
 10659  002B7E  29F4               	incf	_seconds& (0+255),w,b
 10660  002B80  E108               	bnz	l4154
 10661  002B82  29F5               	incf	(_seconds+1)& (0+255),w,b
 10662  002B84  A4D8               	btfss	status,2,c
 10663  002B86  D005               	goto	l132
 10664                           
 10665                           ; BSR set to: 0
 10666  002B88  0E00               	movlw	0
 10667  002B8A  6FF5               	movwf	(_seconds+1)& (0+255),b
 10668  002B8C  0E3B               	movlw	59
 10669  002B8E  6FF4               	movwf	_seconds& (0+255),b
 10670  002B90  0012               	return	
 10671  002B92                     l132:
 10672  002B92                     l4154:
 10673                           
 10674                           ; BSR set to: 0
 10675                           ;Main.c: 149: else if(stpMode == 1 && --minutes == -1) minutes=59;
 10676  002B92  05EE               	decf	_stpMode& (0+255),w,b
 10677  002B94  11EF               	iorwf	(_stpMode+1)& (0+255),w,b
 10678  002B96  A4D8               	btfss	status,2,c
 10679  002B98  D00D               	goto	l134
 10680                           
 10681                           ; BSR set to: 0
 10682  002B9A  07F2               	decf	_minutes& (0+255),f,b
 10683  002B9C  A0D8               	btfss	status,0,c
 10684  002B9E  07F3               	decf	(_minutes+1)& (0+255),f,b
 10685  002BA0  29F2               	incf	_minutes& (0+255),w,b
 10686  002BA2  E108               	bnz	l4160
 10687  002BA4  29F3               	incf	(_minutes+1)& (0+255),w,b
 10688  002BA6  A4D8               	btfss	status,2,c
 10689  002BA8  D005               	goto	l134
 10690                           
 10691                           ; BSR set to: 0
 10692  002BAA  0E00               	movlw	0
 10693  002BAC  6FF3               	movwf	(_minutes+1)& (0+255),b
 10694  002BAE  0E3B               	movlw	59
 10695  002BB0  6FF2               	movwf	_minutes& (0+255),b
 10696  002BB2  0012               	return	
 10697  002BB4                     l134:
 10698  002BB4                     l4160:
 10699                           
 10700                           ; BSR set to: 0
 10701                           ;Main.c: 150: else if(stpMode == 2 && --hours == -1) hours=23;
 10702  002BB4  0E02               	movlw	2
 10703  002BB6  19EE               	xorwf	_stpMode& (0+255),w,b
 10704  002BB8  11EF               	iorwf	(_stpMode+1)& (0+255),w,b
 10705  002BBA  A4D8               	btfss	status,2,c
 10706  002BBC  0012               	return	
 10707                           
 10708                           ; BSR set to: 0
 10709  002BBE  07F0               	decf	_hours& (0+255),f,b
 10710  002BC0  A0D8               	btfss	status,0,c
 10711  002BC2  07F1               	decf	(_hours+1)& (0+255),f,b
 10712  002BC4  29F0               	incf	_hours& (0+255),w,b
 10713  002BC6  E108               	bnz	l137
 10714  002BC8  29F1               	incf	(_hours+1)& (0+255),w,b
 10715  002BCA  A4D8               	btfss	status,2,c
 10716  002BCC  0012               	return	
 10717                           
 10718                           ; BSR set to: 0
 10719  002BCE  0E00               	movlw	0
 10720  002BD0  6FF1               	movwf	(_hours+1)& (0+255),b
 10721  002BD2  0E17               	movlw	23
 10722  002BD4  6FF0               	movwf	_hours& (0+255),b
 10723                           
 10724                           ; BSR set to: 0
 10725                           
 10726                           ; BSR set to: 0
 10727                           
 10728                           ; BSR set to: 0
 10729  002BD6  0012               	return	
 10730  002BD8                     l137:
 10731  002BD8  0012               	return		;funcret
 10732  002BDA                     __end_of_decrementClock:
 10733                           	opt stack 0
 10734                           tblptru	equ	0xFF8
 10735                           tblptrh	equ	0xFF7
 10736                           tblptrl	equ	0xFF6
 10737                           tablat	equ	0xFF5
 10738                           prodh	equ	0xFF4
 10739                           prodl	equ	0xFF3
 10740                           intcon	equ	0xFF2
 10741                           intcon2	equ	0xFF1
 10742                           intcon3	equ	0xFF0
 10743                           postinc0	equ	0xFEE
 10744                           wreg	equ	0xFE8
 10745                           indf1	equ	0xFE7
 10746                           postdec1	equ	0xFE5
 10747                           fsr1h	equ	0xFE2
 10748                           fsr1l	equ	0xFE1
 10749                           indf2	equ	0xFDF
 10750                           postinc2	equ	0xFDE
 10751                           postdec2	equ	0xFDD
 10752                           fsr2h	equ	0xFDA
 10753                           fsr2l	equ	0xFD9
 10754                           status	equ	0xFD8
 10755                           
 10756 ;; *************** function _highIsr *****************
 10757 ;; Defined at:
 10758 ;;		line 296 in file "Main.c"
 10759 ;; Parameters:    Size  Location     Type
 10760 ;;		None
 10761 ;; Auto vars:     Size  Location     Type
 10762 ;;		None
 10763 ;; Return value:  Size  Location     Type
 10764 ;;                  1    wreg      void 
 10765 ;; Registers used:
 10766 ;;		wreg, status,2, status,0, cstack
 10767 ;; Tracked objects:
 10768 ;;		On entry : 0/0
 10769 ;;		On exit  : 0/0
 10770 ;;		Unchanged: 0/0
 10771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10772 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10773 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10774 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10775 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10776 ;;Total ram usage:       18 bytes
 10777 ;; Hardware stack levels used:    1
 10778 ;; Hardware stack levels required when called:    2
 10779 ;; This function calls:
 10780 ;;		_changeClockMode
 10781 ;;		_changeSetupMode
 10782 ;;		_clockNormalMode
 10783 ;; This function is called by:
 10784 ;;		Interrupt level 2
 10785 ;; This function uses a non-reentrant model
 10786 ;;
 10787                           
 10788                           	psect	intcode
 10789  000008                     __pintcode:
 10790                           	opt stack 0
 10791  000008                     _highIsr:
 10792                           	opt stack 22
 10793                           
 10794                           ;incstack = 0
 10795  000008  826B               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 10796  00000A  EDB0  F013         	call	int_func,f	;refresh shadow registers
 10797                           tblptru	equ	0xFF8
 10798                           tblptrh	equ	0xFF7
 10799                           tblptrl	equ	0xFF6
 10800                           tablat	equ	0xFF5
 10801                           prodh	equ	0xFF4
 10802                           prodl	equ	0xFF3
 10803                           intcon	equ	0xFF2
 10804                           intcon2	equ	0xFF1
 10805                           intcon3	equ	0xFF0
 10806                           postinc0	equ	0xFEE
 10807                           wreg	equ	0xFE8
 10808                           indf1	equ	0xFE7
 10809                           postdec1	equ	0xFE5
 10810                           fsr1h	equ	0xFE2
 10811                           fsr1l	equ	0xFE1
 10812                           indf2	equ	0xFDF
 10813                           postinc2	equ	0xFDE
 10814                           postdec2	equ	0xFDD
 10815                           fsr2h	equ	0xFDA
 10816                           fsr2l	equ	0xFD9
 10817                           status	equ	0xFD8
 10818                           
 10819                           	psect	intcode_body
 10820  002760                     __pintcode_body:
 10821                           	opt stack 22
 10822  002760                     int_func:
 10823                           	opt stack 22
 10824  002760  0006               	pop		; remove dummy address from shadow register refresh
 10825  002762  CFFA F003          	movff	pclath,??_highIsr
 10826  002766  CFFB F004          	movff	pclatu,??_highIsr+1
 10827  00276A  CFE9 F005          	movff	fsr0l,??_highIsr+2
 10828  00276E  CFEA F006          	movff	fsr0h,??_highIsr+3
 10829  002772  CFE1 F007          	movff	fsr1l,??_highIsr+4
 10830  002776  CFE2 F008          	movff	fsr1h,??_highIsr+5
 10831  00277A  CFD9 F009          	movff	fsr2l,??_highIsr+6
 10832  00277E  CFDA F00A          	movff	fsr2h,??_highIsr+7
 10833  002782  CFF3 F00B          	movff	prodl,??_highIsr+8
 10834  002786  CFF4 F00C          	movff	prodh,??_highIsr+9
 10835  00278A  CFF6 F00D          	movff	tblptrl,??_highIsr+10
 10836  00278E  CFF7 F00E          	movff	tblptrh,??_highIsr+11
 10837  002792  CFF8 F00F          	movff	tblptru,??_highIsr+12
 10838  002796  CFF5 F010          	movff	tablat,??_highIsr+13
 10839  00279A  C06B  F011         	movff	btemp,??_highIsr+14
 10840  00279E  C06C  F012         	movff	btemp+1,??_highIsr+15
 10841  0027A2  C06D  F013         	movff	btemp+2,??_highIsr+16
 10842  0027A6  C06E  F014         	movff	btemp+3,??_highIsr+17
 10843                           
 10844                           ;Main.c: 297: if(INTCONbits.TMR0IF) {
 10845  0027AA  A4F2               	btfss	intcon,2,c	;volatile
 10846  0027AC  D012               	goto	i2l265
 10847                           
 10848                           ;Main.c: 298: if (initial == 1 || (initial == 0 && clkMode == 0) ) clockNormalMode();
 10849  0027AE  0469               	decf	_initial,w,c
 10850  0027B0  106A               	iorwf	_initial+1,w,c
 10851  0027B2  B4D8               	btfsc	status,2,c
 10852  0027B4  D009               	goto	i2u576_40
 10853  0027B6  5069               	movf	_initial,w,c
 10854  0027B8  106A               	iorwf	_initial+1,w,c
 10855  0027BA  A4D8               	btfss	status,2,c
 10856  0027BC  D008               	goto	i2l266
 10857  0027BE  0100               	movlb	0	; () banked
 10858  0027C0  51F6               	movf	_clkMode& (0+255),w,b
 10859  0027C2  11F7               	iorwf	(_clkMode+1)& (0+255),w,b
 10860  0027C4  A4D8               	btfss	status,2,c
 10861  0027C6  D003               	goto	i2l266
 10862  0027C8                     i2u576_40:
 10863                           
 10864                           ; BSR set to: 0
 10865  0027C8  ECF1  F016         	call	_clockNormalMode	;wreg free
 10866  0027CC  D016               	goto	i2l275
 10867  0027CE                     i2l266:
 10868                           
 10869                           ;Main.c: 299: else INTCONbits.TMR0IF = 0;
 10870  0027CE  94F2               	bcf	intcon,2,c	;volatile
 10871                           
 10872                           ;Main.c: 300: } else if(INTCONbits.INT0IF) {
 10873  0027D0  D014               	goto	i2l275
 10874  0027D2                     i2l265:
 10875  0027D2  A2F2               	btfss	intcon,1,c	;volatile
 10876  0027D4  D003               	goto	i2l271
 10877                           
 10878                           ;Main.c: 301: changeClockMode();
 10879  0027D6  EC01  F018         	call	_changeClockMode	;wreg free
 10880                           
 10881                           ;Main.c: 302: }else if(INTCON3bits.INT1IF) {
 10882  0027DA  D00F               	goto	i2l275
 10883  0027DC                     i2l271:
 10884  0027DC  A0F0               	btfss	intcon3,0,c	;volatile
 10885  0027DE  D00D               	goto	i2l275
 10886                           
 10887                           ;Main.c: 303: if (initial == 0 && clkMode == 1) changeSetupMode();
 10888  0027E0  5069               	movf	_initial,w,c
 10889  0027E2  106A               	iorwf	_initial+1,w,c
 10890  0027E4  A4D8               	btfss	status,2,c
 10891  0027E6  D008               	goto	i2l274
 10892  0027E8  0100               	movlb	0	; () banked
 10893  0027EA  05F6               	decf	_clkMode& (0+255),w,b
 10894  0027EC  11F7               	iorwf	(_clkMode+1)& (0+255),w,b
 10895  0027EE  A4D8               	btfss	status,2,c
 10896  0027F0  D003               	goto	i2l274
 10897                           
 10898                           ; BSR set to: 0
 10899  0027F2  ECBA  F017         	call	_changeSetupMode	;wreg free
 10900  0027F6  D001               	goto	i2l275
 10901  0027F8                     i2l274:
 10902                           
 10903                           ;Main.c: 304: else INTCON3bits.INT1IF = 0;
 10904  0027F8  90F0               	bcf	intcon3,0,c	;volatile
 10905  0027FA                     i2l275:
 10906  0027FA  C014  F06E         	movff	??_highIsr+17,btemp+3
 10907  0027FE  C013  F06D         	movff	??_highIsr+16,btemp+2
 10908  002802  C012  F06C         	movff	??_highIsr+15,btemp+1
 10909  002806  C011  F06B         	movff	??_highIsr+14,btemp
 10910  00280A  C010  FFF5         	movff	??_highIsr+13,tablat
 10911  00280E  C00F  FFF8         	movff	??_highIsr+12,tblptru
 10912  002812  C00E  FFF7         	movff	??_highIsr+11,tblptrh
 10913  002816  C00D  FFF6         	movff	??_highIsr+10,tblptrl
 10914  00281A  C00C  FFF4         	movff	??_highIsr+9,prodh
 10915  00281E  C00B  FFF3         	movff	??_highIsr+8,prodl
 10916  002822  C00A  FFDA         	movff	??_highIsr+7,fsr2h
 10917  002826  C009  FFD9         	movff	??_highIsr+6,fsr2l
 10918  00282A  C008  FFE2         	movff	??_highIsr+5,fsr1h
 10919  00282E  C007  FFE1         	movff	??_highIsr+4,fsr1l
 10920  002832  C006  FFEA         	movff	??_highIsr+3,fsr0h
 10921  002836  C005  FFE9         	movff	??_highIsr+2,fsr0l
 10922  00283A  C004  FFFB         	movff	??_highIsr+1,pclatu
 10923  00283E  C003  FFFA         	movff	??_highIsr,pclath
 10924  002842  926B               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 10925  002844  0011               	retfie		f
 10926  002846                     __end_of_highIsr:
 10927                           	opt stack 0
 10928                           pclatu	equ	0xFFB
 10929                           pclath	equ	0xFFA
 10930                           tblptru	equ	0xFF8
 10931                           tblptrh	equ	0xFF7
 10932                           tblptrl	equ	0xFF6
 10933                           tablat	equ	0xFF5
 10934                           prodh	equ	0xFF4
 10935                           prodl	equ	0xFF3
 10936                           intcon	equ	0xFF2
 10937                           intcon2	equ	0xFF1
 10938                           intcon3	equ	0xFF0
 10939                           postinc0	equ	0xFEE
 10940                           fsr0h	equ	0xFEA
 10941                           fsr0l	equ	0xFE9
 10942                           wreg	equ	0xFE8
 10943                           indf1	equ	0xFE7
 10944                           postdec1	equ	0xFE5
 10945                           fsr1h	equ	0xFE2
 10946                           fsr1l	equ	0xFE1
 10947                           indf2	equ	0xFDF
 10948                           postinc2	equ	0xFDE
 10949                           postdec2	equ	0xFDD
 10950                           fsr2h	equ	0xFDA
 10951                           fsr2l	equ	0xFD9
 10952                           status	equ	0xFD8
 10953                           
 10954 ;; *************** function _clockNormalMode *****************
 10955 ;; Defined at:
 10956 ;;		line 113 in file "Main.c"
 10957 ;; Parameters:    Size  Location     Type
 10958 ;;		None
 10959 ;; Auto vars:     Size  Location     Type
 10960 ;;		None
 10961 ;; Return value:  Size  Location     Type
 10962 ;;                  1    wreg      void 
 10963 ;; Registers used:
 10964 ;;		wreg, status,2, status,0, cstack
 10965 ;; Tracked objects:
 10966 ;;		On entry : 0/0
 10967 ;;		On exit  : 0/0
 10968 ;;		Unchanged: 0/0
 10969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10970 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10971 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10972 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10973 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10974 ;;Total ram usage:        0 bytes
 10975 ;; Hardware stack levels used:    1
 10976 ;; Hardware stack levels required when called:    1
 10977 ;; This function calls:
 10978 ;;		i2_restartTimer0
 10979 ;; This function is called by:
 10980 ;;		_highIsr
 10981 ;; This function uses a non-reentrant model
 10982 ;;
 10983                           
 10984                           	psect	text41
 10985  002DE2                     __ptext41:
 10986                           	opt stack 0
 10987  002DE2                     _clockNormalMode:
 10988                           	opt stack 22
 10989                           
 10990                           ;Main.c: 114: INTCONbits.TMR0IF = 0;
 10991                           
 10992                           ;incstack = 0
 10993  002DE2  94F2               	bcf	intcon,2,c	;volatile
 10994                           
 10995                           ;Main.c: 115: if(++seconds >= 60) {
 10996  002DE4  0100               	movlb	0	; () banked
 10997  002DE6  4BF4               	infsnz	_seconds& (0+255),f,b
 10998  002DE8  2BF5               	incf	(_seconds+1)& (0+255),f,b
 10999  002DEA  51F5               	movf	(_seconds+1)& (0+255),w,b
 11000  002DEC  E104               	bnz	i2u455_40
 11001  002DEE  0E3C               	movlw	60
 11002  002DF0  5DF4               	subwf	_seconds& (0+255),w,b
 11003  002DF2  A0D8               	btfss	status,0,c
 11004  002DF4  D01C               	goto	i2l108
 11005  002DF6                     i2u455_40:
 11006                           
 11007                           ; BSR set to: 0
 11008                           ;Main.c: 116: seconds=0;
 11009  002DF6  0E00               	movlw	0
 11010  002DF8  6FF5               	movwf	(_seconds+1)& (0+255),b
 11011  002DFA  0E00               	movlw	0
 11012  002DFC  6FF4               	movwf	_seconds& (0+255),b
 11013                           
 11014                           ; BSR set to: 0
 11015                           ;Main.c: 117: if (++minutes >= 60) {
 11016  002DFE  4BF2               	infsnz	_minutes& (0+255),f,b
 11017  002E00  2BF3               	incf	(_minutes+1)& (0+255),f,b
 11018  002E02  51F3               	movf	(_minutes+1)& (0+255),w,b
 11019  002E04  E104               	bnz	i2u456_40
 11020  002E06  0E3C               	movlw	60
 11021  002E08  5DF2               	subwf	_minutes& (0+255),w,b
 11022  002E0A  A0D8               	btfss	status,0,c
 11023  002E0C  D010               	goto	i2l108
 11024  002E0E                     i2u456_40:
 11025                           
 11026                           ; BSR set to: 0
 11027                           ;Main.c: 118: minutes = 0;
 11028  002E0E  0E00               	movlw	0
 11029  002E10  6FF3               	movwf	(_minutes+1)& (0+255),b
 11030  002E12  0E00               	movlw	0
 11031  002E14  6FF2               	movwf	_minutes& (0+255),b
 11032                           
 11033                           ; BSR set to: 0
 11034                           ;Main.c: 119: if (++hours >= 24 ) hours = 0;
 11035  002E16  4BF0               	infsnz	_hours& (0+255),f,b
 11036  002E18  2BF1               	incf	(_hours+1)& (0+255),f,b
 11037  002E1A  51F1               	movf	(_hours+1)& (0+255),w,b
 11038  002E1C  E104               	bnz	i2u457_40
 11039  002E1E  0E18               	movlw	24
 11040  002E20  5DF0               	subwf	_hours& (0+255),w,b
 11041  002E22  A0D8               	btfss	status,0,c
 11042  002E24  D004               	goto	i2l108
 11043  002E26                     i2u457_40:
 11044                           
 11045                           ; BSR set to: 0
 11046  002E26  0E00               	movlw	0
 11047  002E28  6FF1               	movwf	(_hours+1)& (0+255),b
 11048  002E2A  0E00               	movlw	0
 11049  002E2C  6FF0               	movwf	_hours& (0+255),b
 11050  002E2E                     i2l108:
 11051                           
 11052                           ; BSR set to: 0
 11053                           ;Main.c: 120: }
 11054                           ;Main.c: 121: }
 11055                           ;Main.c: 122: restartTimer0();
 11056                           
 11057                           ; BSR set to: 0
 11058                           
 11059                           ; BSR set to: 0
 11060                           
 11061                           ; BSR set to: 0
 11062  002E2E  EC9F  F018         	call	i2_restartTimer0	;wreg free
 11063  002E32  0012               	return		;funcret
 11064  002E34                     __end_of_clockNormalMode:
 11065                           	opt stack 0
 11066                           pclatu	equ	0xFFB
 11067                           pclath	equ	0xFFA
 11068                           tblptru	equ	0xFF8
 11069                           tblptrh	equ	0xFF7
 11070                           tblptrl	equ	0xFF6
 11071                           tablat	equ	0xFF5
 11072                           prodh	equ	0xFF4
 11073                           prodl	equ	0xFF3
 11074                           intcon	equ	0xFF2
 11075                           intcon2	equ	0xFF1
 11076                           intcon3	equ	0xFF0
 11077                           postinc0	equ	0xFEE
 11078                           fsr0h	equ	0xFEA
 11079                           fsr0l	equ	0xFE9
 11080                           wreg	equ	0xFE8
 11081                           indf1	equ	0xFE7
 11082                           postdec1	equ	0xFE5
 11083                           fsr1h	equ	0xFE2
 11084                           fsr1l	equ	0xFE1
 11085                           indf2	equ	0xFDF
 11086                           postinc2	equ	0xFDE
 11087                           postdec2	equ	0xFDD
 11088                           fsr2h	equ	0xFDA
 11089                           fsr2l	equ	0xFD9
 11090                           status	equ	0xFD8
 11091                           
 11092 ;; *************** function i2_restartTimer0 *****************
 11093 ;; Defined at:
 11094 ;;		line 108 in file "Main.c"
 11095 ;; Parameters:    Size  Location     Type
 11096 ;;		None
 11097 ;; Auto vars:     Size  Location     Type
 11098 ;;		None
 11099 ;; Return value:  Size  Location     Type
 11100 ;;                  1    wreg      void 
 11101 ;; Registers used:
 11102 ;;		wreg, status,2
 11103 ;; Tracked objects:
 11104 ;;		On entry : 0/0
 11105 ;;		On exit  : 0/0
 11106 ;;		Unchanged: 0/0
 11107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11109 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11111 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11112 ;;Total ram usage:        0 bytes
 11113 ;; Hardware stack levels used:    1
 11114 ;; This function calls:
 11115 ;;		Nothing
 11116 ;; This function is called by:
 11117 ;;		_clockNormalMode
 11118 ;; This function uses a non-reentrant model
 11119 ;;
 11120                           
 11121                           	psect	text42
 11122  00313E                     __ptext42:
 11123                           	opt stack 0
 11124  00313E                     i2_restartTimer0:
 11125                           	opt stack 22
 11126                           
 11127                           ;Main.c: 109: TMR0H = (unsigned char)((3036 >> 8) & 0x00FF);
 11128                           
 11129                           ;incstack = 0
 11130  00313E  0E0B               	movlw	11
 11131  003140  6ED7               	movwf	4055,c	;volatile
 11132                           
 11133                           ;Main.c: 110: TMR0L = (unsigned char)(3036 & 0x00FF );
 11134  003142  0EDC               	movlw	220
 11135  003144  6ED6               	movwf	4054,c	;volatile
 11136  003146  0012               	return		;funcret
 11137  003148                     __end_ofi2_restartTimer0:
 11138                           	opt stack 0
 11139                           pclatu	equ	0xFFB
 11140                           pclath	equ	0xFFA
 11141                           tblptru	equ	0xFF8
 11142                           tblptrh	equ	0xFF7
 11143                           tblptrl	equ	0xFF6
 11144                           tablat	equ	0xFF5
 11145                           prodh	equ	0xFF4
 11146                           prodl	equ	0xFF3
 11147                           intcon	equ	0xFF2
 11148                           intcon2	equ	0xFF1
 11149                           intcon3	equ	0xFF0
 11150                           postinc0	equ	0xFEE
 11151                           fsr0h	equ	0xFEA
 11152                           fsr0l	equ	0xFE9
 11153                           wreg	equ	0xFE8
 11154                           indf1	equ	0xFE7
 11155                           postdec1	equ	0xFE5
 11156                           fsr1h	equ	0xFE2
 11157                           fsr1l	equ	0xFE1
 11158                           indf2	equ	0xFDF
 11159                           postinc2	equ	0xFDE
 11160                           postdec2	equ	0xFDD
 11161                           fsr2h	equ	0xFDA
 11162                           fsr2l	equ	0xFD9
 11163                           status	equ	0xFD8
 11164                           
 11165 ;; *************** function _changeSetupMode *****************
 11166 ;; Defined at:
 11167 ;;		line 131 in file "Main.c"
 11168 ;; Parameters:    Size  Location     Type
 11169 ;;		None
 11170 ;; Auto vars:     Size  Location     Type
 11171 ;;		None
 11172 ;; Return value:  Size  Location     Type
 11173 ;;                  1    wreg      void 
 11174 ;; Registers used:
 11175 ;;		wreg, status,2, status,0
 11176 ;; Tracked objects:
 11177 ;;		On entry : 0/0
 11178 ;;		On exit  : 0/0
 11179 ;;		Unchanged: 0/0
 11180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11181 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11182 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11183 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11184 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11185 ;;Total ram usage:        0 bytes
 11186 ;; Hardware stack levels used:    1
 11187 ;; This function calls:
 11188 ;;		Nothing
 11189 ;; This function is called by:
 11190 ;;		_highIsr
 11191 ;; This function uses a non-reentrant model
 11192 ;;
 11193                           
 11194                           	psect	text43
 11195  002F74                     __ptext43:
 11196                           	opt stack 0
 11197  002F74                     _changeSetupMode:
 11198                           	opt stack 23
 11199                           
 11200                           ;Main.c: 132: INTCON3bits.INT1IF = 0;
 11201                           
 11202                           ;incstack = 0
 11203  002F74  90F0               	bcf	intcon3,0,c	;volatile
 11204                           
 11205                           ;Main.c: 133: if (stpMode == 0) stpMode = 1;
 11206  002F76  0100               	movlb	0	; () banked
 11207  002F78  51EE               	movf	_stpMode& (0+255),w,b
 11208  002F7A  11EF               	iorwf	(_stpMode+1)& (0+255),w,b
 11209  002F7C  A4D8               	btfss	status,2,c
 11210  002F7E  D005               	goto	i2l115
 11211                           
 11212                           ; BSR set to: 0
 11213  002F80  0E00               	movlw	0
 11214  002F82  6FEF               	movwf	(_stpMode+1)& (0+255),b
 11215  002F84  0E01               	movlw	1
 11216  002F86  6FEE               	movwf	_stpMode& (0+255),b
 11217  002F88  0012               	return	
 11218  002F8A                     i2l115:
 11219                           
 11220                           ; BSR set to: 0
 11221                           ;Main.c: 134: else if(stpMode == 1) stpMode = 2;
 11222                           
 11223                           ; BSR set to: 0
 11224  002F8A  05EE               	decf	_stpMode& (0+255),w,b
 11225  002F8C  11EF               	iorwf	(_stpMode+1)& (0+255),w,b
 11226  002F8E  A4D8               	btfss	status,2,c
 11227  002F90  D005               	goto	i2l117
 11228                           
 11229                           ; BSR set to: 0
 11230  002F92  0E00               	movlw	0
 11231  002F94  6FEF               	movwf	(_stpMode+1)& (0+255),b
 11232  002F96  0E02               	movlw	2
 11233  002F98  6FEE               	movwf	_stpMode& (0+255),b
 11234  002F9A  0012               	return	
 11235  002F9C                     i2l117:
 11236                           
 11237                           ; BSR set to: 0
 11238                           ;Main.c: 135: else stpMode = 0;
 11239                           
 11240                           ; BSR set to: 0
 11241  002F9C  0E00               	movlw	0
 11242  002F9E  6FEF               	movwf	(_stpMode+1)& (0+255),b
 11243  002FA0  0E00               	movlw	0
 11244  002FA2  6FEE               	movwf	_stpMode& (0+255),b
 11245                           
 11246                           ; BSR set to: 0
 11247  002FA4  0012               	return	
 11248  002FA6                     __end_of_changeSetupMode:
 11249                           	opt stack 0
 11250                           pclatu	equ	0xFFB
 11251                           pclath	equ	0xFFA
 11252                           tblptru	equ	0xFF8
 11253                           tblptrh	equ	0xFF7
 11254                           tblptrl	equ	0xFF6
 11255                           tablat	equ	0xFF5
 11256                           prodh	equ	0xFF4
 11257                           prodl	equ	0xFF3
 11258                           intcon	equ	0xFF2
 11259                           intcon2	equ	0xFF1
 11260                           intcon3	equ	0xFF0
 11261                           postinc0	equ	0xFEE
 11262                           fsr0h	equ	0xFEA
 11263                           fsr0l	equ	0xFE9
 11264                           wreg	equ	0xFE8
 11265                           indf1	equ	0xFE7
 11266                           postdec1	equ	0xFE5
 11267                           fsr1h	equ	0xFE2
 11268                           fsr1l	equ	0xFE1
 11269                           indf2	equ	0xFDF
 11270                           postinc2	equ	0xFDE
 11271                           postdec2	equ	0xFDD
 11272                           fsr2h	equ	0xFDA
 11273                           fsr2l	equ	0xFD9
 11274                           status	equ	0xFD8
 11275                           
 11276 ;; *************** function _changeClockMode *****************
 11277 ;; Defined at:
 11278 ;;		line 125 in file "Main.c"
 11279 ;; Parameters:    Size  Location     Type
 11280 ;;		None
 11281 ;; Auto vars:     Size  Location     Type
 11282 ;;		None
 11283 ;; Return value:  Size  Location     Type
 11284 ;;                  1    wreg      void 
 11285 ;; Registers used:
 11286 ;;		wreg, status,2, status,0
 11287 ;; Tracked objects:
 11288 ;;		On entry : 0/0
 11289 ;;		On exit  : 0/0
 11290 ;;		Unchanged: 0/0
 11291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11293 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11294 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11295 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11296 ;;Total ram usage:        2 bytes
 11297 ;; Hardware stack levels used:    1
 11298 ;; This function calls:
 11299 ;;		Nothing
 11300 ;; This function is called by:
 11301 ;;		_highIsr
 11302 ;; This function uses a non-reentrant model
 11303 ;;
 11304                           
 11305                           	psect	text44
 11306  003002                     __ptext44:
 11307                           	opt stack 0
 11308  003002                     _changeClockMode:
 11309                           	opt stack 23
 11310                           
 11311                           ;Main.c: 126: INTCONbits.INT0IF = 0;
 11312                           
 11313                           ; BSR set to: 0
 11314                           ;incstack = 0
 11315  003002  92F2               	bcf	intcon,1,c	;volatile
 11316                           
 11317                           ;Main.c: 127: initial = 0;
 11318  003004  0E00               	movlw	0
 11319  003006  6E6A               	movwf	_initial+1,c
 11320  003008  0E00               	movlw	0
 11321  00300A  6E69               	movwf	_initial,c
 11322                           
 11323                           ;Main.c: 128: clkMode = 1 - clkMode;
 11324  00300C  C0F6  F001         	movff	_clkMode,??_changeClockMode
 11325  003010  C0F7  F002         	movff	_clkMode+1,??_changeClockMode+1
 11326  003014  1E01               	comf	??_changeClockMode,f,c
 11327  003016  1E02               	comf	??_changeClockMode+1,f,c
 11328  003018  4A01               	infsnz	??_changeClockMode,f,c
 11329  00301A  2A02               	incf	??_changeClockMode+1,f,c
 11330  00301C  0E01               	movlw	1
 11331  00301E  2401               	addwf	??_changeClockMode,w,c
 11332  003020  0100               	movlb	0	; () banked
 11333  003022  6FF6               	movwf	_clkMode& (0+255),b
 11334  003024  0E00               	movlw	0
 11335  003026  2002               	addwfc	??_changeClockMode+1,w,c
 11336  003028  6FF7               	movwf	(_clkMode+1)& (0+255),b
 11337                           
 11338                           ; BSR set to: 0
 11339  00302A  0012               	return		;funcret
 11340  00302C                     __end_of_changeClockMode:
 11341                           	opt stack 0
 11342                           pclatu	equ	0xFFB
 11343                           pclath	equ	0xFFA
 11344                           tblptru	equ	0xFF8
 11345                           tblptrh	equ	0xFF7
 11346                           tblptrl	equ	0xFF6
 11347                           tablat	equ	0xFF5
 11348                           prodh	equ	0xFF4
 11349                           prodl	equ	0xFF3
 11350                           intcon	equ	0xFF2
 11351                           intcon2	equ	0xFF1
 11352                           intcon3	equ	0xFF0
 11353                           postinc0	equ	0xFEE
 11354                           fsr0h	equ	0xFEA
 11355                           fsr0l	equ	0xFE9
 11356                           wreg	equ	0xFE8
 11357                           indf1	equ	0xFE7
 11358                           postdec1	equ	0xFE5
 11359                           fsr1h	equ	0xFE2
 11360                           fsr1l	equ	0xFE1
 11361                           indf2	equ	0xFDF
 11362                           postinc2	equ	0xFDE
 11363                           postdec2	equ	0xFDD
 11364                           fsr2h	equ	0xFDA
 11365                           fsr2l	equ	0xFD9
 11366                           status	equ	0xFD8
 11367                           pclatu	equ	0xFFB
 11368                           pclath	equ	0xFFA
 11369                           tblptru	equ	0xFF8
 11370                           tblptrh	equ	0xFF7
 11371                           tblptrl	equ	0xFF6
 11372                           tablat	equ	0xFF5
 11373                           prodh	equ	0xFF4
 11374                           prodl	equ	0xFF3
 11375                           intcon	equ	0xFF2
 11376                           intcon2	equ	0xFF1
 11377                           intcon3	equ	0xFF0
 11378                           postinc0	equ	0xFEE
 11379                           fsr0h	equ	0xFEA
 11380                           fsr0l	equ	0xFE9
 11381                           wreg	equ	0xFE8
 11382                           indf1	equ	0xFE7
 11383                           postdec1	equ	0xFE5
 11384                           fsr1h	equ	0xFE2
 11385                           fsr1l	equ	0xFE1
 11386                           indf2	equ	0xFDF
 11387                           postinc2	equ	0xFDE
 11388                           postdec2	equ	0xFDD
 11389                           fsr2h	equ	0xFDA
 11390                           fsr2l	equ	0xFD9
 11391                           status	equ	0xFD8
 11392                           
 11393                           	psect	rparam
 11394  0000                     pclatu	equ	0xFFB
 11395                           pclath	equ	0xFFA
 11396                           tblptru	equ	0xFF8
 11397                           tblptrh	equ	0xFF7
 11398                           tblptrl	equ	0xFF6
 11399                           tablat	equ	0xFF5
 11400                           prodh	equ	0xFF4
 11401                           prodl	equ	0xFF3
 11402                           intcon	equ	0xFF2
 11403                           intcon2	equ	0xFF1
 11404                           intcon3	equ	0xFF0
 11405                           postinc0	equ	0xFEE
 11406                           fsr0h	equ	0xFEA
 11407                           fsr0l	equ	0xFE9
 11408                           wreg	equ	0xFE8
 11409                           indf1	equ	0xFE7
 11410                           postdec1	equ	0xFE5
 11411                           fsr1h	equ	0xFE2
 11412                           fsr1l	equ	0xFE1
 11413                           indf2	equ	0xFDF
 11414                           postinc2	equ	0xFDE
 11415                           postdec2	equ	0xFDD
 11416                           fsr2h	equ	0xFDA
 11417                           fsr2l	equ	0xFD9
 11418                           status	equ	0xFD8
 11419                           
 11420                           	psect	temp
 11421  00006B                     btemp:
 11422                           	opt stack 0
 11423  00006B                     	ds	1
 11424  0000                     int$flags	set	btemp
 11425  0000                     wtemp6	set	btemp+1
 11426                           pclatu	equ	0xFFB
 11427                           pclath	equ	0xFFA
 11428                           tblptru	equ	0xFF8
 11429                           tblptrh	equ	0xFF7
 11430                           tblptrl	equ	0xFF6
 11431                           tablat	equ	0xFF5
 11432                           prodh	equ	0xFF4
 11433                           prodl	equ	0xFF3
 11434                           intcon	equ	0xFF2
 11435                           intcon2	equ	0xFF1
 11436                           intcon3	equ	0xFF0
 11437                           postinc0	equ	0xFEE
 11438                           fsr0h	equ	0xFEA
 11439                           fsr0l	equ	0xFE9
 11440                           wreg	equ	0xFE8
 11441                           indf1	equ	0xFE7
 11442                           postdec1	equ	0xFE5
 11443                           fsr1h	equ	0xFE2
 11444                           fsr1l	equ	0xFE1
 11445                           indf2	equ	0xFDF
 11446                           postinc2	equ	0xFDE
 11447                           postdec2	equ	0xFDD
 11448                           fsr2h	equ	0xFDA
 11449                           fsr2l	equ	0xFD9
 11450                           status	equ	0xFD8


Data Sizes:
    Strings     405
    Constant    144
    Data        6
    BSS         8
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    100     106
    BANK0           128    110     120
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_21(CODE[7]), main@command(BANK0[9]), STR_17(CODE[6]), STR_16(CODE[8]), 
		 -> STR_15(CODE[8]), STR_12(CODE[4]), STR_11(CODE[3]), STR_9(CODE[4]), 
		 -> STR_8(CODE[3]), main@voltage(BANK0[4]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 65
		 -> STR_20(CODE[37]), STR_19(CODE[46]), STR_18(CODE[18]), STR_14(CODE[15]), 
		 -> STR_13(CODE[17]), STR_10(CODE[9]), STR_7(CODE[9]), STR_6(CODE[9]), 
		 -> STR_5(CODE[15]), STR_4(CODE[65]), STR_3(CODE[33]), STR_2(CODE[40]), 
		 -> STR_1(CODE[56]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 32
		 -> main@Buffer(BANK0[32]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    main$1119	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_17(CODE[6]), STR_16(CODE[8]), 

    main$1118	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_17(CODE[6]), STR_16(CODE[8]), STR_15(CODE[8]), 

    main$1110	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_12(CODE[4]), STR_11(CODE[3]), 

    main$1105	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_9(CODE[4]), STR_8(CODE[3]), 

    lcd_puts@s	PTR unsigned char  size(2) Largest target is 32
		 -> main@Buffer(BANK0[32]), 

    send_string_no_lib@p	PTR unsigned char  size(2) Largest target is 32
		 -> main@Buffer(BANK0[32]), 

    isValidChar@command	PTR unsigned char  size(2) Largest target is 9
		 -> main@command(BANK0[9]), 


Critical Paths under _main in COMRAM

    _sprintf->___flsub
    _scale->___flmul
    _fround->___flmul
    ___flmul->___awdiv
    ___awdiv->___awmod
    ___llmod->___lldiv
    ___fltol->_scale
    ___flsub->___fladd
    ___fladd->_fround
    _send_string_no_lib->_send_byte_no_lib
    _read_adc_voltage->___fldiv
    ___xxtofl->___wmul
    ___fldiv->___xxtofl
    _lcd_puts->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    _lcd_init->_lcd_send_byte
    _lcd_send_byte->_lcd_send_nibble
    _lcd_send_nibble->_delay_cycles

Critical Paths under _highIsr in COMRAM

    _highIsr->_changeClockMode

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _highIsr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _highIsr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _highIsr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _highIsr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _highIsr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _highIsr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _highIsr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _highIsr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _highIsr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _highIsr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _highIsr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _highIsr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _highIsr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _highIsr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _highIsr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _highIsr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                65    65      0   60480
                                             45 BANK0     65    65      0
                            ___flmul
                             ___wmul
                     _decrementClock
                           _delay_ms
                     _incrementClock
                               _init
                    _init_adc_no_lib
                        _isValidChar
                  _is_byte_available
                         _lcd_gotoxy
                           _lcd_init
                           _lcd_putc
                           _lcd_puts
                   _read_adc_voltage
                   _read_byte_no_lib
                 _send_string_no_lib
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             46    36     10   38697
                                              0 BANK0     45    35     10
                            ___awdiv
                            ___fladd
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                            ___lldiv
                            ___llmod
                             ___wmul
                           ___xxtofl
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                                9     5      4    7799
                                             59 COMRAM     9     5      4
                            ___awdiv
                            ___awmod
                            ___flmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             20 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13     9      4    7601
                                             59 COMRAM    13     9      4
                            ___awdiv
                            ___awmod
                            ___flmul
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             25    17      8    3872
                                             34 COMRAM    25    17      8
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1664
                                             20 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1820
                                             26 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         17     9      8     455
                                             20 COMRAM    17     9      8
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          14     6      8     455
                                             20 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     767
                                             33 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     618
                                             20 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             10     6      4     457
                                             68 COMRAM    10     6      4
                            ___flmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flsub                                              8     0      8    2737
                                             92 COMRAM     8     0      8
                            ___fladd
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fladd                                             20    12      8    2414
                                             72 COMRAM    20    12      8
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flneg                                              4     0      4     121
                                             20 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (2) ___flge                                              12     4      8     638
                                             20 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (1) _send_string_no_lib                                   2     0      2     523
                                             21 COMRAM     2     0      2
                   _send_byte_no_lib
 ---------------------------------------------------------------------------------
 (2) _send_byte_no_lib                                     1     1      0      22
                                             20 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _read_byte_no_lib                                     1     1      0      23
                                             20 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _read_adc_voltage                                    11     7      4    3163
                                             65 COMRAM    11     7      4
                            ___fldiv
                             ___wmul
                           ___xxtofl
                _read_adc_raw_no_lib
 ---------------------------------------------------------------------------------
 (2) _read_adc_raw_no_lib                                  7     5      2      45
                                             20 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4     474
                                             26 COMRAM    14    10      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1223
                                             20 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             25    17      8    1353
                                             40 COMRAM    25    17      8
                             ___wmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _lcd_puts                                             2     0      2    3590
                                             34 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (2) _lcd_putc                                             1     1      0    3089
                                             33 COMRAM     1     1      0
                           _delay_ms
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (3) _lcd_gotoxy                                           3     2      1    1611
                                             30 COMRAM     3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0    1616
                                             30 COMRAM     1     1      0
                           _delay_ms
                      _lcd_send_byte
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (3) _lcd_send_byte                                        2     1      1    1008
                                             28 COMRAM     2     1      1
                       _delay_cycles
                           _delay_ms
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (4) _lcd_send_nibble                                      2     2      0      68
                                             26 COMRAM     2     2      0
                       _delay_cycles
 ---------------------------------------------------------------------------------
 (5) _delay_cycles                                         6     6      0      46
                                             20 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             4     2      2     426
                                             20 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _is_byte_available                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _isValidChar                                         14     9      5     902
                                             20 COMRAM    14     9      5
 ---------------------------------------------------------------------------------
 (1) _init_adc_no_lib                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init                                                 1     1      0       1
                                             20 COMRAM     1     1      0
                      _restartTimer0
 ---------------------------------------------------------------------------------
 (2) _restartTimer0                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _incrementClock                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _decrementClock                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _highIsr                                             18    18      0       0
                                              2 COMRAM    18    18      0
                    _changeClockMode
                    _changeSetupMode
                    _clockNormalMode
 ---------------------------------------------------------------------------------
 (8) _clockNormalMode                                      0     0      0       0
                    i2_restartTimer0
 ---------------------------------------------------------------------------------
 (9) i2_restartTimer0                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _changeSetupMode                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _changeClockMode                                      2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___flmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
   ___wmul
   _decrementClock
   _delay_ms
   _incrementClock
   _init
     _restartTimer0
   _init_adc_no_lib
   _isValidChar
   _is_byte_available
   _lcd_gotoxy
     _lcd_send_byte
       _delay_cycles
       _delay_ms
       _lcd_send_nibble
         _delay_cycles
   _lcd_init
     _delay_ms
     _lcd_send_byte
       _delay_cycles
       _delay_ms
       _lcd_send_nibble
         _delay_cycles
     _lcd_send_nibble
       _delay_cycles
   _lcd_putc
     _delay_ms
     _lcd_gotoxy
       _lcd_send_byte
         _delay_cycles
         _delay_ms
         _lcd_send_nibble
           _delay_cycles
     _lcd_send_byte
       _delay_cycles
       _delay_ms
       _lcd_send_nibble
         _delay_cycles
   _lcd_puts
     _lcd_putc
       _delay_ms
       _lcd_gotoxy
         _lcd_send_byte
           _delay_cycles
           _delay_ms
           _lcd_send_nibble
             _delay_cycles
       _lcd_send_byte
         _delay_cycles
         _delay_ms
         _lcd_send_nibble
           _delay_cycles
   _read_adc_voltage
     ___fldiv
       ___wmul (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
     ___wmul
     ___xxtofl
       ___wmul (ARG)
     _read_adc_raw_no_lib
   _read_byte_no_lib
   _send_string_no_lib
     _send_byte_no_lib
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___fladd
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___flge
     ___flmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     ___flneg
     ___flsub
       ___fladd
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
     ___fltol
       ___flmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___wmul
     ___xxtofl
       ___wmul (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 _highIsr (ROOT)
   _changeClockMode
   _changeSetupMode
   _clockNormalMode
     i2_restartTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     6E      78       5       93.8%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     64      6A       1       84.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      E2      34        0.0%
DATA                 0      0      E2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Nov 13 15:13:21 2021

           ?_read_adc_voltage 0042                  ___fldiv@aexp 0041                  ___fldiv@bexp 0040  
                ___fldiv@sign 0035            ??_read_adc_voltage 0046                ?_lcd_send_byte 001D  
                ___awdiv@sign 0020           ___wmul@multiplicand 0017                   __CFG_BORV$3 000000  
                __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000                  __CFG_CP2$OFF 000000  
                __CFG_CP3$OFF 000000                   __CFG_OSC$XT 000000                   __CFG_LVP$ON 000000  
                ?_isValidChar 0015                   __CFG_WDT$ON 000000                           l200 311E  
                         l201 311C                           l210 2F1A                           l123 2C0E  
                         l132 2B92                           l140 2416                           l125 2C30  
                         l301 0EFE                           l134 2BB4                           l142 240E  
                         l302 0F4E                           l151 2472                           l232 2D46  
                         l240 2EC6                           l312 0FCC                           l304 0F2A  
                         l137 2BD8                           l145 243A                           l241 2EF2  
                         l401 0442                           l218 2FE6                           l234 2D6E  
                         l242 2ECA                           l402 048E                           l314 1018  
                         l306 0F32                           l163 24B8                           l155 246C  
                         l147 2432                           l219 2FE0                           l227 2E6E  
                         l243 2ECE                           l251 2DA8                           l403 0574  
                         l244 2ED2                           l252 2DB4                           l420 06B8  
                         l412 05EC                           l316 1052                           l308 0F18  
                         l173 250C                           l165 24E4                           l149 2490  
                         l157 2486                           l253 2DC0                           l421 06A2  
                         l317 10F0                           l342 2118                           l350 148E  
                         l406 050C                           l159 24C0                           l239 2ED8  
                         l183 308C                           l431 07C6                           l192 3114  
                         l248 2DCC                           l184 307A                           l352 154E  
                         l440 0980                           l432 07B0                           l424 06DE  
                         l416 065E                           l360 004E                           l169 2514  
                         l177 306A                           l249 2D90                           l257 30B0  
                         l345 1342                           l441 096A                           l425 06C8  
                         l417 0678                           l178 305C                           l258 309E  
                         l346 1252                           l450 0A5A                           l434 07EA  
                         l290 0D44                           l339 2030                           l451 0A7C  
                         l443 09C4                           l435 07EE                           l444 09DC  
                         l436 0810                           l428 07A6                           l372 028C  
                         l380 019E                           l356 0020                           l292 0D76  
                         l284 0CE2                           l189 310C                           l349 1312  
                         l453 0A9E                           l437 095E                           l429 070C  
                         l381 01AE                           l365 008A                           l357 003C  
                         l285 0CEE                           l454 0AA6                           l438 0870  
                         l390 0278                           l382 01A8                           l294 0E58  
                         l455 0ACA                           l391 0242                           l375 0172  
                         l367 0164                           l359 0056                           l287 0CF4  
                         l720 28D0                           l640 29FA                           l456 0AD2  
                         l448 0A3A                           l376 02C8                           l384 0200  
                         l368 014C                           l288 0D02                           l721 28C0  
                         l457 0B1A                           l385 0216                           l369 0112  
                         l289 0D10                           l642 2A18                           l458 0AFA  
                         l394 098A                           l298 0EA2                           l643 2A10  
                         l467 0BF0                           l395 02DC                           l387 0230  
                         l379 0176                           l660 2CAC                           l652 2C68  
                         l468 0B62                           l396 032A                           l388 0220  
                         l661 2CBA                           l653 2C74                           l726 28F4  
                         l718 2864                           l646 2A38                           l398 0396  
                         l727 28E8                           l671 2536                           l647 2A42  
                         l639 29EA                           l655 2C8A                           l399 0414  
                         l648 2A50                           l656 2C82                           l729 2910  
                         l673 2554                           l690 26E6                           l674 2596  
                         l691 2724                           l683 2628                           l675 25C6  
                         l659 2CA2                           l835 30F8                           l684 261C  
                         l861 2A88                           l677 2604                           l781 23B2  
                         l862 2A7C                           l678 25F4                           l782 23A2  
                         l695 2FC2                           l951 19A2                           l943 18FE  
                         l871 2CE2                           l775 22E8                           l688 2674  
                         l952 1966                           l944 18FA                           l872 2CD6  
                         l689 26A8                           l961 1A7C                           l865 2ABC  
                         l777 2314                           l962 1A42                           l866 2ACA  
                         l778 234E                           l971 1B14                           l955 1A1E  
                         l875 2D0A                           l787 23D6                           l779 2376  
                         l956 19FC                           l948 1946                           l876 2D18  
                         l788 23CA                           l965 1A66                           l957 1A0A  
                         l949 1942                           l990 1BE4                           l974 1B38  
                         l966 1A6A                           l958 1A0E                           l991 1BEC  
                         l983 1B78                           l992 1BEE                           l976 1B4E  
                         l969 1B04                           l986 1BBE                           l978 1B58  
                __CFG_CPB$OFF 000000                  __CFG_CPD$OFF 000000                           _lcd 000F83  
                ___awmod@sign 001A                           prod 000FF3     read_adc_voltage@raw_value 004A  
                         wreg 000FE8                  ___flmul@aexp 0034                  ___flmul@bexp 0035  
                ___flmul@sign 002F                  ___flmul@temp 003A                  ___flmul@prod 0036  
                 lcd_gotoxy@x 0020                   lcd_gotoxy@y 001F                  ___fltol@exp1 004E  
                 main@command 00CE                          l1000 1C3A                          l1001 1C36  
                        l1010 1D96                          l1011 1D46                          l1012 1D6E  
                        l1004 1C7A                          l1005 1C76                          l1030 1EA2  
                        l1014 1D94                          l1007 1CC0                          l1024 1E02  
                        l1040 15FE                          l1017 1DCA                          l1009 1CE8  
                        l1041 161C                          l1026 1E46                          l1018 1DAC  
                        l1034 15AE                          l1027 1E6A                          l1035 15AA  
                        l1028 1E94                          l1052 1814                          l1036 15BE  
                        l1029 1EA0                          l1045 17DC                          l1070 2210  
                        l1062 21AA                          l1054 1858                          l1046 17BE  
                        l1038 15EE                          l1063 21BA                          l1055 1876  
                        l1039 15EA                          l1072 225A                          l1064 21D8  
                        l1073 224E                          l1057 189A                          l1066 21EA  
                        l1058 18B8                          l1067 21DE                          l1077 2278  
                        l1069 2228                          l1078 22AA                          l3092 24E0  
                        l4160 2BB4                          l3088 275C                          l4154 2B92  
                        l4342 2D66                          l5222 07B0                          l5142 04DE  
                        l5134 048E                          l4328 2D3E                          l5162 05F0  
                        l5074 0242                          l5068 0220                          l3910 1E94  
                        l5190 06A2                          l5354 0B62                          l5284 09E0  
                        l5358 0BEC                          l5198 06C8                          STR_1 FEAA  
                        STR_2 FF10                          STR_3 FF5D                          STR_4 FE69  
                        STR_5 FFB0                          STR_6 FFBF                          STR_7 FFC8  
                        STR_8 FFFB                          STR_9 FFF7                          u3200 1A26  
                        u4020 262E                          u3045 2E3E                          u3046 2E40  
                        u3150 19D2                          u4200 1DFE                          u3160 19E2  
                        u5010 3108                          u3410 1BCA                          u3330 1B5C  
                        u3170 19E4                          u4230 1E54                          _PIE1 000F9D  
                        u5040 2D5C                          u4240 1E78                          u3360 1B74  
                        u4400 2A8C                          u3520 160A                          u4330 2882  
                        u3610 1866                          u3530 1780                          u3620 1884  
                        u4510 2264                          u4430 2CE6                          u4335 2878  
                        u3535 1776                          u4370 28FA                          u3730 2C8E  
                        u6050 00EC                          u3580 1810                          u4630 2C04  
                        u3670 2A1C                          u6150 026C                          u6320 062E  
                        u6240 0454                          u4650 2C26                          u6410 07D4  
                        u6250 04A0                          u6090 01DC                          u6420 07E4  
                        u6157 0262                          u4670 2C4A                          u3950 23DC  
                        u6510 0A1E                          u3871 22CC                          u6280 04DE  
                        u6097 01D2                          u4930 24D4                          u3891 22F8  
                        u6380 06EC                          u6630 0B22                          u4960 24F8  
                        u6640 0B40                          u4890 24A4                          u6660 0C00  
                        u6740 0D28                          u6670 0C1C                          u6907 2E66  
                        u6780 0D5C                          u6917 305E                          u6758 0D2C  
                        u6798 0D60              ?_lcd_send_nibble 0001               _changeSetupMode 2F74  
                        _main 0C2A                          _init 2922              _send_byte_no_lib 3118  
                        fsr0h 000FEA                          fsr1h 000FE2                          fsr2h 000FDA  
                        fsr0l 000FE9                          indf1 000FE7                          indf2 000FDF  
                        fsr1l 000FE1                          fsr2l 000FD9                          btemp 006B  
                        prodh 000FF4                          prodl 000FF3                          start 000E  
               __CFG_IESO$OFF 000000               ___fldiv@new_exp 003A                   main@voltage 00DF  
                _sprintf$1785 008E               _isValidChar$900 0021               _isValidChar$901 0022  
             _isValidChar$895 001D               _isValidChar$896 001E               _isValidChar$897 001B  
             _isValidChar$898 001F               _isValidChar$899 0020                 __CFG_MCLRE$ON 000000  
                ___param_bank 000000              main@isRB4Release 00E3              main@isRB5Release 00E5  
        __end_of_delay_cycles 3002                 ___fltol@sign1 004D               __end_of___fladd 1C0A  
                       ?_main 0001                         ?_init 0001               __end_of___fldiv 1EBE  
             __end_of___awdiv 2A5A               __end_of___flneg 2FD4                         STR_10 FFD1  
                       STR_11 FFFB                         STR_12 FFF7                         STR_20 FF38  
                       STR_21 FFEA                         STR_13 FF90                         STR_14 FFA1  
                       STR_15 FFDA                         STR_16 FFE2                         STR_17 FFF1  
                       STR_18 FF7E                         STR_19 FEE2               __end_of___awmod 2CC4  
             __end_of___flmul 18CE               __end_of___flsub 2EC2               __end_of___fltol 2922  
             __end_of___lldiv 2ADC                         _T0CON 000FD5               ___awdiv@divisor 001D  
             __end_of___llmod 2D2A                         i2l115 2F8A                         i2l108 2E2E  
                       i2l117 2F9C                         i2l271 27DC                         i2l265 27D2  
                       i2l274 27F8                         i2l266 27CE                         i2l275 27FA  
             ___awdiv@counter 001F                         _RCREG 000FAE                         _RCSTA 000FAB  
                       _TMR0H 000FD7                         _TMR1H 000FCF                         _TMR0L 000FD6  
                       _TMR1L 000FCE                         _SPBRG 000FAF                         _PORTD 000F83  
     read_adc_voltage@channel 004C                         _TRISA 000F92                         _TRISB 000F93  
                       _TRISC 000F94                         _TRISD 000F95                         _TRISE 000F96  
                       _TXREG 000FAD                         _TXSTA 000FAC                 __CFG_PWRT$OFF 000000  
               __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000                 __CFG_WRT2$OFF 000000  
               __CFG_WRT3$OFF 000000       __end_of_changeClockMode 302C                __CFG_EBTR0$OFF 000000  
              __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000  
              __CFG_EBTR3$OFF 000000               __end_of_highIsr 2846                 __CFG_WRTB$OFF 000000  
               __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000                __CFG_EBTRB$OFF 000000  
             __end_of_dpowers FE69                         _scale 10FE               __end_of_isdigit 3100  
                       _hours 00F0               _init_adc_no_lib 3128                         main@i 00EB  
                       main@t 00E7                         pclath 000FFA                         tablat 000FF5  
                       status 000FD8       read_adc_voltage@voltage 0046                         wtemp6 006C  
             __end_of_sprintf 0C2A                __CFG_PBADEN$ON 000000                main@RecvedChar 00ED  
             __initialization 2F3E                  __end_of_main 10FE               ??_lcd_send_byte 001E  
                __end_of_init 29D6                _decrementClock 2B5E                        ??_main 00AD  
                      ??_init 0015                  isValidChar@c 0017                  isValidChar@i 0018  
               __activetblptr 000003          __size_of__tdiv_to_l_ 0132       __end_of_changeSetupMode 2FA6  
             _clockNormalMode 2DE2                        _ADCON0 000FC2                        _ADCON1 000FC1  
                      _ADCON2 000FC0              ___llmod@dividend 0022                        ?_scale 003C  
                      _ADRESH 000FC4                        _ADRESL 000FC3              ___awdiv@dividend 001B  
            __end_of___xxtofl 22BC              __end_of_delay_ms 3078                __CFG_XINST$OFF 000000  
            __end_of__powers_ FE0D              __end_of_lcd_init 2D8C                        ___flge 2640  
            __end_of_lcd_putc 2DE2              __end_of_lcd_puts 30C0        __end_of_decrementClock 2BDA  
                   ??___fladd 0051                        ___wmul 302C                     ??___fldiv 0031  
                   ??___awdiv 001F                     ??___flneg 0019                __CFG_STVREN$ON 000000  
                   ??___awmod 0019                     ??___flmul 002B                     ??___flsub 0065  
                   ??___fltol 0049                     ??___lldiv 001D                     ??___llmod 002A  
                      _fround 1EBE                        clear_0 2F64              ___awdiv@quotient 0021  
             ___awmod@divisor 0017               ___awmod@counter 0019                     ??_highIsr 0003  
             i2_restartTimer0 313E       __end_of_init_adc_no_lib 3134                  __pdataCOMRAM 0065  
                   ??_isdigit 0015          __size_of_isValidChar 012A                  __mediumconst FDD8  
         send_string_no_lib@p 0016                        tblptrh 000FF7                        tblptrl 000FF6  
                      tblptru 000FF8              ?_changeClockMode 0001       __size_of_incrementClock 007A  
          _send_string_no_lib 3078                     ??_sprintf 008A                    ___flge@ff1 0015  
                  ___flge@ff2 0019                  ___xxtofl@arg 0025                  ___xxtofl@exp 0024  
                ___xxtofl@val 001B                    __accesstop 0080       __end_of__initialization 2F6A  
                  ___flneg@f1 0015           ?_send_string_no_lib 0016             ?_read_byte_no_lib 0001  
               ___rparam_used 000001                    ___fltol@f1 0045            ??_read_byte_no_lib 0015  
              __pcstackCOMRAM 0001         __size_of_delay_cycles 002E               ?_decrementClock 0001  
               __end_of_scale 157E       __end_of_clockNormalMode 2E34          ??_send_string_no_lib 0018  
    __end_of_send_byte_no_lib 3128                    __div_to_l_ 2518     __size_of_read_adc_voltage 0082  
            ?_changeSetupMode 0001             lcd_gotoxy@address 0021               __div_to_l_@exp1 0022  
             __div_to_l_@cntr 0021                       ??_scale 0040               __div_to_l_@quot 001D  
                sprintf@width 00A8                    __pbssBANK0 00EE   __end_of_read_adc_raw_no_lib 2F3E  
                _delay_cycles 2FD4                 __div_to_l_@f1 0015                 __div_to_l_@f2 0019  
           read_byte_no_lib@c 0015         __end_of_restartTimer0 313E                lcd_send_byte@n 001D  
                     ?___flge 0015                       ?___wmul 0015       __end_ofi2_restartTimer0 3148  
            lcd_send_nibble@n 001C                       ?_fround 003C              ?_init_adc_no_lib 0001  
                     _INTCON2 000FF1                       _INTCON3 000FF0                     ?___xxtofl 001B  
                   ?_delay_ms 0015                    _lcd_gotoxy 2EC2                     ?_lcd_init 0001  
                   ?_lcd_putc 0001                     ?_lcd_puts 0023             _is_byte_available 3100  
           __end_of__npowers_ FE41                       __Hparam 0000                    _scale$1784 0040  
                     __Lparam 0000      __size_of_lcd_send_nibble 0022            ?_is_byte_available 0001  
             __size_of___flge 0120                       ___fladd 18CE                       ___fldiv 1C0A  
                     ___awdiv 29D6                       ___flneg 2FA6                       ___awmod 2C54  
                     ___flmul 157E                       ___flsub 2E7C                       ___fltol 2846  
                     ___lldiv 2A5A               __size_of___wmul 0026                       ___llmod 2CC4  
                     __pcinit 2F3E                       _clkMode 00F6               __size_of_fround 02AE  
                     __ramtop 1000           ??_is_byte_available 0015                       __ptext0 0C2A  
                     __ptext1 0012                       __ptext2 10FE                       __ptext3 30E2  
                     __ptext4 1EBE                       __ptext5 157E                       __ptext6 2C54  
                     __ptext7 29D6                       __ptext8 22BC                       __ptext9 2518  
                     _highIsr 0008              ?_clockNormalMode 0001                     _T0CONbits 000FD5  
                   _T1CONbits 000FCD                   ?__div_to_l_ 0015                       _dpowers FE41  
                     _initial 0069                       _isdigit 30E2                    ??___xxtofl 001F  
            ___awmod@dividend 0015                       _minutes 00F2                       _seconds 00F4  
              _incrementClock 2BDA                    ??_delay_ms 0017                       _stpMode 00EE  
                     _sprintf 0012                    ??_lcd_init 001F                __pintcode_body 2760  
                  ??_lcd_putc 0022                    ??_lcd_puts 0025          end_of_initialization 2F6A  
   __end_of_is_byte_available 3118                       int_func 2760          lcd_send_byte@cm_data 001E  
             ___lldiv@divisor 0019               ___lldiv@counter 0021                     _RCSTAbits 000FAB  
                     postdec1 000FE5                       postdec2 000FDD                       postinc0 000FEE  
                     postinc2 000FDE              ?i2_restartTimer0 0001                __tdiv_to_l_@f1 0015  
              __tdiv_to_l_@f2 0019         __end_of_lcd_send_byte 2E7C                 ??__tdiv_to_l_ 001D  
                   _PORTBbits 000F81                     _PORTCbits 000F82                     _PORTEbits 000F84  
      __end_of_incrementClock 2C54                   ___fladd@grs 005C                 ___xxtofl@sign 0023  
            _read_adc_voltage 2ADC                     _TRISCbits 000F94                   ?_lcd_gotoxy 001F  
                 ___fldiv@grs 003C                    main@Buffer 00AE                   ___fldiv@rem 0036  
             _LCD_INIT_STRING 0065                   ___flmul@grs 0030                     _TXSTAbits 000FAC  
            ??_decrementClock 0015           __size_of__div_to_l_ 0128             send_byte_no_lib@c 0015  
              __end_of___flge 2760                __end_of___wmul 3052                   _BAUDCONbits 000FB8  
               __pidataCOMRAM 3150                 delay_cycles@n 0018                 delay_cycles@x 0019  
           ??_lcd_send_nibble 001B                 ??_isValidChar 001A     __size_of_read_byte_no_lib 0008  
              __end_of_fround 216C             ?_send_byte_no_lib 0001               ?_incrementClock 0001  
         start_initialization 2F3E            ??_send_byte_no_lib 0015           __end_of__tdiv_to_l_ 23EE  
  __size_of_is_byte_available 0018      __size_of_changeClockMode 002A               ___llmod@divisor 0026  
             ___llmod@counter 002A                      ??___flge 001D           __size_of_lcd_gotoxy 0042  
                    ??___wmul 0019  read_adc_raw_no_lib@raw_value 0019              __CFG_LPT1OSC$OFF 000000  
                    ??_fround 0040                 sprintf@tmpval 0098   __size_of_send_string_no_lib 0024  
                   ___fladd@a 004D                     ___fladd@b 0049                    fround@prec 0048  
                   ___fldiv@a 002D                     ___fldiv@b 0029                     ___flmul@a 0027  
                   ___flmul@b 0023                     ___flsub@a 0061                     ___flsub@b 005D  
               __pcstackBANK0 0080           __end_of_isValidChar 2518             __size_of___xxtofl 0150  
                _isdigit$1408 0016             __size_of_delay_ms 0026             __size_of_lcd_init 0062  
                 sprintf@flag 00A2             __size_of_lcd_putc 0056             __size_of_lcd_puts 0024  
                 sprintf@fval 00A4                   sprintf@prec 00AA      __size_of_changeSetupMode 0032  
                   __pnvBANK0 00F6                     _main$1110 00D9                     _main$1105 00D7  
                   _main$1118 00DB                     _main$1119 00DD             __CFG_CCP2MX$PORTC 000000  
                   __pintcode 0008  __size_of_read_adc_raw_no_lib 003A                 __pmediumconst FDD8  
                    ?___fladd 0049                      ?___fldiv 0029                      ?___awdiv 001B  
                    ?___flneg 0015                      ?___awmod 0015                      ?___flmul 0023  
                    ?___flsub 005D                      ?___fltol 0045                      ?___lldiv 0015  
                    ?___llmod 0022                     __npowers_ FE0D                   __tdiv_to_l_ 22BC  
                    ?_highIsr 0001                  ??__div_to_l_ 001D                      ?_isdigit 0001  
                    ?_sprintf 0080        __size_of_restartTimer0 000A                __size_of_scale 0480  
    __size_of_init_adc_no_lib 000C                ___wmul@product 0019                     delay_ms@i 0017  
                   delay_ms@n 0015                      _PIR1bits 000F9E            __end_of__div_to_l_ 2640  
    __end_of_read_adc_voltage 2B5E                      i2u455_40 2DF6                      i2u456_40 2E0E  
                    i2u457_40 2E26                      i2u576_40 27C8                      _RCONbits 000FD0  
            __CFG_WDTPS$32768 000000             ??_changeClockMode 0001    read_adc_raw_no_lib@channel 001B  
            _read_byte_no_lib 3148                    _ADCON0bits 000FC2             ___wmul@multiplier 0015  
                 _isValidChar 23EE                     lcd_init@i 001F                     lcd_putc@c 0022  
                   lcd_puts@s 0023                  ??_lcd_gotoxy 0020      __size_of_clockNormalMode 0052  
                 _INTCON2bits 000FF1                   _INTCON3bits 000FF0                     copy_data0 2F52  
                   init@dummy 0015               _lcd_send_nibble 30C0                      __Hrparam 0000  
                    __Lrparam 0000            __CFG_BOREN$SBORDIS 000000                 _restartTimer0 3134  
           ??_changeSetupMode 0001            __end_of_lcd_gotoxy 2F04              ??_incrementClock 0015  
            __size_of___fladd 033C              __size_of___fldiv 02B4              __size_of___awdiv 0084  
            __size_of___flneg 002E              __size_of___awmod 0070              __size_of___flmul 0350  
            __size_of___flsub 0046              __size_of___fltol 00DC              __size_of___lldiv 0082  
            __size_of___llmod 0066                   _fround$1782 0044                   _fround$1783 0040  
            __size_of_highIsr 283E                    sprintf@len 0096                    sprintf@exp 00A0  
                  sprintf@val 009C                      ___xxtofl 216C            isValidChar@command 0015  
    __size_ofi2_restartTimer0 000A              __size_of_isdigit 001E                      _delay_ms 3052  
                    __ptext10 2CC4                      __ptext11 2A5A                      __ptext20 2ADC  
                    __ptext12 2846                      __ptext21 2F04                      __ptext13 2E7C  
                    __ptext30 30C0                      __ptext22 216C                      __ptext14 18CE  
                    __ptext31 2FD4                      __ptext23 302C                      __ptext15 2FA6  
                    __ptext32 3052                      __ptext24 1C0A                      __ptext16 2640  
                    __ptext41 2DE2                      __ptext33 3100                      __ptext25 309C  
                    __ptext17 3078                      __ptext42 313E                      __ptext34 23EE  
                    __ptext26 2D8C                      __ptext18 3118                      __ptext43 2F74  
                    __ptext35 3128                      __ptext27 2EC2                      __ptext19 3148  
                    __ptext44 3002                      __ptext36 2922                      __ptext28 2D2A  
                    __ptext37 3134                      __ptext29 2E34                      __ptext38 2BDA  
                    __ptext39 2B5E                      __powers_ FDD9                      _lcd_init 2D2A  
                    _lcd_putc 2D8C                      _lcd_puts 309C              __size_of_sprintf 0C18  
      __size_of_lcd_send_byte 0048                 ?_delay_cycles 0001                 __size_of_main 04D4  
               __size_of_init 00B4     __size_of_send_byte_no_lib 0010             ??_init_adc_no_lib 0015  
              ?_restartTimer0 0001                      int$flags 006B                    _INTCONbits 000FF2  
                    isdigit@c 0017           _read_adc_raw_no_lib 2F04                      scale@scl 0044  
                    intlevel2 0000                     sprintf@ap 0094                     sprintf@cp 0092  
     __end_of_lcd_send_nibble 30E2              __tdiv_to_l_@exp1 0025              __tdiv_to_l_@cntr 0024  
                   sprintf@sp 0080                ??_delay_cycles 0015              __tdiv_to_l_@quot 0020  
            ___lldiv@dividend 0015             ??_clockNormalMode 0001          ?_read_adc_raw_no_lib 0015  
  __end_of_send_string_no_lib 309C       __size_of_decrementClock 007C                 _lcd_send_byte 2E34  
                ?__tdiv_to_l_ 0015                      sprintf@c 00AC                      sprintf@f 0082  
            ___lldiv@quotient 001D                 ___fladd@signs 0059             ??i2_restartTimer0 0001  
             _changeClockMode 3002                  ___fladd@aexp 005A                  ___fladd@bexp 005B  
    __end_of_read_byte_no_lib 3150               ??_restartTimer0 0015         ??_read_adc_raw_no_lib 0017  
